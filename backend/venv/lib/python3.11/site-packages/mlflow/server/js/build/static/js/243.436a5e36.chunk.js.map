{"version":3,"file":"static/js/243.436a5e36.chunk.js","mappings":"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","sources":["common/components/KeyValueTagsEditorCell.tsx","model-registry/components/aliases/ModelVersionTableAliasesCell.tsx","model-registry/components/ModelVersionTable.tsx","model-registry/components/ModelView.tsx","model-registry/components/ModelPage.tsx"],"sourcesContent":["import { Button, PencilIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { KeyValueEntity } from '../../experiment-tracking/types';\nimport { KeyValueTag } from './KeyValueTag';\n\ninterface KeyValueTagsEditorCellProps {\n  tags?: KeyValueEntity[];\n  onAddEdit: () => void;\n}\n\n/**\n * A cell renderer used in tables, displaying a list of key-value tags with button for editing those\n */\nexport const KeyValueTagsEditorCell = ({ tags = [], onAddEdit }: KeyValueTagsEditorCellProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexWrap: 'wrap',\n        '> *': {\n          marginRight: '0 !important',\n        },\n        gap: theme.spacing.xs,\n      }}\n    >\n      {tags.length < 1 ? (\n        <Button\n          componentId=\"codegen_mlflow_app_src_common_components_keyvaluetagseditorcell.tsx_29\"\n          size=\"small\"\n          type=\"link\"\n          onClick={onAddEdit}\n        >\n          <FormattedMessage defaultMessage=\"Add\" description=\"Key-value tag table cell > 'add' button label\" />\n        </Button>\n      ) : (\n        <>\n          {tags.map((tag) => (\n            <KeyValueTag tag={tag} key={`${tag.key}-${tag.value}`} />\n          ))}\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_components_keyvaluetagseditorcell.tsx_37\"\n            size=\"small\"\n            icon={<PencilIcon />}\n            onClick={onAddEdit}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n","import { Button, PencilIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { ModelVersionAliasTag } from './ModelVersionAliasTag';\nimport { FormattedMessage } from 'react-intl';\n\ninterface ModelVersionTableAliasesCellProps {\n  aliases?: string[];\n  modelName: string;\n  version: string;\n  onAddEdit: () => void;\n}\n\nexport const ModelVersionTableAliasesCell = ({ aliases = [], onAddEdit }: ModelVersionTableAliasesCellProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        maxWidth: 300,\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'flex-start',\n        '> *': {\n          marginRight: '0 !important',\n        },\n        rowGap: theme.spacing.xs / 2,\n        columnGap: theme.spacing.xs,\n      }}\n    >\n      {aliases.length < 1 ? (\n        <Button\n          componentId=\"codegen_mlflow_app_src_model-registry_components_aliases_modelversiontablealiasescell.tsx_30\"\n          size=\"small\"\n          type=\"link\"\n          onClick={onAddEdit}\n        >\n          <FormattedMessage\n            defaultMessage=\"Add\"\n            description=\"Model registry > model version table > aliases column > 'add' button label\"\n          />\n        </Button>\n      ) : (\n        <>\n          {aliases.map((alias) => (\n            <ModelVersionAliasTag value={alias} key={alias} css={{ marginTop: theme.spacing.xs / 2 }} />\n          ))}\n          <Button\n            componentId=\"codegen_mlflow_app_src_model-registry_components_aliases_modelversiontablealiasescell.tsx_41\"\n            size=\"small\"\n            icon={<PencilIcon />}\n            onClick={onAddEdit}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n","import {\n  Empty,\n  NotificationIcon,\n  Pagination,\n  PlusIcon,\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  TableRowSelectCell,\n  LegacyTooltip,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport {\n  ColumnDef,\n  PaginationState,\n  RowSelectionState,\n  SortingState,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport { KeyValueEntity, ModelEntity, ModelVersionInfoEntity, ModelAliasMap } from '../../experiment-tracking/types';\nimport { useEffect, useMemo, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { RegisteringModelDocUrl } from '../../common/constants';\nimport {\n  ACTIVE_STAGES,\n  EMPTY_CELL_PLACEHOLDER,\n  ModelVersionStatusIcons,\n  StageTagComponents,\n  modelVersionStatusIconTooltips,\n} from '../constants';\nimport { Link } from '../../common/utils/RoutingUtils';\nimport { ModelRegistryRoutes } from '../routes';\nimport Utils from '../../common/utils/Utils';\nimport { KeyValueTagsEditorCell } from '../../common/components/KeyValueTagsEditorCell';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '../../redux-types';\nimport { useEditKeyValueTagsModal } from '../../common/hooks/useEditKeyValueTagsModal';\nimport { useEditRegisteredModelAliasesModal } from '../hooks/useEditRegisteredModelAliasesModal';\nimport { updateModelVersionTagsApi } from '../actions';\nimport { ModelVersionTableAliasesCell } from './aliases/ModelVersionTableAliasesCell';\nimport { Interpolation, Theme } from '@emotion/react';\nimport { truncateToFirstLineWithMaxLength } from '../../common/utils/StringUtils';\nimport ExpandableList from '../../common/components/ExpandableList';\n\ntype ModelVersionTableProps = {\n  modelName: string;\n  modelVersions?: ModelVersionInfoEntity[];\n  activeStageOnly?: boolean;\n  onChange: (selectedRowKeys: string[], selectedRows: ModelVersionInfoEntity[]) => void;\n  modelEntity?: ModelEntity;\n  onMetadataUpdated: () => void;\n  usingNextModelsUI: boolean;\n  aliases?: ModelAliasMap;\n};\n\ntype ModelVersionColumnDef = ColumnDef<ModelVersionInfoEntity> & {\n  meta?: { styles?: Interpolation<Theme>; multiline?: boolean; className?: string };\n};\n\nenum COLUMN_IDS {\n  STATUS = 'STATUS',\n  VERSION = 'VERSION',\n  CREATION_TIMESTAMP = 'CREATION_TIMESTAMP',\n  USER_ID = 'USER_ID',\n  TAGS = 'TAGS',\n  STAGE = 'STAGE',\n  DESCRIPTION = 'DESCRIPTION',\n  ALIASES = 'ALIASES',\n}\n\nexport const ModelVersionTable = ({\n  modelName,\n  modelVersions,\n  activeStageOnly,\n  onChange,\n  modelEntity,\n  onMetadataUpdated,\n  usingNextModelsUI,\n  aliases,\n}: ModelVersionTableProps) => {\n  const aliasesByVersion = useMemo(() => {\n    const result: Record<string, string[]> = {};\n    aliases?.forEach(({ alias, version }) => {\n      if (!result[version]) {\n        result[version] = [];\n      }\n      result[version].push(alias);\n    });\n    return result;\n  }, [aliases]);\n  const versions = useMemo(\n    () =>\n      activeStageOnly\n        ? (modelVersions || []).filter(({ current_stage }) => ACTIVE_STAGES.includes(current_stage))\n        : modelVersions,\n    [activeStageOnly, modelVersions],\n  );\n\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  const allTagsKeys = useMemo(() => {\n    const allTagsList: KeyValueEntity[] = versions?.map((modelVersion) => modelVersion?.tags || []).flat() || [];\n\n    // Extract keys, remove duplicates and sort the\n    return Array.from(new Set(allTagsList.map(({ key }) => key))).sort();\n  }, [versions]);\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const { EditTagsModal, showEditTagsModal } = useEditKeyValueTagsModal<ModelVersionInfoEntity>({\n    allAvailableTags: allTagsKeys,\n    saveTagsHandler: async (modelVersion, existingTags, newTags) =>\n      dispatch(updateModelVersionTagsApi(modelVersion, existingTags, newTags)),\n    onSuccess: onMetadataUpdated,\n  });\n\n  const { EditAliasesModal, showEditAliasesModal } = useEditRegisteredModelAliasesModal({\n    model: modelEntity || null,\n    onSuccess: onMetadataUpdated,\n  });\n\n  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});\n\n  const [pagination, setPagination] = useState<PaginationState>({\n    pageSize: 10,\n    pageIndex: 0,\n  });\n\n  useEffect(() => {\n    const selectedVersions = (versions || []).filter(({ version }) => rowSelection[version]);\n    const selectedVersionNumbers = selectedVersions.map(({ version }) => version);\n    onChange(selectedVersionNumbers, selectedVersions);\n  }, [rowSelection, onChange, versions]);\n\n  const tableColumns = useMemo(() => {\n    const columns: ModelVersionColumnDef[] = [\n      {\n        id: COLUMN_IDS.STATUS,\n        enableSorting: false,\n        header: '', // Status column does not have title\n        meta: { styles: { flexBasis: theme.general.heightSm, flexGrow: 0 } },\n        cell: ({ row: { original } }) => {\n          const { status, status_message } = original || {};\n          return (\n            <LegacyTooltip title={status_message || modelVersionStatusIconTooltips[status]}>\n              <Typography.Text>{ModelVersionStatusIcons[status]}</Typography.Text>\n            </LegacyTooltip>\n          );\n        },\n      },\n    ];\n    columns.push(\n      {\n        id: COLUMN_IDS.VERSION,\n        enableSorting: false,\n        header: intl.formatMessage({\n          defaultMessage: 'Version',\n          description: 'Column title text for model version in model version table',\n        }),\n        meta: { className: 'model-version' },\n        accessorKey: 'version',\n        cell: ({ getValue }) => (\n          <FormattedMessage\n            defaultMessage=\"<link>Version {versionNumber}</link>\"\n            description=\"Link to model version in the model version table\"\n            values={{\n              link: (chunks) => (\n                <Link to={ModelRegistryRoutes.getModelVersionPageRoute(modelName, String(getValue()))}>{chunks}</Link>\n              ),\n              versionNumber: getValue(),\n            }}\n          />\n        ),\n      },\n      {\n        id: COLUMN_IDS.CREATION_TIMESTAMP,\n        enableSorting: true,\n        meta: { styles: { minWidth: 200 } },\n        header: intl.formatMessage({\n          defaultMessage: 'Registered at',\n          description: 'Column title text for created at timestamp in model version table',\n        }),\n        accessorKey: 'creation_timestamp',\n        cell: ({ getValue }) => Utils.formatTimestamp(getValue()),\n      },\n\n      {\n        id: COLUMN_IDS.USER_ID,\n        enableSorting: false,\n        meta: { styles: { minWidth: 100 } },\n        header: intl.formatMessage({\n          defaultMessage: 'Created by',\n          description: 'Column title text for creator username in model version table',\n        }),\n        accessorKey: 'user_id',\n        cell: ({ getValue }) => <span>{getValue()}</span>,\n      },\n    );\n\n    if (usingNextModelsUI) {\n      // Display tags and aliases columns only when \"new models UI\" is flipped\n      columns.push(\n        {\n          id: COLUMN_IDS.TAGS,\n          enableSorting: false,\n          header: intl.formatMessage({\n            defaultMessage: 'Tags',\n            description: 'Column title text for model version tags in model version table',\n          }),\n          meta: { styles: { flex: 2 } },\n          accessorKey: 'tags',\n          cell: ({ getValue, row: { original } }) => {\n            return (\n              <KeyValueTagsEditorCell\n                tags={getValue() as KeyValueEntity[]}\n                onAddEdit={() => {\n                  showEditTagsModal?.(original);\n                }}\n              />\n            );\n          },\n        },\n        {\n          id: COLUMN_IDS.ALIASES,\n          accessorKey: 'aliases',\n          enableSorting: false,\n          header: intl.formatMessage({\n            defaultMessage: 'Aliases',\n            description: 'Column title text for model version aliases in model version table',\n          }),\n          meta: { styles: { flex: 2 }, multiline: true },\n          cell: ({ getValue, row: { original } }) => {\n            const mvAliases = aliasesByVersion[original.version] || [];\n            return (\n              <ModelVersionTableAliasesCell\n                modelName={modelName}\n                version={original.version}\n                aliases={mvAliases}\n                onAddEdit={() => {\n                  showEditAliasesModal?.(original.version);\n                }}\n              />\n            );\n          },\n        },\n      );\n    } else {\n      // If not, display legacy \"Stage\" columns\n      columns.push({\n        id: COLUMN_IDS.STAGE,\n        enableSorting: false,\n        header: intl.formatMessage({\n          defaultMessage: 'Stage',\n          description: 'Column title text for model version stage in model version table',\n        }),\n        accessorKey: 'current_stage',\n        cell: ({ getValue }) => {\n          return StageTagComponents[getValue() as string];\n        },\n      });\n    }\n    columns.push({\n      id: COLUMN_IDS.DESCRIPTION,\n      enableSorting: false,\n      header: intl.formatMessage({\n        defaultMessage: 'Description',\n        description: 'Column title text for description in model version table',\n      }),\n      meta: { styles: { flex: 2 } },\n      accessorKey: 'description',\n      cell: ({ getValue }) => truncateToFirstLineWithMaxLength(getValue(), 32),\n    });\n    return columns;\n  }, [theme, intl, modelName, showEditTagsModal, showEditAliasesModal, usingNextModelsUI, aliasesByVersion]);\n\n  const [sorting, setSorting] = useState<SortingState>([{ id: COLUMN_IDS.CREATION_TIMESTAMP, desc: true }]);\n\n  const table = useReactTable<ModelVersionInfoEntity>({\n    data: versions || [],\n    columns: tableColumns,\n    state: {\n      pagination,\n      rowSelection,\n      sorting,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getRowId: ({ version }) => version,\n    onRowSelectionChange: setRowSelection,\n    onSortingChange: setSorting,\n  });\n\n  const isEmpty = () => table.getRowModel().rows.length === 0;\n\n  const getLearnMoreLinkUrl = () => {\n    return RegisteringModelDocUrl;\n  };\n\n  const paginationComponent = (\n    <Pagination\n      componentId=\"codegen_mlflow_app_src_model-registry_components_modelversiontable.tsx_403\"\n      currentPageIndex={pagination.pageIndex + 1}\n      numTotal={(versions || []).length}\n      onChange={(page, pageSize) => {\n        setPagination({\n          pageSize: pageSize || pagination.pageSize,\n          pageIndex: page - 1,\n        });\n      }}\n      pageSize={pagination.pageSize}\n    />\n  );\n\n  const emptyComponent = (\n    <Empty\n      description={\n        <FormattedMessage\n          defaultMessage=\"No models versions are registered yet. <link>Learn more</link> about how to\n          register a model version.\"\n          description=\"Message text when no model versions are registered\"\n          values={{\n            link: (chunks) => (\n              <Typography.Link\n                componentId=\"codegen_mlflow_app_src_model-registry_components_modelversiontable.tsx_425\"\n                target=\"_blank\"\n                href={getLearnMoreLinkUrl()}\n              >\n                {chunks}\n              </Typography.Link>\n            ),\n          }}\n        />\n      }\n      image={<PlusIcon />}\n    />\n  );\n\n  return (\n    <>\n      <Table\n        data-testid=\"model-list-table\"\n        pagination={paginationComponent}\n        scrollable\n        empty={isEmpty() ? emptyComponent : undefined}\n        someRowsSelected={table.getIsSomeRowsSelected() || table.getIsAllRowsSelected()}\n      >\n        <TableRow isHeader>\n          <TableRowSelectCell\n            componentId=\"codegen_mlflow_app_src_model-registry_components_modelversiontable.tsx_450\"\n            checked={table.getIsAllRowsSelected()}\n            indeterminate={table.getIsSomeRowsSelected()}\n            onChange={table.getToggleAllRowsSelectedHandler()}\n          />\n          {table.getLeafHeaders().map((header) => (\n            <TableHeader\n              componentId=\"codegen_mlflow_app_src_model-registry_components_modelversiontable.tsx_458\"\n              multiline={false}\n              key={header.id}\n              sortable={header.column.getCanSort()}\n              sortDirection={header.column.getIsSorted() || 'none'}\n              onToggleSort={header.column.getToggleSortingHandler()}\n              css={(header.column.columnDef as ModelVersionColumnDef).meta?.styles}\n            >\n              {flexRender(header.column.columnDef.header, header.getContext())}\n            </TableHeader>\n          ))}\n        </TableRow>\n        {table.getRowModel().rows.map((row) => (\n          <TableRow\n            key={row.id}\n            css={{\n              '.table-row-select-cell': {\n                alignItems: 'flex-start',\n              },\n            }}\n          >\n            <TableRowSelectCell\n              componentId=\"codegen_mlflow_app_src_model-registry_components_modelversiontable.tsx_477\"\n              checked={row.getIsSelected()}\n              onChange={row.getToggleSelectedHandler()}\n            />\n            {row.getAllCells().map((cell) => (\n              <TableCell\n                className={(cell.column.columnDef as ModelVersionColumnDef).meta?.className}\n                multiline={(cell.column.columnDef as ModelVersionColumnDef).meta?.multiline}\n                key={cell.id}\n                css={(cell.column.columnDef as ModelVersionColumnDef).meta?.styles}\n              >\n                {flexRender(cell.column.columnDef.cell, cell.getContext())}\n              </TableCell>\n            ))}\n          </TableRow>\n        ))}\n      </Table>\n      {EditTagsModal}\n      {EditAliasesModal}\n    </>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { ModelVersionTable } from './ModelVersionTable';\nimport Utils from '../../common/utils/Utils';\nimport { Link, NavigateFunction } from '../../common/utils/RoutingUtils';\nimport { ModelRegistryRoutes } from '../routes';\nimport { message } from 'antd';\nimport { ACTIVE_STAGES } from '../constants';\nimport { CollapsibleSection } from '../../common/components/CollapsibleSection';\nimport { EditableNote } from '../../common/components/EditableNote';\nimport { EditableTagsTableView } from '../../common/components/EditableTagsTableView';\nimport { getRegisteredModelTags } from '../reducers';\nimport { setRegisteredModelTagApi, deleteRegisteredModelTagApi } from '../actions';\nimport { connect } from 'react-redux';\nimport { OverflowMenu, PageHeader } from '../../shared/building_blocks/PageHeader';\nimport { FormattedMessage, type IntlShape, injectIntl } from 'react-intl';\nimport { Button, SegmentedControlGroup, SegmentedControlButton, DangerModal } from '@databricks/design-system';\nimport { Descriptions } from '../../common/components/Descriptions';\nimport { ModelVersionInfoEntity, type ModelEntity } from '../../experiment-tracking/types';\nimport { shouldShowModelsNextUI } from '../../common/utils/FeatureUtils';\nimport { ModelsNextUIToggleSwitch } from './ModelsNextUIToggleSwitch';\nimport { withNextModelsUIContext } from '../hooks/useNextModelsUI';\n\nexport const StageFilters = {\n  ALL: 'ALL',\n  ACTIVE: 'ACTIVE',\n};\n\ntype ModelViewImplProps = {\n  model?: ModelEntity;\n  modelVersions?: ModelVersionInfoEntity[];\n  handleEditDescription: (...args: any[]) => any;\n  handleDelete: (...args: any[]) => any;\n  navigate: NavigateFunction;\n  showEditPermissionModal: (...args: any[]) => any;\n  activePane?: any; // TODO: PropTypes.oneOf(Object.values(PANES))\n  emailSubscriptionStatus?: string;\n  userLevelEmailSubscriptionStatus?: string;\n  handleEmailNotificationPreferenceChange?: (...args: any[]) => any;\n  tags: any;\n  setRegisteredModelTagApi: (...args: any[]) => any;\n  deleteRegisteredModelTagApi: (...args: any[]) => any;\n  intl: IntlShape;\n  onMetadataUpdated: () => void;\n  usingNextModelsUI: boolean;\n};\n\ntype ModelViewImplState = any;\n\nexport class ModelViewImpl extends React.Component<ModelViewImplProps, ModelViewImplState> {\n  constructor(props: ModelViewImplProps) {\n    super(props);\n    this.onCompare = this.onCompare.bind(this);\n  }\n\n  state = {\n    stageFilter: StageFilters.ALL,\n    showDescriptionEditor: false,\n    isDeleteModalVisible: false,\n    isDeleteModalConfirmLoading: false,\n    runsSelected: {},\n    isTagsRequestPending: false,\n    updatingEmailPreferences: false,\n  };\n\n  formRef = React.createRef();\n\n  componentDidMount() {\n    // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n    const pageTitle = `${this.props.model.name} - MLflow Model`;\n    Utils.updatePageTitle(pageTitle);\n  }\n\n  handleStageFilterChange = (e: any) => {\n    this.setState({ stageFilter: e.target.value });\n  };\n\n  getActiveVersionsCount() {\n    const { modelVersions } = this.props;\n    return modelVersions ? modelVersions.filter((v) => ACTIVE_STAGES.includes(v.current_stage)).length : 0;\n  }\n\n  handleCancelEditDescription = () => {\n    this.setState({ showDescriptionEditor: false });\n  };\n\n  handleSubmitEditDescription = (description: any) => {\n    return this.props.handleEditDescription(description).then(() => {\n      this.setState({ showDescriptionEditor: false });\n    });\n  };\n\n  startEditingDescription = (e: any) => {\n    e.stopPropagation();\n    this.setState({ showDescriptionEditor: true });\n  };\n\n  getOverflowMenuItems() {\n    const menuItems = [\n      {\n        id: 'delete',\n        itemName: (\n          <FormattedMessage\n            defaultMessage=\"Delete\"\n            // eslint-disable-next-line max-len\n            description=\"Text for disabled delete button due to active versions on model view page header\"\n          />\n        ),\n        onClick: this.showDeleteModal,\n        disabled: this.getActiveVersionsCount() > 0,\n      },\n    ];\n\n    return menuItems;\n  }\n\n  showDeleteModal = () => {\n    this.setState({ isDeleteModalVisible: true });\n  };\n\n  hideDeleteModal = () => {\n    this.setState({ isDeleteModalVisible: false });\n  };\n\n  showConfirmLoading = () => {\n    this.setState({ isDeleteModalConfirmLoading: true });\n  };\n\n  hideConfirmLoading = () => {\n    this.setState({ isDeleteModalConfirmLoading: false });\n  };\n\n  handleDeleteConfirm = () => {\n    const { navigate } = this.props;\n    this.showConfirmLoading();\n    this.props\n      .handleDelete()\n      .then(() => {\n        navigate(ModelRegistryRoutes.modelListPageRoute);\n      })\n      .catch((e: any) => {\n        this.hideConfirmLoading();\n        Utils.logErrorAndNotifyUser(e);\n      });\n  };\n\n  handleAddTag = (values: any) => {\n    const form = this.formRef.current;\n    const { model } = this.props;\n    // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n    const modelName = model.name;\n    this.setState({ isTagsRequestPending: true });\n    this.props\n      .setRegisteredModelTagApi(modelName, values.name, values.value)\n      .then(() => {\n        this.setState({ isTagsRequestPending: false });\n        (form as any).resetFields();\n      })\n      .catch((ex: any) => {\n        this.setState({ isTagsRequestPending: false });\n        // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n        console.error(ex);\n        message.error('Failed to add tag. Error: ' + ex.getUserVisibleError());\n      });\n  };\n\n  handleSaveEdit = ({ name, value }: any) => {\n    const { model } = this.props;\n    // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n    const modelName = model.name;\n    return this.props.setRegisteredModelTagApi(modelName, name, value).catch((ex: any) => {\n      // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n      console.error(ex);\n      message.error('Failed to set tag. Error: ' + ex.getUserVisibleError());\n    });\n  };\n\n  handleDeleteTag = ({ name }: any) => {\n    const { model } = this.props;\n    // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n    const modelName = model.name;\n    return this.props.deleteRegisteredModelTagApi(modelName, name).catch((ex: any) => {\n      // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n      console.error(ex);\n      message.error('Failed to delete tag. Error: ' + ex.getUserVisibleError());\n    });\n  };\n\n  onChange = (selectedRowKeys: any, selectedRows: any) => {\n    const newState = Object.assign({}, this.state);\n    newState.runsSelected = {};\n    selectedRows.forEach((row: any) => {\n      newState.runsSelected = {\n        ...newState.runsSelected,\n        [row.version]: row.run_id,\n      };\n    });\n    this.setState(newState);\n  };\n\n  onCompare() {\n    if (!this.props.model) {\n      return;\n    }\n    this.props.navigate(\n      ModelRegistryRoutes.getCompareModelVersionsPageRoute(this.props.model.name, this.state.runsSelected),\n    );\n  }\n\n  renderDescriptionEditIcon() {\n    return (\n      <Button\n        componentId=\"codegen_mlflow_app_src_model-registry_components_modelview.tsx_467\"\n        data-test-id=\"descriptionEditButton\"\n        type=\"link\"\n        css={styles.editButton}\n        onClick={this.startEditingDescription}\n      >\n        <FormattedMessage\n          defaultMessage=\"Edit\"\n          description=\"Text for the edit button next to the description section title on\n             the model view page\"\n        />\n      </Button>\n    );\n  }\n\n  renderDetails = () => {\n    const { model, modelVersions, tags } = this.props;\n    const {\n      stageFilter,\n      showDescriptionEditor,\n      isDeleteModalVisible,\n      isDeleteModalConfirmLoading,\n      isTagsRequestPending,\n    } = this.state;\n    // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n    const modelName = model.name;\n    const compareDisabled = Object.keys(this.state.runsSelected).length < 2;\n    return (\n      <div css={styles.wrapper}>\n        {/* Metadata List */}\n        <Descriptions columns={3} data-testid=\"model-view-metadata\">\n          <Descriptions.Item\n            data-testid=\"model-view-metadata-item\"\n            label={this.props.intl.formatMessage({\n              defaultMessage: 'Created Time',\n              description: 'Label name for the created time under details tab on the model view page',\n            })}\n          >\n            {/* @ts-expect-error TS(2532): Object is possibly 'undefined'. */}\n            {Utils.formatTimestamp(model.creation_timestamp)}\n          </Descriptions.Item>\n          <Descriptions.Item\n            data-testid=\"model-view-metadata-item\"\n            label={this.props.intl.formatMessage({\n              defaultMessage: 'Last Modified',\n              description: 'Label name for the last modified time under details tab on the model view page',\n            })}\n          >\n            {/* @ts-expect-error TS(2532): Object is possibly 'undefined'. */}\n            {Utils.formatTimestamp(model.last_updated_timestamp)}\n          </Descriptions.Item>\n          {/* Reported during ESLint upgrade */}\n          {/* eslint-disable-next-line react/prop-types */}\n          {(model as any).user_id && (\n            <Descriptions.Item\n              data-testid=\"model-view-metadata-item\"\n              label={this.props.intl.formatMessage({\n                defaultMessage: 'Creator',\n                description: 'Lable name for the creator under details tab on the model view page',\n              })}\n            >\n              {/* eslint-disable-next-line react/prop-types */}\n              <div>{(model as any).user_id}</div>\n            </Descriptions.Item>\n          )}\n        </Descriptions>\n\n        {/* Page Sections */}\n        <CollapsibleSection\n          // @ts-expect-error TS(2322): Type '{ children: Element; css: any; title: Elemen... Remove this comment to see the full error message\n          css={(styles as any).collapsiblePanel}\n          title={\n            <span>\n              <FormattedMessage\n                defaultMessage=\"Description\"\n                description=\"Title text for the description section under details tab on the model\n                   view page\"\n              />{' '}\n              {!showDescriptionEditor ? this.renderDescriptionEditIcon() : null}\n            </span>\n          }\n          forceOpen={showDescriptionEditor}\n          // Reported during ESLint upgrade\n          // eslint-disable-next-line react/prop-types\n          defaultCollapsed={!(model as any).description}\n          data-test-id=\"model-description-section\"\n        >\n          <EditableNote\n            defaultMarkdown={(model as any).description}\n            onSubmit={this.handleSubmitEditDescription}\n            onCancel={this.handleCancelEditDescription}\n            showEditor={showDescriptionEditor}\n          />\n        </CollapsibleSection>\n        <div data-test-id=\"tags-section\">\n          <CollapsibleSection\n            title={\n              <FormattedMessage\n                defaultMessage=\"Tags\"\n                description=\"Title text for the tags section under details tab on the model view\n                   page\"\n              />\n            }\n            defaultCollapsed={Utils.getVisibleTagValues(tags).length === 0}\n            data-test-id=\"model-tags-section\"\n          >\n            <EditableTagsTableView\n              // @ts-expect-error TS(2322): Type '{ innerRef: RefObject<unknown>; handleAddTag... Remove this comment to see the full error message\n              innerRef={this.formRef}\n              handleAddTag={this.handleAddTag}\n              handleDeleteTag={this.handleDeleteTag}\n              handleSaveEdit={this.handleSaveEdit}\n              tags={tags}\n              isRequestPending={isTagsRequestPending}\n            />\n          </CollapsibleSection>\n        </div>\n        <CollapsibleSection\n          title={\n            <>\n              <div css={styles.versionsTabButtons}>\n                <span>\n                  <FormattedMessage\n                    defaultMessage=\"Versions\"\n                    description=\"Title text for the versions section under details tab on the\n                       model view page\"\n                  />\n                </span>\n                {!this.props.usingNextModelsUI && (\n                  <SegmentedControlGroup\n                    componentId=\"codegen_mlflow_app_src_model-registry_components_modelview.tsx_600\"\n                    name=\"stage-filter\"\n                    value={this.state.stageFilter}\n                    onChange={(e) => this.handleStageFilterChange(e)}\n                  >\n                    <SegmentedControlButton value={StageFilters.ALL}>\n                      <FormattedMessage\n                        defaultMessage=\"All\"\n                        description=\"Tab text to view all versions under details tab on the model view page\"\n                      />\n                    </SegmentedControlButton>\n                    <SegmentedControlButton value={StageFilters.ACTIVE}>\n                      <FormattedMessage\n                        defaultMessage=\"Active\"\n                        description=\"Tab text to view active versions under details tab\n                                on the model view page\"\n                      />{' '}\n                      {this.getActiveVersionsCount()}\n                    </SegmentedControlButton>\n                  </SegmentedControlGroup>\n                )}\n                <Button\n                  componentId=\"codegen_mlflow_app_src_model-registry_components_modelview.tsx_619\"\n                  data-test-id=\"compareButton\"\n                  disabled={compareDisabled}\n                  onClick={this.onCompare}\n                >\n                  <FormattedMessage\n                    defaultMessage=\"Compare\"\n                    description=\"Text for compare button to compare versions under details tab\n                       on the model view page\"\n                  />\n                </Button>\n              </div>\n            </>\n          }\n          data-test-id=\"model-versions-section\"\n        >\n          {shouldShowModelsNextUI() && (\n            <div\n              css={{\n                marginBottom: 8,\n                display: 'flex',\n                justifyContent: 'flex-end',\n              }}\n            >\n              <ModelsNextUIToggleSwitch />\n            </div>\n          )}\n          <ModelVersionTable\n            activeStageOnly={stageFilter === StageFilters.ACTIVE && !this.props.usingNextModelsUI}\n            modelName={modelName}\n            modelVersions={modelVersions}\n            modelEntity={model}\n            onChange={this.onChange}\n            onMetadataUpdated={this.props.onMetadataUpdated}\n            usingNextModelsUI={this.props.usingNextModelsUI}\n            aliases={model?.aliases}\n          />\n        </CollapsibleSection>\n\n        {/* Delete Model Dialog */}\n        <DangerModal\n          componentId=\"codegen_mlflow_app_src_model-registry_components_modelview.tsx_662\"\n          data-testid=\"mlflow-input-modal\"\n          title={this.props.intl.formatMessage({\n            defaultMessage: 'Delete Model',\n            description: 'Title text for delete model modal on model view page',\n          })}\n          visible={isDeleteModalVisible}\n          confirmLoading={isDeleteModalConfirmLoading}\n          onOk={this.handleDeleteConfirm}\n          okText={this.props.intl.formatMessage({\n            defaultMessage: 'Delete',\n            description: 'OK text for delete model modal on model view page',\n          })}\n          cancelText={this.props.intl.formatMessage({\n            defaultMessage: 'Cancel',\n            description: 'Cancel text for delete model modal on model view page',\n          })}\n          onCancel={this.hideDeleteModal}\n        >\n          <span>\n            <FormattedMessage\n              defaultMessage=\"Are you sure you want to delete {modelName}? This cannot be undone.\"\n              description=\"Confirmation message for delete model modal on model view page\"\n              values={{ modelName: modelName }}\n            />\n          </span>\n        </DangerModal>\n      </div>\n    );\n  };\n\n  renderMainPanel() {\n    return this.renderDetails();\n  }\n\n  render() {\n    const { model } = this.props;\n    // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n    const modelName = model.name;\n\n    const breadcrumbs = [\n      <Link to={ModelRegistryRoutes.modelListPageRoute}>\n        <FormattedMessage\n          defaultMessage=\"Registered Models\"\n          description=\"Text for link back to model page under the header on the model view page\"\n        />\n      </Link>,\n    ];\n    return (\n      <div>\n        <PageHeader title={modelName} breadcrumbs={breadcrumbs}>\n          <OverflowMenu menu={this.getOverflowMenuItems()} />\n        </PageHeader>\n        {this.renderMainPanel()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const modelName = ownProps.model.name;\n  const tags = getRegisteredModelTags(modelName, state);\n  return { tags };\n};\nconst mapDispatchToProps = { setRegisteredModelTagApi, deleteRegisteredModelTagApi };\n\nconst styles = {\n  emailNotificationPreferenceDropdown: (theme: any) => ({\n    width: 300,\n    marginBottom: theme.spacing.md,\n  }),\n  emailNotificationPreferenceTip: (theme: any) => ({\n    paddingLeft: theme.spacing.sm,\n    paddingRight: theme.spacing.sm,\n  }),\n  wrapper: (theme: any) => ({\n    '.collapsible-panel': {\n      marginBottom: theme.spacing.md,\n    },\n\n    /**\n     * This seems to be a best and most stable method to catch\n     * antd's collapsible section buttons without hacks\n     * and using class names.\n     */\n    'div[role=\"button\"][aria-expanded]': {\n      height: theme.general.buttonHeight,\n    },\n  }),\n  editButton: (theme: any) => ({\n    marginLeft: theme.spacing.md,\n  }),\n  versionsTabButtons: (theme: any) => ({\n    display: 'flex',\n    gap: theme.spacing.md,\n    alignItems: 'center',\n  }),\n};\n\nexport const ModelView = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withNextModelsUIContext(injectIntl(ModelViewImpl)));\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  searchModelVersionsApi,\n  getRegisteredModelApi,\n  updateRegisteredModelApi,\n  deleteRegisteredModelApi,\n} from '../actions';\nimport { ModelView } from './ModelView';\nimport { getModelVersions } from '../reducers';\nimport { MODEL_VERSION_STATUS_POLL_INTERVAL as POLL_INTERVAL } from '../constants';\nimport { PageContainer } from '../../common/components/PageContainer';\nimport RequestStateWrapper, { triggerError } from '../../common/components/RequestStateWrapper';\nimport { Spinner } from '../../common/components/Spinner';\nimport { ErrorView } from '../../common/components/ErrorView';\nimport { ModelRegistryRoutes } from '../routes';\nimport Utils from '../../common/utils/Utils';\nimport { getUUID } from '../../common/utils/ActionUtils';\nimport { injectIntl } from 'react-intl';\nimport { ErrorWrapper } from '../../common/utils/ErrorWrapper';\nimport { withRouterNext } from '../../common/utils/withRouterNext';\nimport type { WithRouterNextProps } from '../../common/utils/withRouterNext';\nimport { withErrorBoundary } from '../../common/utils/withErrorBoundary';\nimport ErrorUtils from '../../common/utils/ErrorUtils';\nimport { ErrorCodes } from '../../common/constants';\n\ntype ModelPageImplProps = WithRouterNextProps<{ subpage: string }> & {\n  modelName: string;\n  model?: any;\n  modelVersions?: any[];\n  emailSubscriptionStatus?: string;\n  userLevelEmailSubscriptionStatus?: string;\n  searchModelVersionsApi: (...args: any[]) => any;\n  getRegisteredModelApi: (...args: any[]) => any;\n  updateRegisteredModelApi: (...args: any[]) => any;\n  deleteRegisteredModelApi: (...args: any[]) => any;\n  setEmailSubscriptionStatusApi: (...args: any[]) => any;\n  getEmailSubscriptionStatusApi: (...args: any[]) => any;\n  getUserLevelEmailSubscriptionStatusApi: (...args: any[]) => any;\n  searchEndpointsByModelNameApi: (...args: any[]) => any;\n  intl?: any;\n};\n\nexport class ModelPageImpl extends React.Component<ModelPageImplProps> {\n  hasUnfilledRequests: any;\n  pollIntervalId: any;\n\n  initSearchModelVersionsApiRequestId = getUUID();\n  initgetRegisteredModelApiRequestId = getUUID();\n  updateRegisteredModelApiId = getUUID();\n  deleteRegisteredModelApiId = getUUID();\n\n  criticalInitialRequestIds = [this.initSearchModelVersionsApiRequestId, this.initgetRegisteredModelApiRequestId];\n\n  handleEditDescription = (description: any) => {\n    const { model } = this.props;\n    return this.props\n      .updateRegisteredModelApi(model.name, description, this.updateRegisteredModelApiId)\n      .then(this.loadData);\n  };\n\n  handleDelete = () => {\n    const { model } = this.props;\n    return this.props.deleteRegisteredModelApi(model.name, this.deleteRegisteredModelApiId);\n  };\n\n  loadData = (isInitialLoading: any) => {\n    const { modelName } = this.props;\n    this.hasUnfilledRequests = true;\n    const promiseValues = [\n      this.props.getRegisteredModelApi(\n        modelName,\n        isInitialLoading === true ? this.initgetRegisteredModelApiRequestId : null,\n      ),\n      this.props.searchModelVersionsApi(\n        { name: modelName },\n        isInitialLoading === true ? this.initSearchModelVersionsApiRequestId : null,\n      ),\n    ];\n    return Promise.all(promiseValues).then(() => {\n      this.hasUnfilledRequests = false;\n    });\n  };\n\n  pollData = () => {\n    const { modelName, navigate } = this.props;\n    if (!this.hasUnfilledRequests && Utils.isBrowserTabVisible()) {\n      // @ts-expect-error TS(2554): Expected 1 arguments, but got 0.\n      return this.loadData().catch((e) => {\n        if (e instanceof ErrorWrapper && e.getErrorCode() === 'RESOURCE_DOES_NOT_EXIST') {\n          Utils.logErrorAndNotifyUser(e);\n          this.props.deleteRegisteredModelApi(modelName, undefined, true);\n          navigate(ModelRegistryRoutes.modelListPageRoute);\n        } else {\n          // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n          console.error(e);\n        }\n        this.hasUnfilledRequests = false;\n      });\n    }\n    return Promise.resolve();\n  };\n\n  componentDidMount() {\n    // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n    this.loadData(true).catch(console.error);\n    this.hasUnfilledRequests = false;\n    this.pollIntervalId = setInterval(this.pollData, POLL_INTERVAL);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.pollIntervalId);\n  }\n\n  render() {\n    const { model, modelVersions, navigate, modelName } = this.props;\n    return (\n      <PageContainer>\n        <RequestStateWrapper\n          requestIds={this.criticalInitialRequestIds}\n          // eslint-disable-next-line no-trailing-spaces\n        >\n          {(loading: any, hasError: any, requests: any) => {\n            if (hasError) {\n              clearInterval(this.pollIntervalId);\n              if (Utils.shouldRender404(requests, [this.initgetRegisteredModelApiRequestId])) {\n                return (\n                  <ErrorView\n                    statusCode={404}\n                    subMessage={this.props.intl.formatMessage(\n                      {\n                        defaultMessage: 'Model {modelName} does not exist',\n                        description: 'Sub-message text for error message on overall model page',\n                      },\n                      {\n                        modelName: modelName,\n                      },\n                    )}\n                    fallbackHomePageReactRoute={ModelRegistryRoutes.modelListPageRoute}\n                  />\n                );\n              }\n              const permissionDeniedErrors = requests.filter((request: any) => {\n                return (\n                  this.criticalInitialRequestIds.includes(request.id) &&\n                  request.error?.getErrorCode() === ErrorCodes.PERMISSION_DENIED\n                );\n              });\n              if (permissionDeniedErrors && permissionDeniedErrors[0]) {\n                return (\n                  <ErrorView\n                    statusCode={403}\n                    subMessage={this.props.intl.formatMessage(\n                      {\n                        defaultMessage: 'Permission denied for {modelName}. Error: \"{errorMsg}\"',\n                        description: 'Permission denied error message on registered model detail page',\n                      },\n                      {\n                        modelName: modelName,\n                        errorMsg: permissionDeniedErrors[0].error?.getMessageField(),\n                      },\n                    )}\n                    fallbackHomePageReactRoute={ModelRegistryRoutes.modelListPageRoute}\n                  />\n                );\n              }\n              // TODO(Zangr) Have a more generic boundary to handle all errors, not just 404.\n              triggerError(requests);\n            } else if (loading) {\n              return <Spinner />;\n            } else if (model) {\n              // Null check to prevent NPE after delete operation\n              return (\n                <ModelView\n                  model={model}\n                  modelVersions={modelVersions}\n                  handleEditDescription={this.handleEditDescription}\n                  handleDelete={this.handleDelete}\n                  navigate={navigate}\n                  onMetadataUpdated={this.loadData}\n                />\n              );\n            }\n            return null;\n          }}\n        </RequestStateWrapper>\n      </PageContainer>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any, ownProps: WithRouterNextProps<{ modelName: string }>) => {\n  const modelName = decodeURIComponent(ownProps.params.modelName);\n  const model = state.entities.modelByName[modelName];\n  const modelVersions = getModelVersions(state, modelName);\n  return {\n    modelName,\n    model,\n    modelVersions,\n  };\n};\n\nconst mapDispatchToProps = {\n  searchModelVersionsApi,\n  getRegisteredModelApi,\n  updateRegisteredModelApi,\n  deleteRegisteredModelApi,\n};\n\nconst ModelPageWithRouter = withRouterNext(\n  // @ts-expect-error TS(2769): No overload matches this call.\n  connect(mapStateToProps, mapDispatchToProps)(injectIntl(ModelPageImpl)),\n);\n\nexport const ModelPage = withErrorBoundary(ErrorUtils.mlflowServices.MODEL_REGISTRY, ModelPageWithRouter);\n\nexport default ModelPage;\n"],"names":["KeyValueTagsEditorCell","_ref","tags","onAddEdit","theme","useDesignSystemTheme","_jsx","css","_css","display","flexWrap","marginRight","gap","spacing","xs","children","length","Button","componentId","size","type","onClick","FormattedMessage","id","defaultMessage","_jsxs","_Fragment","map","tag","KeyValueTag","key","value","icon","PencilIcon","ModelVersionTableAliasesCell","aliases","maxWidth","alignItems","rowGap","columnGap","alias","ModelVersionAliasTag","marginTop","COLUMN_IDS","_ref16","name","styles","ModelVersionTable","modelName","modelVersions","activeStageOnly","onChange","modelEntity","onMetadataUpdated","usingNextModelsUI","aliasesByVersion","useMemo","result","forEach","_ref2","version","push","versions","filter","_ref3","current_stage","ACTIVE_STAGES","includes","intl","useIntl","allTagsKeys","allTagsList","modelVersion","flat","Array","from","Set","_ref4","sort","dispatch","useDispatch","EditTagsModal","showEditTagsModal","useEditKeyValueTagsModal","allAvailableTags","saveTagsHandler","async","existingTags","newTags","updateModelVersionTagsApi","onSuccess","EditAliasesModal","showEditAliasesModal","useEditRegisteredModelAliasesModal","model","rowSelection","setRowSelection","useState","pagination","setPagination","pageSize","pageIndex","useEffect","selectedVersions","_ref5","selectedVersionNumbers","_ref6","tableColumns","columns","STATUS","enableSorting","header","meta","flexBasis","general","heightSm","flexGrow","cell","_ref7","row","original","status","status_message","LegacyTooltip","title","modelVersionStatusIconTooltips","Typography","Text","ModelVersionStatusIcons","VERSION","formatMessage","className","accessorKey","_ref8","getValue","values","link","chunks","Link","to","ModelRegistryRoutes","getModelVersionPageRoute","String","versionNumber","CREATION_TIMESTAMP","minWidth","_ref9","Utils","formatTimestamp","USER_ID","_ref10","TAGS","flex","_ref11","ALIASES","multiline","_ref12","mvAliases","STAGE","_ref13","StageTagComponents","DESCRIPTION","_ref14","truncateToFirstLineWithMaxLength","sorting","setSorting","desc","table","useReactTable","data","state","getCoreRowModel","getSortedRowModel","getPaginationRowModel","getRowId","_ref15","onRowSelectionChange","onSortingChange","paginationComponent","Pagination","currentPageIndex","numTotal","page","emptyComponent","Empty","description","target","href","RegisteringModelDocUrl","image","PlusIcon","Table","scrollable","empty","getRowModel","rows","undefined","someRowsSelected","getIsSomeRowsSelected","getIsAllRowsSelected","TableRow","isHeader","TableRowSelectCell","checked","indeterminate","getToggleAllRowsSelectedHandler","getLeafHeaders","_meta","TableHeader","sortable","column","getCanSort","sortDirection","getIsSorted","onToggleSort","getToggleSortingHandler","columnDef","flexRender","getContext","getIsSelected","getToggleSelectedHandler","getAllCells","_meta2","_meta3","_meta4","TableCell","StageFilters","ModelViewImpl","React","constructor","props","super","stageFilter","showDescriptionEditor","isDeleteModalVisible","isDeleteModalConfirmLoading","runsSelected","isTagsRequestPending","updatingEmailPreferences","formRef","handleStageFilterChange","e","this","setState","handleCancelEditDescription","handleSubmitEditDescription","handleEditDescription","then","startEditingDescription","stopPropagation","showDeleteModal","hideDeleteModal","showConfirmLoading","hideConfirmLoading","handleDeleteConfirm","navigate","handleDelete","modelListPageRoute","catch","logErrorAndNotifyUser","handleAddTag","form","current","setRegisteredModelTagApi","resetFields","ex","console","error","message","getUserVisibleError","handleSaveEdit","handleDeleteTag","deleteRegisteredModelTagApi","selectedRowKeys","selectedRows","newState","Object","assign","run_id","renderDetails","compareDisabled","keys","wrapper","Descriptions","Item","label","creation_timestamp","last_updated_timestamp","user_id","CollapsibleSection","collapsiblePanel","renderDescriptionEditIcon","forceOpen","defaultCollapsed","EditableNote","defaultMarkdown","onSubmit","onCancel","showEditor","getVisibleTagValues","EditableTagsTableView","innerRef","isRequestPending","versionsTabButtons","SegmentedControlGroup","SegmentedControlButton","getActiveVersionsCount","disabled","onCompare","shouldShowModelsNextUI","ModelsNextUIToggleSwitch","DangerModal","visible","confirmLoading","onOk","okText","cancelText","bind","componentDidMount","pageTitle","updatePageTitle","v","getOverflowMenuItems","itemName","getCompareModelVersionsPageRoute","editButton","renderMainPanel","render","breadcrumbs","PageHeader","OverflowMenu","menu","mapDispatchToProps","emailNotificationPreferenceDropdown","width","marginBottom","md","emailNotificationPreferenceTip","paddingLeft","sm","paddingRight","height","buttonHeight","marginLeft","ModelView","connect","mapStateToProps","ownProps","getRegisteredModelTags","withNextModelsUIContext","injectIntl","ModelPageImpl","arguments","hasUnfilledRequests","pollIntervalId","initSearchModelVersionsApiRequestId","getUUID","initgetRegisteredModelApiRequestId","updateRegisteredModelApiId","deleteRegisteredModelApiId","criticalInitialRequestIds","updateRegisteredModelApi","loadData","deleteRegisteredModelApi","isInitialLoading","promiseValues","getRegisteredModelApi","searchModelVersionsApi","Promise","all","pollData","isBrowserTabVisible","ErrorWrapper","getErrorCode","resolve","setInterval","POLL_INTERVAL","componentWillUnmount","clearInterval","PageContainer","RequestStateWrapper","requestIds","loading","hasError","requests","shouldRender404","ErrorView","statusCode","subMessage","fallbackHomePageReactRoute","permissionDeniedErrors","request","_request$error","ErrorCodes","PERMISSION_DENIED","_permissionDeniedErro","errorMsg","getMessageField","triggerError","Spinner","ModelPageWithRouter","withRouterNext","decodeURIComponent","params","entities","modelByName","getModelVersions","ModelPage","withErrorBoundary","ErrorUtils","mlflowServices","MODEL_REGISTRY"],"sourceRoot":""}