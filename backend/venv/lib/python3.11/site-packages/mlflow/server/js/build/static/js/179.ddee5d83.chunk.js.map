{"version":3,"file":"static/js/179.ddee5d83.chunk.js","mappings":";qNAGA,MAaaA,EAASC,IAAqC,IAApC,KAAEC,EAAI,QAAEC,GAAsBF,EACnD,MAAMG,EAbEC,EAAAA,WAAiBC,EAAAA,IAAkCC,UAAUH,MA2BrE,OAZAC,EAAAA,WAAgB,KACd,IAAKH,EAAM,OAQX,OANqB,OAALE,QAAK,IAALA,OAAK,EAALA,GAAQ,IAEfI,OAAOC,QAAQN,IAIV,GACb,CAACA,EAASC,EAAOF,IAEb,IAAI,6DCAN,MAAMQ,UAAyBC,EAAAA,UAAwDC,WAAAA,GAAA,SAAAC,WAAA,KAmB5FC,MAAQ,CACNC,SAAUC,KAAKC,MAAMC,gBACrBC,YAAaH,KAAKC,MAAMG,mBACxBC,MAAO,MACP,KAEFC,WAAYC,EAAAA,EAAAA,MAAuB,KAEnCC,qBAAwBT,IACtBC,KAAKS,SAAS,CAAEV,YAAW,EAC3B,KAEFW,gBAAmBP,IACjBH,KAAKS,SAAS,CAAEN,eAAc,EAC9B,KAEFQ,kBAAoB,KAClB,MAAM,SAAEC,GAAaZ,KAAKC,OACpB,SAAEF,GAAaC,KAAKF,MAE1B,OADAE,KAAKS,SAAS,CAAEI,gBAAgB,IAC5BD,EACKE,QAAQC,QAAQH,EAASb,IAC7BiB,MAAK,KACJhB,KAAKS,SAAS,CAAEI,gBAAgB,EAAOR,MAAO,MAAO,IAEtDY,OAAOC,IACNlB,KAAKS,SAAS,CACZI,gBAAgB,EAChBR,MACEa,GAAKA,EAAEC,gBACHD,EAAEC,kBACFnB,KAAKC,MAAMmB,KAAKC,cAAc,CAAAC,GAAA,SAC5BC,eAAe,sBAGvB,IAGD,IAAI,EACX,KAEFC,kBAAoB,KAElBxB,KAAKS,SAAS,CACZV,SAAUC,KAAKC,MAAMC,gBACrBC,YAAaH,KAAKC,MAAMG,qBAE1B,MAAM,SAAEqB,GAAazB,KAAKC,MACtBwB,GACFA,GACF,CACA,CAEFC,iBAAAA,GACE,OAAO1B,KAAKF,MAAMC,WAAaC,KAAKC,MAAMC,eAC5C,CAEAyB,aAAAA,GAEE,MAAM,eAAEd,GAAmBb,KAAKF,MAChC,OACE8B,EAAAA,EAAAA,GAAA,OAAKC,UAAU,wBAAwB,cAAY,wBAAuBC,UACxEC,EAAAA,EAAAA,IAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,gEACZC,KAAK,UACLL,UAAU,4BACVM,QAASnC,KAAKW,kBACdyB,UAAWpC,KAAK0B,qBAAuBb,EACvCwB,QAASxB,EACT,cAAY,4BAA2BiB,SAEtC9B,KAAKC,MAAMqC,YAEdV,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,gEACZM,SAAS,SACTV,UAAU,8BACVM,QAASnC,KAAKwB,kBACdY,SAAUvB,EAAeiB,UAEzBF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,iBAO3B,CAEAkB,uBAAAA,GACE,MAAM,SAAE1C,GAAaC,KAAKF,MAC1B,GAAIC,EAAU,CACZ,MAAM2C,GAAYC,EAAAA,EAAAA,IAAsB3C,KAAKM,UAAUsC,SAAS7C,IAChE,OAAO8C,EAAAA,EAAAA,IAAqBH,EAC9B,CACA,OAAO,IACT,CAEAI,MAAAA,GACE,MAAM,WAAEC,GAAe/C,KAAKC,OACtB,SAAEF,EAAQ,YAAEI,EAAW,MAAEE,GAAUL,KAAKF,MACxCkD,EAAchD,KAAKyC,0BACzB,OACEb,EAAAA,EAAAA,GAAA,OAAKC,UAAU,4BAA4B,cAAY,4BAA2BC,SAC/EiB,GACChB,EAAAA,EAAAA,IAAC1C,EAAAA,SAAc,CAAAyC,SAAA,EACbF,EAAAA,EAAAA,GAAA,OAAKC,UAAU,sBAAqBC,UAClCF,EAAAA,EAAAA,GAACqB,EAAAA,QAAQ,CACPC,MAAOnD,EACPoD,gBAAiBnD,KAAKC,MAAMkD,gBAC5BC,gBAAiBpD,KAAKC,MAAMmD,gBAC5BC,iBAAkB,GAClBC,WAAYtD,KAAKC,MAAMqD,WACvBC,gBAAiBvD,KAAKC,MAAMsD,gBAC5BC,SAAUxD,KAAKQ,qBAEfL,YAAaA,EACbsD,YAAazD,KAAKU,gBAElBgD,wBAA0BC,GAAO7C,QAAQC,QAAQf,KAAKyC,wBAAwBkB,IAC9EC,QAAUC,IAASjC,EAAAA,EAAAA,GAACkC,EAAW,CAACD,KAAMA,QAGzCxD,IACCuB,EAAAA,EAAAA,GAACmC,EAAAA,IAAK,CACJ9B,YAAY,gEACZC,KAAK,QACL/C,QAASa,KAAKC,MAAMmB,KAAKC,cAAc,CAAAC,GAAA,SACrCC,eAAe,6CAGjByC,YAAa3D,EACb4D,UAAQ,IAGXjE,KAAK2B,iBACNC,EAAAA,EAAAA,GAAC5C,EAAM,CACLE,KAAMc,KAAK0B,oBACXvC,QAASa,KAAKC,MAAMmB,KAAKC,cAAc,CAAAC,GAAA,SACrCC,eAAe,0FAMrBK,EAAAA,EAAAA,GAACsC,EAAe,CAACC,QAASnB,KAIlC,EAOF,SAASc,EAAY7D,GACnB,MAAM,MAAEmE,IAAUC,EAAAA,EAAAA,MACZ,KAAER,GAAS5D,EACjB,OAEE2B,EAAAA,EAAAA,GAAC0C,EAAAA,IAAa,CAACC,SAAS,MAAMC,MAAOX,EAAK/B,UACxCF,EAAAA,EAAAA,GAAA,QAAM6C,KAAGC,EAAAA,EAAAA,IAAE,CAAEC,MAAOP,EAAMQ,OAAOC,aAAa,IAAC/C,UAE7CF,EAAAA,EAAAA,GAACkD,EAAAA,QAAO,CAACC,KAAMlB,OAIvB,CAMA,SAASK,EAAgBjE,GACvB,MAAM,QAAEkE,GAAYlE,EACpB,OAAOkE,GACLvC,EAAAA,EAAAA,GAAA,OAAKC,UAAU,4BAA4B,cAAY,4BAA2BC,UAChFF,EAAAA,EAAAA,GAAA,OAAKC,UAAU,sBAAqBC,UAClCF,EAAAA,EAAAA,GAAA,OAAKC,UAAU,wCAAuCC,UACpDF,EAAAA,EAAAA,GAAA,OACEC,UAAU,8BACV,cAAY,8BAGZmD,wBAAyB,CAAEC,OAAQhF,EAAMkE,kBAMjDvC,EAAAA,EAAAA,GAAA,OAAAE,UACEF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SAACC,eAAe,UAGvC,CAxNa7B,EACJwF,aAAe,CACpBhF,gBAAiB,GACjBE,mBAAoB,QACpB2C,YAAY,EACZT,UACEV,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SAACC,eAAe,SAEnCV,gBAAgB,EAChB0C,gBAAiB,CACf,CAAC,SAAU,OAAQ,SAAU,iBAC7B,CAAC,OAAQ,QAAS,OAAQ,SAC1B,CAAC,iBAAkB,eAAgB,iBAErCH,gBAAiB,IACjBD,gBAAiB,IACjBG,WAAY,CAAC,GA0MV,MAAM6B,GAAeC,EAAAA,EAAAA,IAAW1F,uJCvPvC,MAAM,UAAE2F,GAAcC,EAAAA,EAC4D,IAAArG,EAAA,CAAA4E,KAAA,QAAA0B,OAAA,gBAAAC,EAAA,CAAA3B,KAAA,UAAA0B,OAAA,eAS3E,MAAME,EAA2BpG,EAAAA,MAAYY,IAClD,MAAM,MAAEmE,IAAUC,EAAAA,EAAAA,KAElB,OACEzC,EAAAA,EAAAA,GAAC8D,EAAAA,EAAK,CACJzD,YAAY,2EACZuC,MAAO,QAAUvE,EAAM0F,OACvBC,QAAS3F,EAAM4F,kCACfpE,SAAUA,IAAMxB,EAAM6F,sCAAqC,GAAOhE,UAElEC,EAAAA,EAAAA,IAAA,OAAK0C,IAAGxF,EAAsB6C,SAAA,EAC5BF,EAAAA,EAAAA,GAACyD,EAAS,CAACZ,IAAGe,EAAkB1D,UAC9BF,EAAAA,EAAAA,GAAA,OACE6C,KAAGC,EAAAA,EAAAA,IAAE,CACHqB,gBAAiB3B,EAAMQ,OAAOoB,kBAC9BC,UAAW7B,EAAM8B,QAAQC,GACzBC,WAAY,WACZC,UAAW,aACZ,IAACvE,SAED7B,EAAMqG,cAGX1E,EAAAA,EAAAA,GAAA,OACE6C,KAAGC,EAAAA,EAAAA,IAAE,CACHuB,UAAW7B,EAAM8B,QAAQC,IAC1B,IAACrE,UAEFF,EAAAA,EAAAA,GAAC2E,EAAAA,EAAU,CAACC,SAAUvG,EAAMqG,SAAUG,WAAW,EAAO1B,MAAMnD,EAAAA,EAAAA,GAAC8E,EAAAA,IAAQ,IAAK,aAAW,eAGrF,IC/BCC,EAA2B,GAExC,SAASC,IACP,QADwC/G,UAAAgH,OAAA,QAAAC,IAAAjH,UAAA,KAAAA,UAAA,GAEpC,CACEkH,SAAU,SACVC,aAAc,WACdC,SAAU,SACVb,WAAY,UAEd,CAAEA,WAAY,SACpB,CAKO,MAAMc,EAAcjI,IAgBpB,IAhBqB,WAC1BkI,GAAa,EAAK,QAClBC,EAAO,IACPC,EAAG,oBACHC,GAAsB,EAAK,UAC3BC,EAAYZ,EAAwB,SACpCa,EAAW,IAAG,UACd3F,GASD5C,EACC,MAAMmC,GAAOqG,EAAAA,EAAAA,MAEN5B,EAAmCC,IAAwC4B,EAAAA,EAAAA,WAAS,IAErF,kBAAEC,EAAiB,oBAAEC,GA+CtB,SACLP,GAE+D,IAD/DE,EAAS1H,UAAAgH,OAAA,QAAAC,IAAAjH,UAAA,GAAAA,UAAA,GAAG8G,EAEZ,MAAM,IAAEkB,EAAG,MAAE3E,GAAUmE,EACjBS,EAAaD,EAAIhB,OAAS3D,EAAM2D,OAChCkB,EAAcF,EAAIhB,OAAS3D,EAAM2D,OACjCmB,EAAgBD,EAAc7E,EAAM2D,OAASgB,EAAIhB,OAGvD,OAAIiB,GAAcP,EAAkB,CAAEI,mBAAmB,EAAOC,qBAAqB,GAEjFI,EAAgBT,EAAY,EAAU,CAAEI,mBAAmB,EAAMC,qBAAqB,GAGnF,CACLD,kBAAmBI,EACnBH,qBAAsBG,EAE1B,CAlEqDE,CAAgCZ,EAAKE,GAClFW,EAAqBZ,IAAwBK,GAAqBC,GAElEO,EAAqB/G,EAAKC,cAAc,CAAAC,GAAA,SAC5CC,eAAe,sBAIjB,OACEQ,EAAAA,EAAAA,IAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,GAACwG,EAAAA,IAAG,CACFnG,YAAY,8DACZgC,SAAUkD,EACVC,QAASA,EACT5C,MAAO6C,EAAIQ,IACXhG,UAAWA,EAAUC,UAErBF,EAAAA,EAAAA,GAAC0C,EAAAA,IAAa,CAACE,MAAO0D,EAAqBC,EAAqB,GAAGrG,UACjEC,EAAAA,EAAAA,IAAA,QACE0C,KAAGC,EAAAA,EAAAA,IAAE,CAAE8C,WAAUa,QAAS,eAAe,IACzClG,QAASA,IAAO+F,EAAqBpC,GAAqC,QAAQgB,EAAWhF,SAAA,EAE7FF,EAAAA,EAAAA,GAAC0D,EAAAA,EAAWgD,KAAI,CAACC,MAAI,EAAC/D,MAAO6C,EAAIQ,IAAKpD,IAAKmC,EAAmBe,GAAmB7F,SAC9EuF,EAAIQ,MAENR,EAAInE,QACHnB,EAAAA,EAAAA,IAACuD,EAAAA,EAAWgD,KAAI,CAAC9D,MAAO6C,EAAInE,MAAOuB,IAAKmC,EAAmBgB,GAAqB9F,SAAA,CAAC,KAC5EuF,EAAInE,iBAMjBtB,EAAAA,EAAAA,GAAA,OAAAE,SACG+D,IACCjE,EAAAA,EAAAA,GAAC6D,EAAwB,CACvBE,OAAQ0B,EAAIQ,IACZvB,SAAUe,EAAInE,MACd2C,kCAAmCA,EACnCC,qCAAsCA,QAIxC,0KCvF8F,IAAA7G,EAAA,CAAA4E,KAAA,SAAA0B,OAAA,iBAyExG,SAASiD,EAAgBC,GACvB,OAAQC,GA/DV,SAAsBA,EAA0BD,GAC9C,MAAMrH,GAAOqG,EAAAA,EAAAA,MACP,MAAErD,IAAUC,EAAAA,EAAAA,KACZsE,EAAcD,EAAKzI,MAAM0I,YAAYC,cAwD3C,OAtDqBC,EAAAA,EAAAA,UAAQ,KAC3B,IAAKF,EAAa,OAAOD,EAGzB,IADsBI,EAAAA,EAAAA,eAAcL,EAAkBE,IAAgB,EACnD,OAAOD,EAE1B,MAAMK,EAAgB,kBAAkBC,KAAKL,GAG7C,OAAOtJ,EAAAA,aAAmBqJ,EAAM,CAC9BO,eAAgB,CACd,CACEC,KAAM,CACJhG,MAAOyF,EACPvG,UAAW2G,EACXI,MAAO,CACLxE,MAAOoE,EAAgB3E,EAAMQ,OAAOwE,0BAA4BhF,EAAMQ,OAAOyE,oBAE/EvH,UACEF,EAAAA,EAAAA,GAAC0C,EAAAA,IAAa,CACZE,MACEuE,OACIjC,EACA1F,EAAKC,cAAc,CAAAC,GAAA,SACjBC,eAAe,iDAKvB+H,UAAU,QAAOxH,UAEjBC,EAAAA,EAAAA,IAAA,QAAM0C,IAAGxF,EAAuB6C,SAAA,EAC9BF,EAAAA,EAAAA,GAAC2H,EAAAA,IAAQ,CAAC9E,KAAGC,EAAAA,EAAAA,IAAE,CAAE8E,YAAapF,EAAM8B,QAAQC,IAAI,MAC/C/E,EAAKC,cACJ,CAAAC,GAAA,SACEC,eAAe,sBAGjB,CACEoE,OAAQgD,UAOpBd,IAAKc,EACLc,aAAa,MAEZf,EAAKzI,MAAMgJ,iBAEhB,GACD,CAACR,EAAkBC,EAAMC,EAAavH,EAAMgD,GAGjD,CAGuCsF,CAAahB,EAAMD,EAC1D,CAEA,IAAAkB,EAAA,CAAA9F,KAAA,UAAA0B,OAAA,cAGO,SAASqE,EAAoBpE,GAQhC,IARiC,iBACnCiD,EAAgB,QAChBoB,EAAO,oBACPC,GAKDtE,EACC,MAAMpE,GAAOqG,EAAAA,EAAAA,MACNsC,EAAQC,IAAatC,EAAAA,EAAAA,WAAS,GAC/BuC,GAAYC,EAAAA,EAAAA,QAAgD,OAE5D,MAAEC,EAAK,WAAEC,IAAeC,EAAAA,EAAAA,IAAc,CAC1CR,QAASA,EACThG,KAAM,MACNyG,MAAO,CACLC,SAAU,CACRpL,QAASiC,EAAKC,cAAc,CAAAC,GAAA,SAC1BC,eAAe,0BAGjB2B,OAAO,MAmBb,OACEtB,EAAAA,EAAAA,GAAC4I,EAAAA,IAAY,CACXC,YAAU,EACVC,IAAKT,EACLU,wBAAyB,CACvBC,YAAY,EACZC,eAAgBrC,EAAgBC,IAElChE,IAAGkF,EACHmB,YAAa1J,EAAKC,cAAc,CAAAC,GAAA,SAC9BC,eAAe,eAGjB2B,MAAOiH,EAAMjH,MACb6H,aAAcZ,EAAMjH,MACpB8H,KAAMjB,EACNkB,wBA9BiCrF,IACnCoE,EAAUpE,EAAQ,EA8BhBsF,aAAcA,CAACC,EAAOC,IAAiB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQlI,MAAM0F,cAAcyC,SAASF,EAAMvC,eAC5E0C,SAvBkBzD,IACpBsC,EAAM3G,SAASqE,GACI,OAAnBiC,QAAmB,IAAnBA,GAAAA,EAAsBjC,EAAI,EAsBxB0D,QA7BgBC,KAClBrB,EAAM3G,cAASsD,GACI,OAAnBgD,QAAmB,IAAnBA,GAAAA,OAAsBhD,EAAU,EA4B9B2E,gBAAiBrB,EAAW/J,MAAQ,aAAUyG,EAAUhF,SAEvD2G,EAAiBiD,KAAKrE,IACrBzF,EAAAA,EAAAA,GAAC4I,EAAAA,IAAamB,OAAM,CAACzI,MAAOmE,EAAIvF,SAC7BuF,GADmCA,MAM9C,2BCpIA,SAASuE,EAAWC,GAClB,OAAO,IAAIC,IAAID,EAAKH,KAAKrE,GAAQ,CAACA,EAAIQ,IAAKR,KAC7C,CAEA,IAAAsC,EAAA,CAAA9F,KAAA,SAAA0B,OAAA,UAAAwG,EAAA,CAAAlI,KAAA,SAAA0B,OAAA,UAGO,MAAMyG,EAA2B/M,IAUjC,IAVyE,UAC9EgN,EAAS,gBACTC,EAAe,iBACfzD,EAAgB,cAChB0D,GAAgB,GAMjBlN,EACC,MAAMmN,GAAkBlC,EAAAA,EAAAA,WACjBmC,EAAcC,IAAmB5E,EAAAA,EAAAA,UAAiB,KACnD,MAAEtD,IAAUC,EAAAA,EAAAA,MAEXkI,EAAaC,IAAkB9E,EAAAA,EAAAA,UAAsC,IAAIoE,MACzEW,EAAWC,IAAgBhF,EAAAA,EAAAA,UAAsC,IAAIoE,MAErEa,EAAWC,IAAgBlF,EAAAA,EAAAA,WAAS,GAErCmF,GAAOC,EAAAA,EAAAA,IAAwB,CACnCC,cAAe,CACblF,SAAKf,EACL5D,MAAO,MAIL8J,EAAYA,IAAMJ,GAAa,GAK/BK,GAAoBC,EAAAA,EAAAA,cACvBC,IACCf,EAAgBgB,QAAUD,EAC1BX,EAAeZ,EAAWuB,EAAatB,MAAQ,KAC/Ca,EAAad,EAAWuB,EAAatB,MAAQ,KAC7CgB,EAAKQ,QAELT,GAAa,EAAK,GAEpB,CAACC,IAGGS,EAAWC,UACVnB,EAAgBgB,UAGrBd,EAAgB,IAChBkB,GAAa,GACbtB,EAAgBE,EAAgBgB,QAASK,MAAMC,KAAKnB,EAAYoB,UAAWF,MAAMC,KAAKjB,EAAUkB,WAC7F3M,MAAK,KACJgM,IACS,OAATf,QAAS,IAATA,GAAAA,IACAuB,GAAa,EAAM,IAEpBvM,OAAOC,IAA6B,IAAD0M,EAClCJ,GAAa,GACblB,EAAgBpL,aAAa2M,EAAAA,EAAsC,QAA1BD,EAAG1M,EAAE4M,6BAAqB,IAAAF,OAAA,EAAvBA,EAAyBzO,QAAU+B,EAAE/B,QAAQ,IACzF,EAGAiC,GAAOqG,EAAAA,EAAAA,KACPsG,EAAalB,EAAKmB,SAEjBC,EAAWT,IAAgB9F,EAAAA,EAAAA,WAAS,GAErCwG,GAAerF,EAAAA,EAAAA,UACnB,MAAOsF,EAAAA,EAAAA,UAAQC,EAAAA,EAAAA,QAAOX,MAAMC,KAAKnB,EAAYoB,UAAW,QAAQS,EAAAA,EAAAA,QAAOX,MAAMC,KAAKjB,EAAUkB,UAAW,SACvG,CAACpB,EAAaE,IAEV4B,EAAUN,EAAWlG,KAAOkG,EAAW7K,MACvCoL,EAAqBJ,GAAgBG,EAiL3C,MAAO,CAAEE,eAjJPxM,EAAAA,EAAAA,IAAC2D,EAAAA,EAAK,CACJzD,YAAY,uEACZuM,gBAAc,EACd5I,QAAS+G,EACTnI,OACE5C,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,kBAInBE,SAAUuL,EACVyB,QACE1M,EAAAA,EAAAA,IAAC2M,EAAAA,EAA2B,CAAA5M,SAAA,EAC1BF,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,uEACZ0M,gCAA8B,EAC9BxM,QAAS6K,EAKTvI,KAAGC,EAAAA,EAAAA,IAAE,CAAE8E,YAAc0E,EAAkC,EAAnB9J,EAAM8B,QAAQC,IAAQ,IAACrE,SAE1DV,EAAKC,cAAc,CAAAC,GAAA,SAClBC,eAAe,aAIlB+M,GACC1M,EAAAA,EAAAA,GAACgN,EAAwB,CAACb,WAAYA,EAAYE,UAAWA,EAAWY,WAAYvB,KAEpF1L,EAAAA,EAAAA,GAAC0C,EAAAA,IAAa,CACZE,MACG0J,OAKGpH,EAJA1F,EAAKC,cAAc,CAAAC,GAAA,SACjBC,eAAe,wDAItBO,UAEDF,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,uEACZ0M,gCAA8B,EAC9BvM,UAAW8L,EACX7L,QAAS4L,EACT/L,KAAK,UACLC,QAASmL,EAASxL,SAEjBV,EAAKC,cAAc,CAAAC,GAAA,SAClBC,eAAe,qBAO1BO,SAAA,EAEDC,EAAAA,EAAAA,IAAA,QACEnB,SAAUiM,EAAKiC,cA3EJlO,KAEf,GAAIuL,IAAkB4B,EAAW7K,MAAM6L,OACrC,OAIF,MAAMC,EAAa,IAAIlD,IAAIW,GAC3BuC,EAAWC,IAAIlB,EAAWlG,IAAKkG,GAE/BrB,EAAasC,GACbnC,EAAKQ,OAAO,IAiER5I,KAAGC,EAAAA,EAAAA,IAAE,CAAE2D,QAAS,OAAQ6G,WAAY,WAAYC,IAAK/K,EAAM8B,QAAQvC,IAAI,IAAC7B,SAAA,EAExEC,EAAAA,EAAAA,IAAA,OAAK0C,KAAGC,EAAAA,EAAAA,IAAE,CAAE0K,SAAU,EAAG/G,QAAS,OAAQ8G,IAAK/K,EAAM8B,QAAQvC,GAAI0L,KAAM,GAAG,IAACvN,SAAA,EACzEC,EAAAA,EAAAA,IAAA,OAAK0C,IAAGkF,EAAc7H,SAAA,EACpBF,EAAAA,EAAAA,GAAC0N,EAAAA,IAAOC,MAAK,CAACC,QAAQ,MAAK1N,SACxBV,EAAKC,cAAc,CAAAC,GAAA,SAClBC,eAAe,WAInBK,EAAAA,EAAAA,GAACgI,EAAoB,CACnBnB,iBAAkBA,GAAoB,GACtCoB,QAASgD,EAAKhD,QACdC,oBAxGiBjC,IAA6B,IAAD4H,EACvD,MAAMpI,EAAMQ,EAAM4E,EAAUiD,IAAI7H,QAAOf,EAIvC+F,EAAK8C,SAAS,QAAmB,QAAZF,EAAK,OAAHpI,QAAG,IAAHA,OAAG,EAAHA,EAAKnE,aAAK,IAAAuM,EAAAA,EAAI,GAAG,QAsGlC1N,EAAAA,EAAAA,IAAA,OAAK0C,IAAGsH,EAAcjK,SAAA,EACpBF,EAAAA,EAAAA,GAAC0N,EAAAA,IAAOC,MAAK,CAACC,QAAQ,QAAO1N,SAC1BqK,EACG/K,EAAKC,cAAc,CAAAC,GAAA,SACjBC,eAAe,UAGjBH,EAAKC,cAAc,CAAAC,GAAA,SACjBC,eAAe,wBAIvBK,EAAAA,EAAAA,GAACgO,EAAAA,IAAwBC,MAAK,CAC5B5N,YAAY,uEACZ4B,KAAK,QACLgG,QAASgD,EAAKhD,QACd,aACEsC,EACI/K,EAAKC,cAAc,CAAAC,GAAA,SACjBC,eAAe,UAGjBH,EAAKC,cAAc,CAAAC,GAAA,SACjBC,eAAe,qBAIvBuJ,YAAa1J,EAAKC,cAAc,CAAAC,GAAA,SAC9BC,eAAe,0BAMvBK,EAAAA,EAAAA,GAAC0C,EAAAA,IAAa,CACZE,MAAOpD,EAAKC,cAAc,CAAAC,GAAA,SACxBC,eAAe,YAEdO,UAEHF,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,uEACZM,SAAS,SACT,aAAYnB,EAAKC,cAAc,CAAAC,GAAA,SAC7BC,eAAe,YAEdO,UAEHF,EAAAA,EAAAA,GAAC2H,EAAAA,IAAQ,WAId8C,IAAgBzK,EAAAA,EAAAA,GAAC0N,EAAAA,IAAOQ,QAAO,CAAC5N,KAAK,QAAQ/C,QAASkN,KACvDzK,EAAAA,EAAAA,GAAA,OACE6C,KAAGC,EAAAA,EAAAA,IAAE,CACH2D,QAAS,OACT0H,OAAQ3L,EAAM8B,QAAQ8J,GACtBC,SAAU,OACVhK,UAAW7B,EAAM8B,QAAQC,IAC1B,IAACrE,SAED2L,MAAMC,KAAKjB,EAAUkB,UAAUjC,KAAKrE,IACnCzF,EAAAA,EAAAA,GAACsF,EAAAA,GAAW,CAACC,YAAU,EAACE,IAAKA,EAAKD,QAASA,IAjK3B5B,KAA8B,IAA7B,IAAEqC,GAAqBrC,EAC9CkH,GAAcwD,IACZA,EAAiBC,OAAOtI,GACjB,IAAIiE,IAAIoE,KACf,EA6JqDE,CAAgB/I,IAAWA,EAAIQ,YAMhEoF,oBAAmBgB,YAAW,EACtD,IAAAoC,EAAA,CAAAxM,KAAA,SAAA0B,OAAA,mBAEF,SAASqJ,EAAwB0B,GAQ7B,IAR8B,UAChCrC,EAAS,WACTF,EAAU,WACVc,GAKDyB,EACC,MAAMlP,GAAOqG,EAAAA,EAAAA,MACP,MAAErD,IAAUC,EAAAA,EAAAA,KAIZkM,EAAiB,GAFD,IAAGC,EAAAA,EAAAA,UAASzC,EAAWlG,IAAK,CAAEhB,OAAQ,MAAS,QAC7CkH,EAAW7K,MAAQ,KAAIsN,EAAAA,EAAAA,UAASzC,EAAW7K,MAAO,CAAE2D,OAAQ,OAAU,KAGxF4J,EAAYrP,EAAKC,cACrB,CAAAC,GAAA,SACEC,eAAe,kEAGjB,CACE8F,IAAKkJ,IAGT,OACExO,EAAAA,EAAAA,IAAC2O,EAAAA,GAAQC,KAAI,CAAC1O,YAAY,uEAAsEH,SAAA,EAC9FF,EAAAA,EAAAA,GAAC8O,EAAAA,GAAQE,QAAO,CAACC,SAAO,EAAA/O,UACtBF,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,uEACZ0M,gCAA8B,EAC9BtM,QAAS4L,EACT/L,KAAK,UAASJ,SAEbV,EAAKC,cAAc,CAAAC,GAAA,SAClBC,eAAe,mBAKrBQ,EAAAA,EAAAA,IAAC2O,EAAAA,GAAQI,QAAO,CAACC,MAAM,MAAM,aAAYN,EAAU3O,SAAA,EACjDF,EAAAA,EAAAA,GAAC0D,EAAAA,EAAWD,UAAS,CAACZ,IAAG4L,EAAoBvO,SAAE2O,KAC/C7O,EAAAA,EAAAA,GAAC8O,EAAAA,GAAQM,MAAK,CAACH,SAAO,EAAA/O,UACpBF,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,uEACZE,QAAS0M,EAAW/M,SAEnBV,EAAKC,cAAc,CAAAC,GAAA,SAClBC,eAAe,6BAKrBK,EAAAA,EAAAA,GAAC8O,EAAAA,GAAQM,MAAK,CAACH,SAAO,EAAA/O,UACpBF,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,uEACZC,KAAK,UACLuC,KAAGC,EAAAA,EAAAA,IAAE,CAAEuM,WAAY7M,EAAM8B,QAAQC,IAAI,IAACrE,SAErCV,EAAKC,cAAc,CAAAC,GAAA,SAClBC,eAAe,gBAKrBK,EAAAA,EAAAA,GAAC8O,EAAAA,GAAQQ,MAAK,SAItB,yYClRO,MAAMC,UAA0B9R,EAAAA,UAcrCO,WAAAA,GAEEwR,QAAQ,KAfVvE,UAAI,OAEJ/M,MAAQ,CACN8F,SAAS,EACT/E,gBAAgB,EAChBwQ,YAAa,CAAC,GACd,KAEFC,gCAAiCC,EAAAA,EAAAA,MAAU,KAE3CC,6BAA8BD,EAAAA,EAAAA,MAAU,KAExCE,6BAA8BF,EAAAA,EAAAA,MAAU,KAOxCG,kBAAoB,KAClB1R,KAAKS,SAAS,CAAEmF,SAAS,GAAO,EAChC,KAEF+L,kBAAoB,KAAO,IAADC,EAAAC,EACxB7R,KAAKS,SAAS,CAAEmF,SAAS,IACF,QAAvBgM,GAAAC,EAAA7R,KAAKC,OAAM6R,oBAAY,IAAAF,GAAvBA,EAAAG,KAAAF,EAA2B,EAC3B,KAEFG,uBAAyB,KAAO,IAADC,EAAAC,EAAAC,EAC7BnS,KAAKS,SAAS,CAAEmF,SAAS,EAAO/E,gBAAgB,IAC/B,QAAjBoR,EAAAjS,KAAK6M,KAAKO,eAAO,IAAA6E,GAAjBA,EAAmBG,cACI,QAAvBF,GAAAC,EAAAnS,KAAKC,OAAM6R,oBAAY,IAAAI,GAAvBA,EAAAH,KAAAI,EAA2B,EAC3B,KAEFE,0BAA6BnR,IAC3BlB,KAAKS,SAAS,CAAEI,gBAAgB,IAChCyR,EAAAA,EAAMC,sBAAsBrR,EAAE,EAC9B,KAEFsR,6BAAgCrH,IAC9BnL,KAAKC,MAAMwS,2BAA0BC,EAAAA,EAAAA,IAAmBvH,GA1FvB,EA0F4D,EAC7F,KAEFwH,iCAAmC,KACjC,MAAM,QAAEC,GAAY5S,KAAKC,MACzB,OAAOD,KAAKC,MAAM4S,uBAAuB,CAAEC,OAAQF,GAAW5S,KAAKyR,4BAA4B,EAC/F,KAEFsB,oBAAsB,IACb/S,KAAK6M,KAAKO,QAAQ4F,iBAAiBhS,MAAM2M,IAC9C3N,KAAKS,SAAS,CAAEI,gBAAgB,IAChC,MAAM,QAAE+R,EAAO,UAAEK,GAAcjT,KAAKC,MAC9BiT,EAAoBvF,EAAOwF,EAAAA,IACyB,IAADC,EAAAC,EAoBlDC,EAAAC,EApBP,OAAIL,IAAsBM,EAAAA,GAIjBxT,KAAKC,MACTwT,yBAAyB9F,EAAO+F,EAAAA,IAAmB1T,KAAKsR,gCACxDtQ,MAAK,IACJhB,KAAKC,MAAM0T,sBACThG,EAAO+F,EAAAA,IACPT,EACAL,EACA,GACA5S,KAAKwR,+BAGRxQ,KAAiC,QAA7BoS,EAACpT,KAAKC,MAAM2T,yBAAiB,IAAAR,EAAAA,EAAIS,EAAAA,UACrC7S,KAAKhB,KAAKgS,wBACV/Q,MAAkC,QAA7BoS,EAACrT,KAAKC,MAAM6T,yBAAiB,IAAAT,EAAAA,EAAIrT,KAAKqS,2BAC3CrR,KAAKhB,KAAK2S,kCACV1R,MAAMqR,EAAAA,EAAMC,uBAERvS,KAAKC,MACT0T,sBAAsBT,EAAmBD,EAAWL,EAAS,GAAI5S,KAAKwR,6BACtExQ,KAAiC,QAA7BsS,EAACtT,KAAKC,MAAM2T,yBAAiB,IAAAN,EAAAA,EAAIO,EAAAA,UACrC7S,KAAKhB,KAAKgS,wBACV/Q,MAAkC,QAA7BsS,EAACvT,KAAKC,MAAM6T,yBAAiB,IAAAP,EAAAA,EAAIvT,KAAKqS,2BAC3CrR,KAAKhB,KAAK2S,kCACV1R,MAAMqR,EAAAA,EAAMC,sBACjB,IAjEFvS,KAAK6M,KAAOxN,EAAAA,WACd,CAoEA0U,iBAAAA,GACE/T,KAAKC,MAAMwS,2BACb,CAEAuB,kBAAAA,CAAmBC,EAAmCC,IAE1B,IAAtBA,EAAUtO,UAA4C,IAAvB5F,KAAKF,MAAM8F,SAC5C5F,KAAKC,MAAMwS,2BAEf,CAEA0B,uBAAAA,GACE,MAAM,YAAE9C,GAAgBrR,KAAKC,MAC7B,OACE2B,EAAAA,EAAAA,GAACwS,EAAAA,GAAiB,CAChB/C,YAAaA,EACbgD,SAAUrU,KAAK6M,KACfyH,yBAA0BC,IAAAA,SAAWvU,KAAKwS,6BAA8B,MAG9E,CAEAgC,YAAAA,GACE,MAAO,EACL5S,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,yEAEZE,QAASnC,KAAK2R,kBAAkB7P,UAEhCF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,YAJb,SAQNK,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,yEAEZC,KAAK,UACLC,QAASA,IAAMnC,KAAK+S,sBACpB,eAAa,yBAAwBjR,UAErCF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SAACC,eAAe,cAL7B,UAQV,CAEAkT,YAAAA,CAAaC,EAAwB7H,EAAuB4B,GAC1D,MAAM,QAAE7I,EAAO,eAAE/E,GAAmBb,KAAKF,OACnC,WAAE6U,GAAa,EAAI,WAAEC,GAAe5U,KAAKC,MAC/C,OACE8B,EAAAA,EAAAA,IAAA,OAAKF,UAAU,6BAA4BC,SAAA,CACxC6S,IACC/S,EAAAA,EAAAA,GAAC0C,EAAAA,IAAa,CAACE,MAAOxE,KAAKC,MAAM4U,SAAW,KAAMvL,UAAU,OAAMxH,UAChEF,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,yEACZJ,UAAU,qBACVK,KAAM0S,EACNzS,QAASnC,KAAK0R,kBACdtP,SAAUsS,EACVnS,SAAS,SAAQT,UAEjBF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,wBAMvBK,EAAAA,EAAAA,GAAC8D,EAAAA,EAAK,CACJlB,MAAOxE,KAAKC,MAAMmB,KAAKC,cAAc,CAAAC,GAAA,SACnCC,eAAe,mBAIjBuT,MAAO,IACPlP,QAAS5F,KAAKC,MAAM8U,cAAgBnP,EACpCoP,KAAMA,IAAMhV,KAAK+S,sBACjBkC,OAAQjV,KAAKC,MAAMmB,KAAKC,cAAc,CAAAC,GAAA,SACpCC,eAAe,aAGjBV,eAAgBA,EAChBY,SAAUzB,KAAK2R,kBACfuD,UAAQ,EACRzG,OAAQA,EAAO3M,SAEd+K,MAIT,CAEA/J,MAAAA,GACE,MAAM,SAAEV,GAAapC,KAAKC,MAC1B,OAAOD,KAAKyU,aAAarS,EAAUpC,KAAKmU,0BAA2BnU,KAAKwU,eAC1E,EAGF,MAMMW,EAAqB,CACzB1B,yBAAwB,KACxBE,sBAAqB,KACrBd,uBAAsB,KACtBJ,0BACF,MAEa2C,GAAwBhQ,EAAAA,EAAAA,IAAW+L,GACnCkE,GAAgBC,EAAAA,EAAAA,KAdJxV,IAChB,CACLuR,YAAavR,EAAMyV,SAASlE,eAYsB8D,EAAzBG,CAA6CF,gIC9N1E,MAAM,KAAE9M,GAAShD,EAAAA,EAAW,IAAArG,EAAA,CAAA4E,KAAA,SAAA0B,OAAA,iBAAAC,EAAA,CAAA3B,KAAA,UAAA0B,OAAA,4BAAAoE,EAAA,CAAA9F,KAAA,SAAA0B,OAAA,YA0BrB,MAAMiQ,UAAyB7V,EAAAA,UAAwDC,WAAAA,GAAA,SAAAC,WAAA,KAC5FC,MAAQ,CACN2V,kBAAc3O,EACd4O,eAAgB,CAAC,EACjBC,iBAAkB,IAAIC,IACtBC,aAAa,GACb,KAyNFC,kBAAoB,CAClBC,EAIAC,KAEA,MAAM,GAAE1U,EAAE,QAAEe,GAAY0T,EAElBE,GAAoBC,EAAAA,EAAAA,OAAuClW,KAAKC,MAAMkW,mBAEtEC,EAAsB,IAAIR,IAAI5V,KAAKF,MAAM6V,kBAG3CtT,IAAYrC,KAAKF,MAAM6V,iBAAiBU,IAAI/U,KAE1C2U,GAAqBjW,KAAKC,MAAMqW,cAClCtW,KAAKC,MAAMsW,4BAA4BvW,KAAKC,MAAMqW,cAAehV,GAEjEtB,KAAKC,MAAMuW,iBAAiBxW,KAAKC,MAAM2S,QAAStR,IAGpDtB,KAAKS,SAAS,CACZgV,aAAcnU,EACdoU,eAAgB,IACX1V,KAAKF,MAAM4V,eACd,CAACpU,GAAK0U,GAERL,iBAAkBS,GAClB,EACF,KAEFK,iBAAoBC,IAClB,MAAM,OAAEC,GAAWD,EACnB,GAAIC,EAAQ,CACV,GAAID,EAAa5U,SACf,OAAO8U,OAAOjJ,OAAO+I,EAAa5U,UAAU4J,KAAKmL,GAAM7W,KAAKyW,iBAAiBI,KAG/E,MAAMC,MAAM,oBACd,CAEA,IAAIxV,EACAuC,EACAmS,EACAlU,EACAiV,EAEJ,GAAIL,EAAaM,SAAU,CACzB,MAAM,KAAEC,GAASP,EAAaM,SAC9B1V,EAAK2V,EACLpT,GAAOqT,EAAAA,EAAAA,IAAYD,EACrB,CAGA,MAAME,EAAcnX,KAAKF,MAAM4V,eAAepU,GAC1C6V,IACFnB,EAAUmB,GAGRT,EAAa5U,WACfA,EAAW8U,OAAOjJ,OAAO+I,EAAa5U,UAAU4J,KAAKmL,GAAM7W,KAAKyW,iBAAiBI,MAG/E7W,KAAKF,MAAM2V,eAAiBnU,IAC9ByV,GAAS,GAKX,MAAO,CACLzV,KACAuC,OACAmS,UACAlU,WACAiV,SACA1U,aARwCyE,IAA1B4P,EAAa5U,WAA2B4U,EAAaU,SASpE,CACD,CArSFC,wBAAAA,GACE,MAAM,sBAAEC,GAA0BtX,KAAKC,MAEvC,OAAOqX,EADoBhF,EAAAA,EAAMiF,UAAUvX,KAAKwX,yBAElD,CAEAC,yBAAAA,GACE,MAAM,QAAE7E,GAAY5S,KAAKC,OACnB,aAAEwV,GAAiBzV,KAAKF,MACxB4X,EAAqB1X,KAAKwX,wBAChC,OACE5V,EAAAA,EAAAA,GAACyT,EAAa,CACZzC,QAASA,EACTK,UAAWyE,EACXC,kBAAmBC,OAAOnC,GAC1BrT,cAA2B0E,IAAjB2O,EACVd,YAAU,EACVC,gBAAY9N,GAGlB,CAEA+Q,6BAAAA,CAA8BC,GAC5B,OAAOlW,EAAAA,EAAAA,GAACmW,EAAuB,CAACC,aAAczD,IAAAA,KAAOuD,IACvD,CAEAG,qBAAAA,GAEE,MAAMC,EAAOC,EAAAA,EAAcC,UAAUpY,KAAKC,MAAMyW,aAAc1W,KAAKF,MAAM2V,cACnEiC,EAAqB1X,KAAKwX,wBAEhC,OACEzV,EAAAA,EAAAA,IAAA,OAAKF,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,EAAAA,IAAA,OAAKF,UAAU,qBAAoBC,SAAA,EACjCF,EAAAA,EAAAA,GAAA,SAAAE,UACEF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,iBAIV,KAETK,EAAAA,EAAAA,GAAC0G,EAAI,CAACzG,UAAU,qBAAqBwW,UAAQ,EAACC,UAAQ,EAAAxW,SACnD4V,QAGqB,IAAzBQ,EAAKlB,SAASuB,QACbxW,EAAAA,EAAAA,IAAA,OAAKF,UAAU,qBAAoBC,SAAA,EACjCF,EAAAA,EAAAA,GAAA,SAAAE,UACEF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,YAGV,IACRiX,IAAMxY,KAAKyY,wBAEZ,OAGV,CAEAC,cAAAA,GAEE,MAAMR,EAAOC,EAAAA,EAAcC,UAAUpY,KAAKC,MAAMyW,aAAc1W,KAAKF,MAAM2V,eACnE,MAAErR,GAAUpE,KAAKC,MAAM0Y,qBAE7B,OACE5W,EAAAA,EAAAA,IAAA,OACEoH,MAAO,CACLd,QAAS,OACT6G,WAAY,SACZC,IAAK/K,EAAM8B,QAAQC,GACnBY,SAAU,SACVC,aAAc,YACdlF,SAAA,EAEFF,EAAAA,EAAAA,GAAC0D,EAAAA,EAAWgD,KAAI,CAACC,MAAI,EAACqQ,KAAK,KAAKP,UAAQ,EAAC7T,MAAOxE,KAAKF,MAAM2V,aAAa3T,SACrE9B,KAAKF,MAAM2V,gBAEY,IAAzByC,EAAKlB,SAASuB,SACb3W,EAAAA,EAAAA,GAAC0D,EAAAA,EAAWgD,KAAI,CAAC3D,MAAM,YAAW7C,SAAE0W,IAAMxY,KAAKyY,yBAIvD,CAEAI,cAAAA,GACE,MAAMnB,EAAqB1X,KAAKwX,yBAC1B,MAAEpT,GAAUpE,KAAKC,MAAM0Y,qBAE7B,OACE5W,EAAAA,EAAAA,IAAA,OACE0C,KAAGC,EAAAA,EAAAA,IAAE,CACH2D,QAAS,OACTtB,SAAU,SACVmI,WAAY,SACZC,IAAK/K,EAAM8B,QAAQC,IACpB,IAACrE,SAAA,EAEFC,EAAAA,EAAAA,IAAA,OACE0C,KAAGC,EAAAA,EAAAA,IAAE,CACHqC,SAAU,SACVX,WAAY,SACZY,aAAc,WACdqI,KAAM,SACN1K,MAAOP,EAAMQ,OAAOkU,eACrB,IACDtU,MAAOkT,EAAmB5V,SAAA,EAE1BF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,UAEd,IACFmW,MAGH9V,EAAAA,EAAAA,GAAC2E,EAAAA,EAAU,CACT9B,IAAGxF,EACHwH,WAAW,EACXmS,KAAK,QACL1W,KAAK,WACLsE,SAAUkR,EACV3S,MAAMnD,EAAAA,EAAAA,GAAC8E,EAAAA,IAAQ,QAIvB,CAEAqS,eAAAA,CAAgBnG,EAAcoG,GAC5BxZ,OAAOyZ,SAASC,MAAOC,EAAAA,EAAAA,IAAuBH,EAAcpG,EAC9D,CAEAwG,cAAAA,GACE,MAAM,QAAExG,GAAY5S,KAAKC,OACnB,aAAEwV,GAAiBzV,KAAKF,MAC9B,OACE8B,EAAAA,EAAAA,GAAA,OAAKuH,MAAO,CAAEd,QAAS,OAAQ6G,WAAY,cAAepN,UACxDC,EAAAA,EAAAA,IAAA,OAAKoH,MAAO,CAAEd,QAAS,cAAe6G,WAAY,UAAWpN,SAAA,CAC1D9B,KAAKqZ,gCACJzX,EAAAA,EAAAA,GAAC0X,EAAAA,IAAQ,CACPrX,YAAY,6EACZsX,UAAWvZ,KAAKF,MAAM+V,YACtBrS,SAAUA,IACRxD,KAAKS,SAAS,CACZoV,aAAc7V,KAAKF,MAAM+V,cAE5B/T,UAEDF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,qBAKrBK,EAAAA,EAAAA,GAAC0C,EAAAA,IAAa,CACZkV,oBAAkB,EAClBlQ,UAAU,UACV9E,MAAOxE,KAAKC,MAAMmB,KAAKC,cAAc,CAAAC,GAAA,SACnCC,eAAe,sBAEdO,UAEHF,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,6EACZ8C,MAAMnD,EAAAA,EAAAA,GAAC6X,EAAAA,IAAY,IACnBtX,QAASA,IAAMnC,KAAK+Y,gBAAgBnG,EAAS6C,WAMzD,CAEAiE,kBAAAA,GACE,MAAM5B,EAAwB9X,KAAKqX,2BACnC,IAAIsC,EAIFA,EAHE7B,GAAyBxF,EAAAA,EAAMsH,yBAGtB5Z,KAAK6X,8BAA8BC,GACrC9X,KAAK6Z,6BAA+BvH,EAAAA,EAAMsH,yBACxC5Z,KAAKyX,4BACPzX,KAAK8Z,wBACH,KAEA9Z,KAAKoZ,iBAElB,MAAM,MAAEhV,GAAUpE,KAAKC,MAAM0Y,qBAC7B,OACE5W,EAAAA,EAAAA,IAAA,OACE0C,KAAGC,EAAAA,EAAAA,IAAE,CACHqV,QAAS,GAAG3V,EAAM8B,QAAQ8J,QAAQ5L,EAAM8B,QAAQC,QAAQ/B,EAAM8B,QAAQC,QAAQ/B,EAAM8B,QAAQvC,OAC5F0E,QAAS,OACT2R,cAAe,SACf7K,IAAK/K,EAAM8B,QAAQ8J,IACpB,IAAClO,SAAA,EAEFC,EAAAA,EAAAA,IAAA,OACE0C,KAAGC,EAAAA,EAAAA,IAAE,CACH0B,WAAY,SACZiC,QAAS,OACT4R,eAAgB,gBAChB/K,WAAY,SACZC,IAAK/K,EAAM8B,QAAQvC,IACpB,IAAC7B,SAAA,EAEFF,EAAAA,EAAAA,GAAA,OAAK6C,IAAGe,EAAsC1D,SAAE9B,KAAK0Y,oBACrD9W,EAAAA,EAAAA,GAAA,OAAK6C,IAAGkF,EAAkB7H,SAAE6X,OAG7B3Z,KAAK6Y,mBAGZ,CAkFArB,qBAAAA,GACE,OAAIxX,KAAKF,MAAM2V,aACN,GAAGzV,KAAKC,MAAMia,mBAAmBla,KAAKF,MAAM2V,eAE9CzV,KAAKC,MAAMia,eACpB,CAEAzB,iBAAAA,GACE,GAAIzY,KAAKF,MAAM2V,aAAc,CAC3B,MACMmD,EADOT,EAAAA,EAAcC,UAAUpY,KAAKC,MAAMyW,aAAc1W,KAAKF,MAAM2V,cACvDuB,SAASmD,WAAa,IACxC,OAAOC,SAASxB,EAAM,GACxB,CACA,OAAO,CACT,CAEAkB,qBAAAA,GACE,GAAI9Z,KAAKF,MAAM2V,aAAc,CAE3B,OADa0C,EAAAA,EAAcC,UAAUpY,KAAKC,MAAMyW,aAAc1W,KAAKF,MAAM2V,cAC7DuB,SAASuB,MACvB,CAEE,OAAO,CAEX,CAEAsB,yBAAAA,GACE,GAAI7Z,KAAKF,MAAM2V,aAAc,CAC3B,MAAMyC,EAAOC,EAAAA,EAAcC,UAAUpY,KAAKC,MAAMyW,aAAc1W,KAAKF,MAAM2V,cACzE,GAAIyC,GAAQA,EAAKpW,UAAYuY,EAAAA,MAAqBnC,EAAKpW,SACrD,OAAO,CAEX,CACA,OAAO,CACT,CAEAkS,kBAAAA,CAAmBC,EAAkCC,GACnD,MAAM,aAAEuB,GAAiBzV,KAAKF,MAC1BoU,EAAUuB,eAAiBA,GAC7BzV,KAAKC,MAAMqa,uBAAuBta,KAAK8Z,wBAE3C,CAEA/F,iBAAAA,GACE,GAAI/T,KAAKC,MAAMsa,4BAA6B,CAC1C,MAAMC,EAAoBxa,KAAKC,MAAMsa,4BAA4BE,MAAM,KACvE,GAAID,EACF,IAGErC,EAAAA,EAAcC,UAAUpY,KAAKC,MAAMyW,aAAc1W,KAAKC,MAAMsa,4BAC9D,CAAE,MAAOG,GAGP,YADAC,QAAQta,MAAMqa,EAEhB,CAEF,IAAIE,EAAY,GAChB,MAAMC,EAAuB,CAC3BpF,aAAczV,KAAKC,MAAMsa,4BACzB7E,eAAgB,CAAC,GAEnB8E,EAAkBM,SAASC,IACzBH,GAAaG,EAEbF,EAAqC,eAAED,IAAa,EACpDA,GAAa,GAAG,IAElB5a,KAAKgb,iBAAiBH,EACxB,CACF,CAEAG,gBAAAA,CAAiBC,GACfjb,KAAKS,SAASwa,EAChB,CAEA,iCAAI5B,GACF,OACErZ,KAAKF,MAAM2V,cACXzV,KAAKC,MAAMib,UACXC,EAAAA,EAAAA,IAAwBnb,KAAKC,MAAMib,SAAS7P,SAASrL,KAAKF,MAAM2V,aAEpE,CAEA3S,MAAAA,GACE,GAAIqV,EAAAA,EAAciD,QAAQpb,KAAKC,MAAMyW,cACnC,OAAO9U,EAAAA,EAAAA,GAACyZ,EAAc,CAACC,cAAetb,KAAKC,MAAMqb,gBAEnD,MAAM,MAAElX,GAAUpE,KAAKC,MAAM0Y,sBAEvB,cAAErC,EAAa,mBAAEH,GAAuBnW,KAAKC,MAEnD,OACE8B,EAAAA,EAAAA,IAAA,OACEF,UAAU,gBACV4C,KAAGC,EAAAA,EAAAA,IAAE,CACH2K,KAAMrP,KAAKC,MAAMqb,cAAgB,EAAI,QACrCC,OAAQvb,KAAKC,MAAMqb,cAAgB,YAASxU,EAC5C,CAAC1C,EAAMoX,WAAWC,aAAazL,IAAK,CAClC0L,UAAW,SAEd,IAAC5Z,SAAA,EAEFF,EAAAA,EAAAA,GAAA,OACEuH,MAAO,CACLiG,SAAU,QACV5H,SAAU,QACV6H,KAAM,EACNjJ,WAAY,SACZuV,YAAa,aAAavX,EAAMQ,OAAOgX,oBACvC9Z,UAEFF,EAAAA,EAAAA,GAACia,EAAAA,EAAgB,CACf3S,KAAMlJ,KAAKyW,iBAAiBzW,KAAKC,MAAMyW,cACvCZ,kBAAmB9V,KAAK8V,uBAG5B/T,EAAAA,EAAAA,IAAA,OAAKF,UAAU,iBAAgBC,SAAA,CAC5B9B,KAAKF,MAAM2V,aAAezV,KAAK0Z,qBAAuB,MACvD9X,EAAAA,EAAAA,GAACka,EAAAA,EAAgB,CACflJ,QAAS5S,KAAKC,MAAM2S,QACpBqE,KAAMjX,KAAKF,MAAM2V,aACjBsG,YAAa/b,KAAK8Z,wBAClBlB,KAAM5Y,KAAKyY,oBACXyC,QAASlb,KAAKC,MAAMib,QACpBhB,gBAAiBla,KAAKC,MAAMia,gBAC5B8B,cAAehc,KAAKC,MAAM+b,cAC1BC,4BAA6Bjc,KAAKF,MAAM+V,aAAe7V,KAAKqZ,8BAC5D/C,cAAeA,EACfH,mBAAoBA,SAK9B,EAGF,MAeMhB,EAAqB,CACzBqB,iBAAgB,KAChBD,4BACF,MAEa2F,GAAe5G,EAAAA,EAAAA,KApBJ6G,CAACrc,EAAYsc,KAAmB,IAADC,EACrD,MAAM,QAAEzJ,EAAO,cAAE0D,EAAa,mBAAEH,GAAuBiG,GACjD,KAAEE,GAASxc,EACX4W,EACJP,GAAsBG,GAAgBiG,EAAAA,EAAAA,IAAajG,EAAexW,IAASyc,EAAAA,EAAAA,IAAa3J,EAAS9S,GAC7Foa,EAA2C,QAA5BmC,EAAW,OAARD,QAAQ,IAARA,OAAQ,EAARA,EAAUlC,uBAAe,IAAAmC,EAAAA,GAAIG,EAAAA,EAAAA,IAAmB5J,EAAS9S,GAC3Ekc,GAAgBS,EAAAA,EAAAA,IAAoB3c,GACpC4c,EAAoCnI,IAAAA,QAAUyH,GAAgBW,IAE3D,IAAKA,EAASC,OAAQtK,EAAAA,EAAMiF,UAAWoF,EAAgBC,YAGhE,MAAO,CAAElG,eAAcwD,kBAAiB8B,gBAAe1E,sBADzB/C,IAAAA,QAAUmI,EAAmC,UACGJ,OAAM,GAUpFnH,EAF0BG,EAI1BuH,EAAAA,EAAAA,IAAyBzX,EAAAA,EAAAA,IAAWoQ,KAMtC,SAASuC,EAAwB9X,GAC/B,MAAM,aAAE+X,GAAiB/X,GACnB,KAAE4D,EAAI,QAAE8Y,EAAO,OAAEG,EAAM,eAAEC,GAAmB/E,EAGlD,IAAIgF,EAAcC,EAAAA,GAAoBC,yBAAyBrZ,EAAM8Y,GACrE,MAAMQ,GACJvb,EAAAA,EAAAA,GAAC0C,EAAAA,IAAa,CAACE,MAAO,GAAGX,aAAgB8Y,IAAU7a,UACjDC,EAAAA,EAAAA,IAACqb,EAAAA,GAAI,CAACC,GAAIL,EAAanb,UAAU,qBAAqByb,OAAO,SAASC,IAAI,aAAYzb,SAAA,EACpFF,EAAAA,EAAAA,GAAA,QAAMC,UAAU,aAAYC,SAAE+B,KAC9B9B,EAAAA,EAAAA,IAAA,QAAAD,SAAA,CAAM,SAAS6a,EAAQ,WACvB/a,EAAAA,EAAAA,GAAA,KAAGC,UAAU,gCAKnB,OACEE,EAAAA,EAAAA,IAAA,OAAKF,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,EAAAA,IAAA,OAAKF,UAAU,6BAA4BC,SAAA,EACzCF,EAAAA,EAAAA,GAAC0C,EAAAA,IAAa,CAACE,MAAOuY,GAAkBS,EAAAA,GAA+BV,GAAQhb,UAC7EF,EAAAA,EAAAA,GAAA,OAAAE,SAAM2b,EAAAA,GAAwBX,OAE/BK,MAEHvb,EAAAA,EAAAA,GAAA,OAAKC,UAAU,4BAA2BC,SACvCgb,IAAWY,EAAAA,GAAmBC,OAC7B/b,EAAAA,EAAAA,GAACvC,EAAAA,SAAc,CAAAyC,UACbF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,iCAEfoM,OAAQ,CACNiQ,eAAgBtL,EAAAA,EAAMuL,gBAAgB7F,EAAa8F,mBAAoB,mBAK7Ef,GAAkBgB,EAAAA,GAAkCjB,OAK9D,CAEA,SAASzB,EAActP,GAAkD,IAAjD,cAAEuP,GAA4CvP,EACpE,MAAM,MAAE3H,IAAUC,EAAAA,EAAAA,KAClB,OACEzC,EAAAA,EAAAA,GAAA,OACE6C,KAAGC,EAAAA,EAAAA,IAAE,CACH2K,KAAMiM,EAAgB,EAAI,QAC1BC,OAAQD,EAAgB,YAASxU,EACjCkX,WAAY5Z,EAAM8B,QAAQvC,GAC1B0E,QAAS,OACT4R,eAAgB,SAChB/K,WAAY,UACb,IAACpN,UAEFF,EAAAA,EAAAA,GAACqc,EAAAA,IAAK,CACJC,OAAOtc,EAAAA,EAAAA,GAACuc,EAAAA,IAAS,IACjB3Z,OACE5C,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,0BAInByC,aACEpC,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,yEAO3B,wCChkBO,MAAM6c,WAAyBze,EAAAA,UAAwDC,WAAAA,GAAA,SAAAC,WAAA,KAC5Fwe,oBAAc,OAEdC,4BAA8B,KAE1B1c,EAAAA,EAAAA,GAAA,QAAAE,UACEF,EAAAA,EAAAA,GAACY,EAAAA,EACC,CAAAlB,GAAA,SACAC,eAAe,yRAGfoM,OAAQ,CAAE4Q,YAAave,KAAKC,MAAMia,qBAIxC,KAEFpa,MAAQ,CAAEga,uBAAuB,EAAO0E,aAAa,GAAQ,KAE7DC,iBAAkBlN,EAAAA,EAAAA,MAAU,KAE5BmN,uBAAyB,EAACnN,EAAAA,EAAAA,OAAWoN,OACnC3e,KAAKC,MAAMsa,4BACPva,KAAKC,MAAMsa,4BAA4BE,MAAM,KAAK/O,KAAKkT,IAAMrN,EAAAA,EAAAA,QAC7D,IACJ,KAEFsN,+BAAiCtR,UAC/B,MAAM,KAAE+O,EAAI,QAAE1J,EAAO,mBAAEuD,GAAuBnW,KAAKC,OAC7C,sBAAE6Z,GAA0B9Z,KAAKF,MACjCgf,EAAgBxC,EAAKtc,KAAKye,iBAEhC,KAAItI,GAAuBvD,IAGvBkH,KAA2BgF,IAAiBA,EAAc/H,QAC5D,UAEQ/W,KAAKC,MAAM4S,uBAAuB,CAAEC,OAAQF,GAAW5S,KAAKye,gBACpE,CAAE,MAAOpe,GAGP,IAAKL,KAAKF,MAAM0e,YAAa,CAC3B,MACMnS,EAAe,+CADDhM,aAAiByW,MAAQzW,EAAM0e,WAAaC,KAAKC,UAAU5e,KAE/EiS,EAAAA,EAAMC,sBAAsBlG,GAC5BrM,KAAKS,SAAS,CAAE+d,aAAa,GAC/B,CACF,CACF,EACA,KAEFlE,uBAA0BR,IACxB9Z,KAAKS,SAAS,CAAEqZ,yBAAwB,EACxC,KAEFoF,2BAA6B3R,UAC3B,MAAM,QAAEqF,EAAO,cAAE0D,GAAkBtW,KAAKC,MAElCgW,GAAoBC,EAAAA,EAAAA,OAAuClW,KAAKC,MAAMkW,mBAQ5E,GALIF,GAAqBK,QACjBtW,KAAKC,MAAMsW,4BAA4BvW,KAAKC,MAAMqW,mBAAexP,EAAW9G,KAAK0e,uBAAuB,UAExG1e,KAAKC,MAAMuW,iBAAiB5D,OAAS9L,EAAW9G,KAAK0e,uBAAuB,IAEhF1e,KAAKC,MAAMsa,4BAA6B,CAC1C,MAAM4E,EAAQnf,KAAKC,MAAMsa,4BAA4BE,MAAM,KAC3D,IAAIG,EAAY,GAChB,IAAK,IAAIwE,EAAI,EAAGA,EAAID,EAAMtY,OAAQuY,IAChCxE,GAAauE,EAAMC,GAQfnJ,GAAqBK,QACjBtW,KAAKC,MAAMsW,4BACfvW,KAAKC,MAAMqW,cACXsE,EACA5a,KAAK0e,uBAAuBU,EAAI,UAG5Bpf,KAAKC,MAAMuW,iBAAiB5D,EAASgI,EAAW5a,KAAK0e,uBAAuBU,EAAI,IAExFxE,GAAa,GAEjB,GACA,KAwBFyE,qBAAwBC,GACfA,EACP,KAEFC,mBAAqB,CAACtR,EAAgBqR,EAAwBE,KAC5D,GAAIvR,EACF,OAAOrM,EAAAA,EAAAA,GAAC6d,GAAAA,EAA2B,IAErC,GAAIzf,KAAKqf,qBAAqBC,GAAoB,CAChD,MAAMI,EAAYF,EAAS,GAK3B,OAJIE,GAAaA,EAAUrf,OAEzBsa,QAAQta,MAAMqf,EAAUrf,QAGxBuB,EAAAA,EAAAA,GAAC+d,GAAAA,EAAsB,CACrBlb,KAAGC,EAAAA,EAAAA,IAAE,CAAE2K,KAAMrP,KAAKC,MAAMqb,cAAgB,EAAI,QAASC,OAAQvb,KAAKC,MAAMqb,cAAgB,YAASxU,GAAW,IAC5G,cAAY,sBACZ9C,YAAahE,KAAKse,+BAGxB,CACA,OACE1c,EAAAA,EAAAA,GAACsa,EAAY,IACPlc,KAAKC,MACTqa,uBAAwBta,KAAKsa,uBAC7BgB,cAAetb,KAAKC,MAAMqb,eAC1B,CAEJ,CAnDFvH,iBAAAA,GACMzB,EAAAA,EAAMsH,2BACR5Z,KAAK6e,iCACL7e,KAAKqe,eAAiBuB,YAAY5f,KAAK6e,+BAAgCgB,EAAAA,KAEzE7f,KAAKkf,4BACP,CAEAlL,kBAAAA,CAAmBC,GACbA,EAAUrB,UAAY5S,KAAKC,MAAM2S,SACnC5S,KAAKS,SAAS,CACZ+d,aAAa,GAGnB,CAEAsB,oBAAAA,GACMxN,EAAAA,EAAMsH,0BACRmG,cAAc/f,KAAKqe,eAEvB,CAiCAvb,MAAAA,GACE,OACElB,EAAAA,EAAAA,GAACoe,GAAAA,GAAmB,CAClBC,WAAYjgB,KAAK0e,uBACjB5c,SAEC9B,KAAKuf,oBAGZ,EAaF,MA0BMpK,GAAqB,CACzBqB,iBAAgB,KAChBD,4BAA2B,KAC3B1D,uBACF,MAEaqN,IAAwB5K,EAAAA,EAAAA,KAhCb6G,CAACrc,EAAYsc,KAA0D,IAADC,EAC5F,MAAM,QAAEzJ,EAAO,SAAEqG,GAAamD,EAGxB+D,IAF0B,OAARlH,QAAQ,IAARA,OAAQ,EAARA,EAAUmH,WAAY,IAEWC,MAAM,sCAMzD9F,GAA8D,OAAhC4F,QAAgC,IAAhCA,OAAgC,EAAhCA,EAAmC,UAAMrZ,GAEvE,KAAEwV,GAASxc,EACXoa,EAA0C,QAA3BmC,EAAGD,EAASlC,uBAAe,IAAAmC,EAAAA,GAAIG,EAAAA,EAAAA,IAAmB5J,EAAS9S,GAGhF,IAAIwgB,EAAe/F,EACnB,IAAK+F,EAAc,CAAC,IAADC,EACjB,MAAMC,GAAmBC,EAAAA,EAAAA,IAA4C,QAAjBF,EAACnE,EAASlB,eAAO,IAAAqF,EAAAA,EAAI,CAAC,GACtEC,EAAiB3Z,OAAS,IAC5ByZ,EAAe/L,IAAAA,MAAQiM,GAE3B,CACA,MAAO,CAAEtG,kBAAiBoC,OAAM/B,4BAA6B+F,EAAc,GASfnL,GAAzBG,CAA6C8I,IAElF,QAAesC,EAAAA,EAAAA,GAAeR,gBChPvB,MAAMS,GAAqB1hB,IAS3B,IAT4B,QACjCic,EAAO,YACPqD,EAAW,QACX3L,GAMD3T,EACC,MAAM,MAAEmF,IAAUC,EAAAA,EAAAA,KAGZuc,GAAoBC,EAAAA,GAAAA,GAAc,eAAezc,EAAMoX,WAAWsF,YAAY3a,SAEpF,OACEvE,EAAAA,EAAAA,GAAA,OACE6C,KAAGC,EAAAA,EAAAA,IAAE,CACH2K,KAAM,EACNtI,SAAU,SACVsB,QAAS,OACT0Y,cAAe3c,EAAM8B,QAAQvC,GAC7BY,SAAU,YACX,IAACzC,UAEFF,EAAAA,EAAAA,GAACof,GAAY,CACXpO,QAASA,EACTsI,QAASA,EACTI,cAAesF,EACf1G,gBAAiBqE,KAEf,8BC9BH,MAAM0C,GAAsBA,KACjC,MAAQ,IAAKC,IAAaC,EAAAA,EAAAA,KAC1B,MAAiB,kBAAbD,EACKE,EAAAA,GAAeC,oBAEP,mBAAbH,EACKE,EAAAA,GAAeE,sBAEpBC,EAAAA,EAAAA,OAAsD,WAAbL,EACpCE,EAAAA,GAAeI,OAEZ,OAARN,QAAQ,IAARA,GAAAA,EAAUb,MAAM,6BACXe,EAAAA,GAAeK,UAGjBL,EAAAA,GAAeM,QAAQ,ECb1BC,GAAsB,CAACP,EAAAA,GAAeK,UAAWL,EAAAA,GAAeQ,aAKzDC,GAAoBA,KAC/B,MAAM,aAAEC,EAAY,QAAElP,IAAYuO,EAAAA,EAAAA,KAC5BY,GAAWC,EAAAA,EAAAA,MACXC,EAAahB,MACZiB,EAAiBC,IAAsBza,EAAAA,EAAAA,UAASia,GAAoBtW,SAAS4W,IAgBpF,OAEElgB,EAAAA,EAAAA,IAACqgB,EAAAA,IAAU,CAACC,UAAWJ,EAAYze,SAhBf8e,IACfR,GAAiBlP,GAAWqP,IAAeK,IAIhDH,EAAmBR,GAAoBtW,SAASiX,IAE5CA,IAAclB,EAAAA,GAAeM,SAIjCK,EAASQ,GAAAA,EAAOC,mBAAmBV,EAAclP,EAAS0P,IAHxDP,EAASQ,GAAAA,EAAOE,gBAAgBX,EAAclP,IAGqB,EAKV8P,YAAa,CAAEC,OAAQT,GAAmB,OAAQpgB,SAAA,EAC3GF,EAAAA,EAAAA,GAACwgB,EAAAA,IAAWQ,QAAO,CACjBC,KACEjhB,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SAACC,eAAe,cAE9B6f,EAAAA,GAAeM,WAGtB9f,EAAAA,EAAAA,GAACwgB,EAAAA,IAAWQ,QAAO,CACjBC,KACEjhB,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,mBAId6f,EAAAA,GAAeC,sBAEtBzf,EAAAA,EAAAA,GAACwgB,EAAAA,IAAWQ,QAAO,CACjBC,KACEjhB,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,oBAId6f,EAAAA,GAAeE,uBAErBC,EAAAA,EAAAA,QACC3f,EAAAA,EAAAA,GAACwgB,EAAAA,IAAWQ,QAAO,CACjBC,KAAKjhB,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SAACC,eAAe,YACjC6f,EAAAA,GAAeI,SAGxB5f,EAAAA,EAAAA,GAACwgB,EAAAA,IAAWQ,QAAO,CACjBC,KACEjhB,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SAACC,eAAe,eAE9B6f,EAAAA,GAAeK,aAEX,kBCvD6F,IAAAjc,GAAA,CAAA3B,KAAA,SAAA0B,OAAA,mCAAAoE,GAAA,CAAA9F,KAAA,SAAA0B,OAAA,oCAQvG,SAASud,GAA2B7jB,GAUvC,IAVwC,OAC1C8jB,EAAM,gBACNC,EAAe,aACflB,EAAY,QACZlP,GAMD3T,EACC,MAAM,MAAEmF,IAAUC,EAAAA,EAAAA,KACZ4e,EAAgBA,CAACze,EAAe0e,KAElCnhB,EAAAA,EAAAA,IAAC2H,EAAAA,IAAayZ,MAAK,CAAArhB,SAAA,EACjBF,EAAAA,EAAAA,GAAC8H,EAAAA,IAAa6F,MAAK,CAAAzN,SAAE0C,IACpB0e,EAAcxX,KAAK0X,IAClB,MAAMC,GAAkBC,EAAAA,EAAAA,OAAMF,EAAMG,oBACpC,IAAKF,EACH,OACEthB,EAAAA,EAAAA,IAAC2H,EAAAA,IAAa8Z,KAAI,CAChBvhB,YAAY,yGACZE,QAASA,IAAM6gB,EAAgBI,GAAOthB,SAAA,EAGtCF,EAAAA,EAAAA,GAAA,OAAK6C,KAAGC,EAAAA,EAAAA,IAAE,CAAE8E,YAAapF,EAAM8B,QAAQvC,IAAI,IAAC7B,UAAE2hB,EAAAA,EAAAA,MAAKL,EAAMnM,KAAKwD,MAAM,SACpE7Y,EAAAA,EAAAA,GAAC8H,EAAAA,IAAaga,WAAU,CAAA5hB,UACtBF,EAAAA,EAAAA,GAACwb,EAAAA,GAAI,CACHE,OAAO,SACPD,GAAIkF,GAAAA,EAAOC,mBAAmBV,EAAclP,EAAS,aAAewQ,EAAMnM,MAAMnV,UAEhFF,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,yGACZC,KAAK,OACL0W,KAAK,QACLzW,QAAUjB,IACRA,EAAEyiB,iBAAiB,EAErBC,SAAShiB,EAAAA,EAAAA,GAACiiB,EAAAA,GAAa,IAAI/hB,UAE3BF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,uBAlBlB6hB,EAAMU,cA2BjB,MAAM,OAAEhH,EAAM,KAAEjZ,EAAI,QAAE8Y,GAAY0G,EAElC,OACEzhB,EAAAA,EAAAA,GAACwb,EAAAA,GAAI,CAACE,OAAO,SAASD,GAAI0G,GAA8BV,GAAiBvhB,UACvEC,EAAAA,EAAAA,IAAC2H,EAAAA,IAAa8Z,KAAI,CAACvhB,YAAY,yGAAwGH,SAAA,EACrIF,EAAAA,EAAAA,GAAC8H,EAAAA,IAAasa,YAAW,CAACvf,IAAGe,GAA4C1D,SAC3D,UAAXgb,GAAqBlb,EAAAA,EAAAA,GAACqiB,GAAAA,EAAqB,IAAMxG,EAAAA,GAAwBX,MAE5E/a,EAAAA,EAAAA,IAAA,QAAM0C,KAAGC,EAAAA,EAAAA,IAAE,CAAE8E,YAAapF,EAAM8B,QAAQvC,IAAI,IAAC7B,SAAA,CAC1C+B,GACD9B,EAAAA,EAAAA,IAACqG,EAAAA,IAAG,CACFnG,YAAY,yGACZwC,IAAGkF,GAAoC7H,SAAA,CACxC,IACG6a,SAGN/a,EAAAA,EAAAA,GAAC8H,EAAAA,IAAaga,WAAU,CAAA5hB,UACtBF,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,yGACZC,KAAK,OACL0W,KAAK,QACLzW,QAAUjB,IACRA,EAAEyiB,iBAAiB,EAErBC,SAAShiB,EAAAA,EAAAA,GAACiiB,EAAAA,GAAa,IAAI/hB,UAE3BF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,wBAzBsD6hB,EAAMU,aA+B9E,OAMXI,EAAmBnB,EAAOoB,QAAQf,GAAUA,EAAMG,mBAAmB1c,OAAS,IAC9Eud,EAAqBrB,EAAOoB,QAAQf,IAAWA,EAAMG,mBAAmB1c,SAC9E,OACE9E,EAAAA,EAAAA,IAAAsiB,EAAAA,GAAA,CAAAviB,SAAA,CACGsiB,EAAmBvd,OAASoc,EAAc,sBAAuBmB,GAAsB,KACvFA,EAAmBvd,QAAUqd,EAAiBrd,QAASjF,EAAAA,EAAAA,GAAC8H,EAAAA,IAAa4a,UAAS,IAAM,KACpFJ,EAAiBrd,OAASoc,EAAc,oBAAqBiB,GAAoB,OAGxF,CAEA,MAAMH,GAAiC/L,IACrC,MAAM,KAAEnU,EAAI,QAAE8Y,GAAY3E,EAC1B,OAAOiF,EAAAA,GAAoBC,yBAAyBrZ,EAAM8Y,EAAQ,EAGvD4H,GAAmCxY,IAUzC,IAV0C,QAC/C6G,EAAO,aACPkP,EAAY,QACZ5G,EAAO,gBACPhB,GAMDnO,EACC,MAAM,MAAE3H,IAAUC,EAAAA,EAAAA,KAEZmgB,GAA0BC,EAAAA,EAAAA,KAAa3kB,IAC3C4kB,EAAAA,EAAAA,SAAQ5kB,EAAMyV,SAASoP,uBAAuB/R,MAE1C4N,GAAmB3X,EAAAA,EAAAA,UACvB,IAAOqS,EAAU5I,EAAAA,EAAMsS,wBAAwB1J,GAASxP,KAAI4E,IAAA,IAAC,aAAE0I,GAAc1I,EAAA,OAAK0I,CAAY,IAAI,IAClG,CAACkC,IAGG6H,GAASla,EAAAA,EAAAA,UACb,KACE6b,EAAAA,EAAAA,SACElE,EAAiB9U,KAAKuL,IAAI,CACxBA,OACA6M,aAAc,GAAG5J,KAAmBjD,IACpCsM,oBACyB,OAAvBiB,QAAuB,IAAvBA,OAAuB,EAAvBA,EAAyBL,QAAO9T,IAAA,IAAC,OAAEuM,GAAQvM,EAAA,OAAKuM,IAAW,GAAG1C,KAAmBjD,GAAM,MAAK,QAE/FmM,IAAK,IAAAyB,EAAA,OAAKzK,UAAoC,QAA3ByK,EAAAzB,EAAMG,mBAAmB,UAAE,IAAAsB,OAAA,EAA3BA,EAA6BlI,UAAW,IAAK,GAAG,GACpE,SAEJ,CAAC6D,EAAkBgE,EAAyBtK,KAGvC4K,EAAyBC,IAA8Brd,EAAAA,EAAAA,UAAiD,MAE/G,GAAIqb,EAAOlc,OAAS,EAAG,CACrB,MAAMme,EAAmBjC,EAAOoB,QAAQf,GAAUA,EAAMG,mBAAmB1c,OAAS,IAEpF,OACE9E,EAAAA,EAAAA,IAAAsiB,EAAAA,GAAA,CAAAviB,SAAA,CACGgjB,IACCljB,EAAAA,EAAAA,GAACyT,EAAa,CACZzC,QAASA,EACTK,UAAW6R,EAAwBhB,aACnCnM,kBAAmBmN,EAAwB7N,KAC3C7U,UAAU,EACVuS,YAAY,EACZI,cAAY,EACZjD,aAAcA,IAAMiT,EAA2B,SAGnDhjB,EAAAA,EAAAA,IAAC2H,EAAAA,IAAaiH,KAAI,CAACsU,OAAO,EAAMnjB,SAAA,EAC9BF,EAAAA,EAAAA,GAAC0C,EAAAA,IAAa,CACZgF,UAAU,SACV9E,OACE5C,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,+DAEfoM,OAAQ,CAAEuX,gBAAiBF,EAAiBne,OAAQse,YAAapC,EAAOlc,UAE3E/E,UAEDF,EAAAA,EAAAA,GAAC8H,EAAAA,IAAakH,QAAO,CAACC,SAAO,EAAA/O,UAC3BF,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,0GACZC,KAAK,UACL0hB,SAAShiB,EAAAA,EAAAA,GAACwjB,EAAAA,IAAe,IAAItjB,UAE7BF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,0BAMvBK,EAAAA,EAAAA,GAAC8H,EAAAA,IAAaoH,QAAO,CAACC,MAAM,MAAKjP,UAC/BF,EAAAA,EAAAA,GAACkhB,GAA2B,CAC1BC,OAAQA,EACRC,gBAAiB+B,EACjBjD,aAAcA,EACdlP,QAASA,WAMrB,CAEA,MAAMyS,GAAc/B,EAAAA,EAAAA,OAAMP,GAE1B,IAAKsC,EACH,OAAO,KAGT,MAAMC,GAAyBhC,EAAAA,EAAAA,OAAM+B,EAAY9B,oBAEjD,OAAI+B,GAEA1jB,EAAAA,EAAAA,GAACwb,EAAAA,GAAI,CACHC,GAAI0G,GAA8BuB,GAClChI,OAAO,SACP7Y,KAAGC,EAAAA,EAAAA,IAAE,CAAEuM,WAAY7M,EAAM8B,QAAQC,IAAI,IAACrE,UAEtCF,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,0GACZ2hB,SAAShiB,EAAAA,EAAAA,GAACiiB,EAAAA,GAAa,IACvB3hB,KAAK,OAAMJ,SACZ,wBAOLF,EAAAA,EAAAA,GAACyT,EAAa,CACZjT,UAAU,EACVwQ,QAASA,EACTK,UAAWoS,EAAYvB,aACvBnM,kBAAmB0N,EAAYpO,KAC/BtC,YAAU,EACVC,WAAW,WACX,EC5PgF,IAAApP,GAAA,CAAA3B,KAAA,SAAA0B,OAAA,iBAM/E,MAAMggB,GAAgBtmB,IAsBtB,IAADumB,EAAA,IAtBwB,6BAC5BC,EAA4B,sBAC5BC,EAAwB,GAAE,WAC1BC,EAAU,eACVC,EAAc,QACd1K,EAAO,UACP2K,EAAS,QACTjT,EAAO,qBACPkT,EAAoB,qBACpBC,EAAoB,gBACpB7L,GAYDjb,EAoBC,MAAM+mB,EAAc,CAnBpB,WAAkC,IAADC,EAC/B,OAAOR,GAAgCC,GACrC9jB,EAAAA,EAAAA,GAACwb,EAAAA,GAAI,CAACC,GAAIkF,GAAAA,EAAO2D,+BAA+BR,GAAuB5jB,UACrEF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,oDAGfoM,OAAQ,CACNwY,eAAgBT,EAAsB7e,aAK5CjF,EAAAA,EAAAA,GAACwb,EAAAA,GAAI,CAACC,GAAIkF,GAAAA,EAAO6D,uBAA+C,QAAzBH,EAAW,OAAVN,QAAU,IAAVA,OAAU,EAAVA,EAAY7D,oBAAY,IAAAmE,EAAAA,EAAI,IAAK,eAAa,uBAAsBnkB,SACzG6jB,EAAW9hB,MAGlB,CAEqBwiB,IAErB,OACEtkB,EAAAA,EAAAA,IAAA,OAAK0C,IAAGe,GAAoB1D,SAAA,EAC1BC,EAAAA,EAAAA,IAACukB,GAAAA,EAAU,CACT9hB,OAAO5C,EAAAA,EAAAA,GAAA,QAAM,eAAa,cAAaE,SAAE8jB,IACzCI,YAAaA,EACblkB,SAAA,EAEAF,EAAAA,EAAAA,GAAC2kB,GAAAA,EAAY,CACX7d,KAAM,CACJ,CACEpH,GAAI,yBACJa,QAAS2jB,EACTU,UACE5kB,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SAACC,eAAe,eAGjCwkB,EACA,CACE,CACEzkB,GAAI,yBACJa,QAAS4jB,EACTS,UACE5kB,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SAACC,eAAe,aAIvC,OAIRK,EAAAA,EAAAA,GAAC2iB,GAAgC,CAC/B3R,QAASA,EACTkP,aAAsC,QAA1B0D,EAAY,OAAVG,QAAU,IAAVA,OAAU,EAAVA,EAAY7D,oBAAY,IAAA0D,EAAAA,EAAI,GAC1CtK,QAASA,EACThB,gBAAiBA,QAGrBtY,EAAAA,EAAAA,GAACigB,GAAiB,MACd,4EC3FV,MAAM4E,GAAmB,yCCgBlB,MAAMC,GAA0BznB,IAUhC,IAAD0nB,EAAA,IATJC,aAAa,cAAEC,GAAe,UAC9BC,EACAC,WAAW,UAAEC,GAAW,WACxBC,EAAU,KACVC,GAKDjoB,EACC,MAAMkoB,GAAuBC,EAAAA,GAAAA,IAAgCN,GAAaA,EAAUO,iBAAmBP,EAEvG,GACEI,IAASI,GAAAA,GAAsBC,6BAC/BH,EAAAA,GAAAA,IAAgCN,IAChCG,EAEA,OAAOrlB,EAAAA,EAAAA,GAAC4lB,GAAAA,EAA6B,CAACV,UAAWA,IAGnD,GAAyB,OAApBK,QAAoB,IAApBA,IAAAA,EAAsBM,aACzB,OAAO,KAGT,MAAM,UAAEC,EAAS,KAAEC,EAAI,MAAEzkB,GAAUikB,EAAqBM,aAElDG,GAAqC,OAAbf,QAAa,IAAbA,GAA0B,QAAbF,EAAbE,EAAgBG,UAAU,IAAAL,OAAb,EAAbA,EAA4B9f,QAAS,EAC7DghB,GAAiBC,EAAAA,GAAAA,IAAkBd,GACnCe,EAAmBH,GAAyBC,KAAmBG,EAAAA,EAAAA,aAAYN,GAC3EO,EAAcL,IAA0BC,KAAmBG,EAAAA,EAAAA,aAAYL,GAE7E,OACE5lB,EAAAA,EAAAA,IAAA,OAAAD,SAAA,CACGmmB,IACClmB,EAAAA,EAAAA,IAAA,OAAK0C,IAAKc,GAAO2iB,WAAWpmB,SAAA,EAC1BC,EAAAA,EAAAA,IAAA,UAAAD,SAAA,EACEF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SAACC,eAAe,SAA0E,OACnG,IACTomB,KAGJI,IACChmB,EAAAA,EAAAA,IAAA,OAAK0C,IAAKc,GAAO2iB,WAAWpmB,SAAA,EAC1BC,EAAAA,EAAAA,IAAA,UAAAD,SAAA,EACEF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,cAEf,OAEM,IACT+Q,EAAAA,EAAMuL,gBAAgB6J,MAG1BxkB,IACCnB,EAAAA,EAAAA,IAAA,OAAK0C,IAAKc,GAAO2iB,WAAWpmB,SAAA,EAC1BC,EAAAA,EAAAA,IAAA,UAAAD,SAAA,CAASklB,EAAU,OAAU,IAAE9jB,OAG/B,EAIJqC,GAAS,CACb2iB,WAAY,CACV1gB,SAAU,IACVpB,WAAY,SACZW,SAAU,SACVC,aAAc,qDCpEX,MAAMmhB,GAA4BlpB,IAOF,IAPG,QACxCmpB,EAAO,UACPpB,EAAS,eACTqB,EAAc,SACdC,EAAQ,OACRC,EAAM,OACNC,GAC+BvpB,EAC/B,MAAM,MAAEmF,IAAUC,EAAAA,EAAAA,KAEZokB,GAAgCC,EAAAA,EAAAA,OAEhC,WAAEC,EAAU,aAAEC,IAAiBC,EAAAA,GAAAA,IACnC,CAAE7B,aACFyB,EAAgCnB,GAAAA,GAAsBC,2BAA6BD,GAAAA,GAAsBwB,QAIrG/B,GAAYle,EAAAA,EAAAA,UAChB,SAAAkgB,EAAAC,EAAA,MAAM,CACJ,CACEC,KAAqB,QAAjBF,EAAEX,EAAQxV,eAAO,IAAAmW,EAAAA,EAAI,GACzBG,YAA4B,QAAjBF,EAAEZ,EAAQe,eAAO,IAAAH,EAAAA,EAAI,GAChCZ,UACAC,eAAgB,CAAE,CAACrB,GAAYqB,GAC/B1jB,MAAOP,EAAMQ,OAAOwkB,SAEvB,GACD,CAAChB,EAASC,EAAgBrB,EAAW5iB,IAGvC,OACExC,EAAAA,EAAAA,GAACynB,GAAAA,EAAmB,CAClBrC,UAAWA,EACXsC,SAAUvC,EACVwC,UAAUzB,EAAAA,GAAAA,IAAkBd,GAAawC,GAAAA,GAA6BC,KAAOD,GAAAA,GAA6BE,KAC1GC,uBAAuB,GACvBC,QAASjB,EACTkB,UAAWjB,EACXkB,oBAAoB,EACpBC,eAAgB,EAChBxB,OAAQA,EACRC,OAAQA,EACRF,SAAUA,GACV,kBChDC,MAAM0B,GAAgC/qB,IAAyE,IAAxE,QAAEmpB,EAAO,UAAEpB,EAAS,YAAEiD,GAA4ChrB,EAC9G,MAAM,MAAEmF,IAAUC,EAAAA,EAAAA,MACZ,WAAEskB,EAAU,aAAEC,IAAiBC,EAAAA,GAAAA,IAAqB,CAAE7B,cAGtDD,GAAYle,EAAAA,EAAAA,UAChB,SAAAkgB,EAAAC,EAAA,OACEiB,EACI,CACE,CACEhB,KAAqB,QAAjBF,EAAEX,EAAQxV,eAAO,IAAAmW,EAAAA,EAAI,GACzBG,YAA4B,QAAjBF,EAAEZ,EAAQe,eAAO,IAAAH,EAAAA,EAAI,GAChCZ,UACA8B,QAAS,CAAE,CAAClD,GAAYiD,GACxBtlB,MAAOP,EAAMQ,OAAOwkB,UAGxB,EAAE,GACR,CAAChB,EAAS6B,EAAajD,EAAW5iB,IAGpC,OACExC,EAAAA,EAAAA,GAACuoB,GAAAA,EAAkB,CACjBnD,UAAWA,EACXsC,SAAUvC,EACVxL,OAAQ,IACRqO,QAASjB,EACTkB,UAAWjB,EACXkB,oBAAoB,EACpBM,iBAAiB,EACjBC,kBAAkB,GAClB,0CCnCN,IAAA7kB,GAAA,CAAA3B,KAAA,UAAA0B,OAAA,eAAAoE,GAAA,CAAA9F,KAAA,SAAA0B,OAAA,UAAAwG,GAAA,CAAAlI,KAAA,SAAA0B,OAAA,iBAGO,MAAM+kB,GAA2BrrB,IAkBjC,IAlBkC,cACvCsrB,EAAa,UACbvD,EAAS,UACTwD,EAAS,YACTC,EAAW,SACXC,EAAQ,WACRC,EAAU,UACVC,EAAS,aACTC,GAAe,GAUhB5rB,EACC,MAAM,MAAEmF,IAAUC,EAAAA,EAAAA,KAElB,OACEtC,EAAAA,EAAAA,IAAA,OACE0C,KAAGC,EAAAA,EAAAA,IAAE,CACH2D,QAAS,OACT8G,IAAK/K,EAAM8B,QAAQC,GACnB8T,eAAgB,gBAChB6Q,aAAc1mB,EAAM8B,QAAQC,GAC5B+I,WAAY,UACb,IAACpN,SAAA,EAEFC,EAAAA,EAAAA,IAAA,OACE0C,KAAGC,EAAAA,EAAAA,IAAE,CACH2D,QAAS,OACT8G,IAAK/K,EAAM8B,QAAQC,GACnB+I,WAAY,SACZnI,SAAU,UACX,IAACjF,SAAA,EAEFF,EAAAA,EAAAA,GAACmpB,EAAAA,IAAQ,CACPtmB,IAAGe,GAGHkF,IAAK6f,KAEP3oB,EAAAA,EAAAA,GAAC0D,EAAAA,EAAW0lB,MAAK,CAACC,MAAO,EAAG5S,UAAQ,EAAC6S,gBAAc,EAAAppB,SAChDklB,QAGLplB,EAAAA,EAAAA,GAAA,OAAK6C,IAAGkF,KACPkhB,IACCjpB,EAAAA,EAAAA,GAACupB,EAAAA,EAAO,CACNC,OACExpB,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,gCAMvBQ,EAAAA,EAAAA,IAAC2H,EAAAA,IAAaiH,KAAI,CAACsU,OAAO,EAAMnjB,SAAA,EAC9BF,EAAAA,EAAAA,GAAC8H,EAAAA,IAAakH,QAAO,CAACC,SAAO,EAAA/O,UAC3BF,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,iGACZwC,IAAGsH,GACHhH,MAAMnD,EAAAA,EAAAA,GAACypB,EAAAA,IAAY,IACnBzS,KAAK,QACLpU,MAAM,qBAGVzC,EAAAA,EAAAA,IAAC2H,EAAAA,IAAaoH,QAAO,CAAAhP,SAAA,EACnBF,EAAAA,EAAAA,GAAC8H,EAAAA,IAAa8Z,KAAI,CAChBvhB,YAAY,iGACZG,UAAWooB,EACXroB,QAASuoB,EAAS5oB,UAElBF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,eAInBK,EAAAA,EAAAA,GAAC8H,EAAAA,IAAa8Z,KAAI,CAChBvhB,YAAY,iGACZG,UAAWqoB,EACXtoB,QAASwoB,EAAW7oB,UAEpBF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,wBAMnB,kBC1F6D,IAAAoI,GAAA,CAAA9F,KAAA,UAAA0B,OAAA,sEAAAwG,GAAA,CAAAlI,KAAA,SAAA0B,OAAA,gBA8ChE,MAAM+lB,GAAqBrsB,IAUF,IAADssB,EAAAC,EAAA,IAVI,UACjCxE,EAAS,QACToB,EAAO,aACPqD,EAAY,cACZC,EAAa,UACblB,EAAS,YACTC,EAAW,SACXC,EAAQ,WACRC,EAAU,oBACVgB,GACwB1sB,EACxB,MAAM,cAAEsrB,EAAa,eAAEqB,EAAc,cAAEC,EAAa,WAAEC,EAAU,OAAEC,IAAWC,EAAAA,GAAAA,GAAsB,CACjGP,eACAQ,QAASjF,EACTkF,OAAQR,IAGJS,GAAgBtjB,EAAAA,EAAAA,UAAQ,KAAMujB,EAAAA,EAAAA,SAAQ,CAAChE,EAAQxV,WAAW,CAACwV,IAC3DiE,GAAaxjB,EAAAA,EAAAA,UAAQ,IAAM,CAACme,IAAY,CAACA,KACxCuB,EAAQ+D,IAAY5kB,EAAAA,EAAAA,eAAyDZ,IAC9E,MAAE1C,IAAUC,EAAAA,EAAAA,MAEXkoB,EAAWC,IAAgB9kB,EAAAA,EAAAA,eAAuCZ,GAEnE2lB,GAA0BhI,EAAAA,EAAAA,KAC7B3kB,IAAiB,IAAA4sB,EAAA3D,EAAA,OAAkE,QAAlE2D,EAAK5sB,EAAMyV,SAASoX,wBAAuC,QAAhB5D,EAACX,EAAQxV,eAAO,IAAAmW,EAAAA,EAAI,WAAG,IAAA2D,OAAA,EAA7DA,EAAgE1F,EAAU,KAG7F,WAAE4F,EAAU,aAAEC,IAAiBC,EAAAA,GAAAA,MAE/B,UAAE7e,EAAS,aAAE4c,EAAY,iBAAEkC,EAAgB,QAAEC,IAAYC,EAAAA,GAAAA,GAAwB,CACrFC,SAAUf,EACVE,aACAc,QAASN,EACTO,MAAOb,EACPc,WAAY,OAGR,eAAEhF,EAAc,MAAEhoB,IAAiD,QAAvCkrB,EAAAwB,EAAgC,QAAhBvB,EAACpD,EAAQxV,eAAO,IAAA4Y,EAAAA,EAAI,WAAG,IAAAD,OAAA,EAAvCA,EAA0CvE,KAAc,CAAC,EAErFsG,GAAuBrf,GAAwC,KAAb,OAAdoa,QAAc,IAAdA,OAAc,EAAdA,EAAgBxhB,QAEpD0mB,EAAmBC,GACvBhB,GAAcpf,IACRe,EAAAA,EAAAA,SAAQf,EAASogB,GACZpgB,EAEFogB,KAGL,eAAEC,IAAmB5E,EAAAA,GAAAA,IAAqB,CAAE7B,eAElD0G,EAAAA,EAAAA,YAAU,KACJzf,GACFwf,GACF,GACC,CAACA,EAAgBxf,KAGpByf,EAAAA,EAAAA,YAAU,IACJb,EACKlB,EAAoBgC,yBAAwB,KACjDX,GAAS,IAGN,QACN,CAACrB,EAAqBqB,EAASH,IAElC,MAAMrE,GAASte,EAAAA,EAAAA,aAAqCpD,GAE9C8mB,EAAqBpoB,IAAmC,IAADqoB,EAAAC,EAAAC,EAAAC,EAAA,IAAjC,OAAEC,GAA0BzoB,GAEtB,KAAhB,QAAZqoB,EAAAI,EAAOC,aAAK,IAAAL,OAAA,EAAZA,EAAcM,aAChB7B,OAASxlB,GACTymB,OAAgBzmB,IAGlB,MAAMsnB,EAAwB,QAAfN,EAAGG,EAAOI,aAAK,IAAAP,OAAA,EAAZA,EAAcV,MAIhC,GAHA5E,EAAOpb,QAAUghB,EAAY,IAAKA,QAAkCtnB,GAGpC,KAAhB,QAAZinB,EAAAE,EAAOC,aAAK,IAAAH,OAAA,EAAZA,EAAcI,YAAmC,QAAhBH,EAAIC,EAAOC,aAAK,IAAAF,GAAZA,EAAcZ,MAGrD,GAFAd,EAAS,IAAK2B,EAAOC,MAAMd,SAEvBtF,EAAAA,GAAAA,IAAkBd,GACpBuG,GAAgBe,EAAAA,GAAAA,GAA0B7B,EAAyBwB,EAAOC,MAAMd,YAC3E,CAAC,IAADmB,EAAAC,EAEL,MAAMC,EAAaC,KAAKC,MAAkB,QAAbJ,EAACN,EAAOC,aAAK,IAAAK,OAAA,EAAZA,EAAcnB,MAAM,IAC5CwB,EAAaF,KAAKG,KAAiB,QAAbL,EAACP,EAAOC,aAAK,IAAAM,OAAA,EAAZA,EAAcpB,MAAM,IACjDG,EAAgBkB,GAAcG,EAAa,CAACH,EAAa,EAAGG,EAAa,QAAK9nB,EAChF,CACF,GAEI,aAAE8hB,IAAiBC,EAAAA,GAAAA,IAAqB,CAAE7B,cA6ChD,OACEjlB,EAAAA,EAAAA,IAAA,OACE+sB,KAAK,SACLpkB,IAAMqkB,IAEU,OAAdnD,QAAc,IAAdA,GAAAA,EAAiBmD,GACJ,OAAblD,QAAa,IAAbA,GAAAA,EAAgBkD,EAAQ,EAE1BtqB,KAAGC,EAAAA,EAAAA,IAAE,CACHsqB,OAAQ,aAAa5qB,EAAMQ,OAAOgX,mBAClCqT,aAAc7qB,EAAM8qB,QAAQC,iBAC5BpV,QAAS3V,EAAM8B,QAAQvC,GACvByrB,WAAYhrB,EAAMQ,OAAOoB,kBACzBzB,SAAU,WACVwC,SAAU,UACX,IAACjF,SAAA,EAEFC,EAAAA,EAAAA,IAAA,OAAK2I,IAAKkiB,EAAYyC,aAAczG,EAAa9mB,SAAA,EAC/CF,EAAAA,EAAAA,GAAC0oB,GAAwB,CACvBG,YAAaA,EACbD,UAAWA,EACXD,cAAeA,EACfvD,UAAWA,EACX2D,WAAYA,EACZD,SAAUA,EACVE,UAAWoC,EACXnC,aAAcA,KAEhBjpB,EAAAA,EAAAA,GAAA,OAAK6C,IAAGsH,GAAkBjK,SAvEXwtB,MACP,IAADC,EAAX,OAAIlvB,GAEAuB,EAAAA,EAAAA,GAAA,OAAK6C,IAAGkF,GAAsF7H,UAC5FF,EAAAA,EAAAA,GAACqc,EAAAA,IAAK,CACJC,OAAOtc,EAAAA,EAAAA,GAAC4tB,EAAAA,EAAW,IACnBxrB,YAAa3D,aAAiBwN,GAAAA,EAAexN,EAAMc,kBAAyB,OAALd,QAAK,IAALA,GAAc,QAATkvB,EAALlvB,EAAOlB,eAAO,IAAAowB,OAAT,EAALA,EAAgBxQ,WACvFva,OACE5C,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,wCAQvB0M,IAAcoa,GACTzmB,EAAAA,EAAAA,GAAC6tB,EAAAA,IAAc,IAEnB5C,EAGDS,GAEA1rB,EAAAA,EAAAA,GAACooB,GAA6B,CAAChD,UAAWA,EAAWiD,aAAa3G,EAAAA,EAAAA,OAAM+E,GAAiBD,QAASA,KAIpGxmB,EAAAA,EAAAA,GAACumB,GAAyB,CACxBnB,UAAWA,EACXqB,eAAgBA,EAChBD,QAASA,EACTE,SAAUsF,EAIVrF,OAAQA,EACRC,OAAQA,EAAOpb,UAjBV,IAkBL,EAgC4BkiB,QAE7BxD,IAEClqB,EAAAA,EAAAA,GAAA,OACE6C,KAAGC,EAAAA,EAAAA,IAAE,CACHH,SAAU,WACVmrB,MAAO,EACP3pB,gBAAiB3B,EAAMurB,WAAavrB,EAAMQ,OAAOgrB,QAAUxrB,EAAMQ,OAAOirB,SACzE,MAGJ9D,IAECnqB,EAAAA,EAAAA,GAAA,OACE6C,KAAGC,EAAAA,EAAAA,IAAE,CACHH,SAAU,WACVmrB,MAAO,EACP3pB,gBAAiB3B,EAAMurB,WAAavrB,EAAMQ,OAAOgrB,QAAUxrB,EAAMQ,OAAOirB,QACxEb,OAAQ,cAAc5qB,EAAMQ,OAAOkrB,UACnCC,QAAS,KACV,QAGD,ECzPH,MAAMC,GAAoBpwB,WAAAA,GAAA,KACvBqwB,iBAAmC,EAAG,CACvCtC,uBAAAA,CAAwBuC,GAE7B,OADAlwB,KAAKiwB,iBAAiBE,KAAKD,GACpB,KACLlwB,KAAKiwB,iBAAmBjwB,KAAKiwB,iBAAiB9L,QAAQtN,GAAMA,IAAMqZ,GAAG,CAEzE,CACOE,gBAAAA,GACLpwB,KAAKiwB,iBAAiBnV,SAASoV,GAAOA,KACxC,ECUF,MAAM,wBAAEG,GAAuB,uBAAEC,KAA2BC,EAAAA,GAAAA,IAAe,CACzEF,wBAAyB,CAAA/uB,GAAA,SACvBC,eAAe,8BAGjB+uB,uBAAwB,CAAAhvB,GAAA,SACtBC,eAAe,+BAKbivB,GAAuBA,KAC3B5uB,EAAAA,EAAAA,GAACqc,EAAAA,IAAK,CACJzZ,MAAM,0BACNR,YAAY,6FAIVysB,GAA0BxxB,IAAA,IAAC,MAAEmsB,GAAmCnsB,EAAA,OAAK2C,EAAAA,EAAAA,GAACqc,EAAAA,IAAK,CAACzZ,MAAO4mB,EAAOpnB,YAAa,MAAQ,EAE/G0sB,GAAyBA,CAACvM,EAAgB6C,IAC9CA,EAAUpe,cAAc+nB,WAAWxM,EAAOvb,iBAC1CgoB,EAAAA,GAAAA,IAAwB5J,GAAWpe,cAAc+nB,WAAWxM,EAAOvb,eAK/DioB,GAA6BrrB,IAY5B,IAZ6B,WAClC6mB,EAAU,OACVyE,EAAM,QACN1I,EAAO,oBACPuD,EAAmB,eACnBoF,GAODvrB,EACC,MAAM,MAAEpB,IAAUC,EAAAA,EAAAA,KAEZ2sB,EAAqB3E,EAAWlI,QAAQ6C,GAAc0J,GAAuBI,EAAQ9J,MAErF,YAAEyD,EAAW,UAAED,EAAS,cAAEyG,EAAa,YAAEC,GP7DNC,EACzC9E,EACA+E,KAaO,CAAE3G,YAVYzD,GAAsBA,KAAcvD,EAAAA,EAAAA,MAAK4I,GAUxC7B,UAXHxD,GAAsBA,KAAc1D,EAAAA,EAAAA,OAAM+I,GAW5B4E,cALVjK,IACrB,MAAMqK,EAAOhF,GAAWiF,EAAAA,EAAAA,SAAQjF,EAAYrF,GAAa,GACzDoK,EAAUpK,EAAWqK,EAAK,EAGoBH,YAT3BlK,IACnB,MAAMuK,EAAWlF,GAAWiF,EAAAA,EAAAA,SAAQjF,EAAYrF,GAAa,GAC7DoK,EAAUpK,EAAWuK,EAAS,IOqD+BJ,CAC7DH,EACAD,GAGIS,GAAY3oB,EAAAA,EAAAA,UAChB,UACK4oB,EAAAA,GAAAA,GAAmB,CACpBC,WAAY,EACZviB,IAAK/K,EAAM8B,QAAQyrB,GACnBC,sBAAuB,CAAC,CAAEC,gBAAiB,KAASC,4BAA6B,QAEnF/qB,SAAU,YAEZ,CAAC3C,IAGH,OAAO4sB,EAAmBnqB,QACxBjF,EAAAA,EAAAA,GAAA,OAAK6C,IAAK+sB,EAAU1vB,SACjBkvB,EAAmBtlB,KAAI,CAACsb,EAAW+K,KAClCnwB,EAAAA,EAAAA,GAAC0pB,GAEC,CAEAG,aAAa,eACbzE,UAAWA,EACXoB,QAASA,EACTsD,cAAeqF,EACfvG,UAAWA,EAAUxD,GACrByD,YAAaA,EAAYzD,GACzB2D,WAAYA,IAAMsG,EAAcjK,GAChC0D,SAAUA,IAAMwG,EAAYlK,GAC5B2E,oBAAqBA,GAThB,GAAG3E,KAAa+K,UAc3BnwB,EAAAA,EAAAA,GAAC4uB,GAAoB,GACtB,EAGH,IAAAwB,GAAA,CAAAnuB,KAAA,UAAA0B,OAAA,6CAAA0sB,GAAA,CAAApuB,KAAA,SAAA0B,OAAA,iBAAA2sB,GAAA,CAAAruB,KAAA,UAAA0B,OAAA,wBAGO,MAAM4sB,GAAsBxoB,IAW5B,IAAD6hB,EAAA,IAX8B,QAClCpD,EAAO,WACPiE,EAAU,KACVnF,GAQDvd,EACC,MAAMgiB,EDxG8ByG,MACpC,MAAOC,IAAkB3qB,EAAAA,EAAAA,WAAS,IAAM,IAAIsoB,KAC5C,OAAOqC,CAAc,ECsGOD,GAEtBvL,GAAgBpC,EAAAA,EAAAA,KAAY1Y,IAA+B,IAADgd,EAAA,IAA7B,SAAExT,GAAsBxJ,EACzD,OAAOumB,EAAAA,EAAAA,WAAU/c,EAASoX,wBAAuC,QAAhB5D,EAACX,EAAQxV,eAAO,IAAAmW,EAAAA,EAAI,KAAMwJ,IAClEnG,EAAAA,EAAAA,UACLze,EAAAA,EAAAA,QAAO4kB,GACJ7mB,KAAI4E,IAAA,IAAC,eAAE+X,GAAgB/X,EAAA,OAAK+X,CAAc,IAC1CmK,SAEL,KAGG1B,EAAQ2B,IAAa/qB,EAAAA,EAAAA,UAAS,KAC/B,cAAErG,IAAkBoG,EAAAA,GAAAA,MAEpB,kBAAEirB,EAAiB,eAAE3B,GPlHG4B,EAACtG,EAAsBuG,EAA0BC,KAC/E,MAAMC,GAAoB5oB,EAAAA,EAAAA,QAAO6oB,GAAAA,EAAkBC,qBAAqBJ,EAAkBC,KAEnFI,EAAcC,IAAmBxrB,EAAAA,EAAAA,WAA+B,KACrE,IACE,MAAMyrB,EAAaL,EAAkB1lB,QAAQgmB,QAAQ3M,IACrD,GAAI0M,EAAY,OAAOnU,KAAKqU,MAAMF,EACpC,CAAE,MACA,MACF,CACgB,IAiClB,MAAO,CAAET,mBARiB7pB,EAAAA,EAAAA,UACxB,KACE6b,EAAAA,EAAAA,SAAQ2H,GAAaxkB,GACP,OAAZorB,QAAY,IAAZA,GAAAA,EAAc5nB,SAASxD,IAAOypB,EAAAA,EAAAA,SAAQ2B,EAAcprB,GAAOyrB,OAAOC,oBAEtE,CAACN,EAAc5G,IAGW0E,eA9BLA,CAIrByC,EAIAC,KAEA,MAAMC,EAAcT,EAAe,IAAIA,GAAgB,IAAI5G,GACrDsH,GAAcrC,EAAAA,EAAAA,SAAQoC,EAAaF,GACnCI,GAActC,EAAAA,EAAAA,SAAQoC,EAAaD,IAGxCC,EAAYC,GAAcD,EAAYE,IAAgB,CAACF,EAAYE,GAAcF,EAAYC,IAG9FT,EAAgBQ,GAChBZ,EAAkB1lB,QAAQymB,QAAQpN,GAAkBzH,KAAKC,UAAUyU,GAAa,EAWtC,EOuEEf,CAAiBtG,EAAY,UAAYnF,EAAqB,QAAjBsE,EAAEpD,EAAQxV,eAAO,IAAA4Y,EAAAA,EAAI,IAE1GsI,GAAqBzH,EAAWxlB,OAChCktB,GACHD,IAAsBzH,EAAW2H,MAAMhN,GAAc0J,GAAuBI,EAAQ9J,KACjFiN,GAAkBH,GAClB,MAAE1vB,IAAUC,EAAAA,EAAAA,KACZ6vB,GAAcJ,IAAsBC,EAEpCI,GAAiBtrB,EAAAA,EAAAA,UAAQ,MAASuf,UAASvB,mBAAkB,CAACuB,EAASvB,IAEvEuN,GAAmB3P,EAAAA,EAAAA,KAAa4P,IAAuB,IAADC,EAC1D,OAAO3mB,EAAAA,EAAAA,QAAO0mB,EAAM9e,SAASoX,wBAAuC,QAAhB2H,EAAClM,EAAQxV,eAAO,IAAA0hB,EAAAA,EAAI,KAAKN,MAAMzB,IACjF5kB,EAAAA,EAAAA,QAAO4kB,GAAgByB,MAAK3jB,IAAA,IAAC,WAAEkkB,GAAYlkB,EAAA,OAAKkkB,CAAU,KAC3D,IAGH,OACE3yB,EAAAA,EAAAA,GAAC4yB,GAAAA,EAAmB,CAAA1yB,UAClBC,EAAAA,EAAAA,IAAA,OAAK0C,IAAGutB,GAAwDlwB,SAAA,EAC9DC,EAAAA,EAAAA,IAAA,OAAK0C,IAAGwtB,GAAoBnwB,SAAA,CACzBmyB,IACClyB,EAAAA,EAAAA,IAAA,OAAK0C,KAAGC,EAAAA,EAAAA,IAAE,CAAE2D,QAAS,OAAQ8G,IAAK/K,EAAM8B,QAAQC,IAAI,IAACrE,SAAA,EACnDF,EAAAA,EAAAA,GAACiO,GAAAA,EAAK,CACJ5N,YAAY,6FACZ6sB,KAAK,YACL2F,QAAQ7yB,EAAAA,EAAAA,GAAC8yB,EAAAA,IAAU,IACnBxxB,MAAO4tB,EACPrmB,YAAU,EACVjH,SAAWtC,GAAMuxB,EAAUvxB,EAAEoc,OAAOpa,OACpC4H,YAAazJ,EAAc,CAAAC,GAAA,SACzBC,eAAe,4BAInBK,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,6FACZ8C,KACEqvB,GAAmBxyB,EAAAA,EAAAA,GAACupB,EAAAA,EAAO,CAACvS,KAAK,QAAQnU,KAAGC,EAAAA,EAAAA,IAAE,CAAE8E,YAAapF,EAAM8B,QAAQC,IAAI,OAAOvE,EAAAA,EAAAA,GAAC+yB,EAAAA,IAAW,IAEpGxyB,QAASA,KACFiyB,GACHzI,EAAoByE,kBACtB,EACAtuB,UAEFF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,kBAMvBK,EAAAA,EAAAA,GAACgzB,EAAAA,EAAM,OAERd,IACClyB,EAAAA,EAAAA,GAAC6uB,GAAuB,CACtBrF,OAAOxpB,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,IAAe,UAAT0kB,EAAmBoJ,GAAyBD,OAG7E0D,IAAyBnyB,EAAAA,EAAAA,GAAC4uB,GAAoB,KAE/C5uB,EAAAA,EAAAA,GAAA,OAAK6C,IAAGytB,GAAgCpwB,UACtCF,EAAAA,EAAAA,GAACizB,GAAAA,EAAwB,CAACjO,YAAauN,EAAgBW,UAAWpO,GAAyBqO,WAAS,EAAAjzB,SACjGoyB,IACCtyB,EAAAA,EAAAA,GAACivB,GAA0B,CACzBxE,WAAYqG,EACZtK,QAASA,EACT0I,OAAQA,EACRC,eAAgBA,EAChBpF,oBAAqBA,QAItB,QAEW,8BChNnB,MAAMqJ,GAAmB/1B,IAA+E,IAA9E,OAAE6d,GAAsE7d,EACvG,MAAM,MAAEmF,IAAUC,EAAAA,EAAAA,KAqElB,OACEtC,EAAAA,EAAAA,IAACqG,EAAAA,IAAG,CACFnG,YAAY,kGACZwC,KAAGC,EAAAA,EAAAA,IAAE,CAAEqB,gBAtEM,aAAX+W,EACK1Y,EAAMurB,WAAavrB,EAAMQ,OAAOqwB,SAAW7wB,EAAMQ,OAAOswB,SAElD,WAAXpY,GAAkC,WAAXA,EAClB1Y,EAAMurB,WAAavrB,EAAMQ,OAAOuwB,OAAS/wB,EAAMQ,OAAOwwB,OAEhD,cAAXtY,GAAqC,YAAXA,EACrB1Y,EAAMurB,WAAavrB,EAAMQ,OAAOgrB,QAAUxrB,EAAMQ,OAAOirB,aADhE,GAgEyC,IAAC/tB,SAAA,CAEvCgb,IAAUlb,EAAAA,EAAAA,GAACyzB,GAAAA,EAAa,CAACvY,OAAQA,IAAY,KAC9Clb,EAAAA,EAAAA,GAAC0D,EAAAA,EAAWgD,KAAI,CAAC7D,KAAGC,EAAAA,EAAAA,IAAE,CAAEuM,WAAY7M,EAAM8B,QAAQC,IAAI,IAACrE,SA3D1C,aAAXgb,GAEAlb,EAAAA,EAAAA,GAAC0D,EAAAA,EAAWgD,KAAI,CAAC3D,MAAM,UAAS7C,UAC9BF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,eAMR,WAAXub,GAEAlb,EAAAA,EAAAA,GAAC0D,EAAAA,EAAWgD,KAAI,CAAC3D,MAAM,QAAO7C,UAC5BF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,aAMR,WAAXub,GAEAlb,EAAAA,EAAAA,GAAC0D,EAAAA,EAAWgD,KAAI,CAAC3D,MAAM,QAAO7C,UAC5BF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,aAMR,YAAXub,GAEAlb,EAAAA,EAAAA,GAAC0D,EAAAA,EAAWgD,KAAI,CAAC3D,MAAM,OAAM7C,UAC3BF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,cAMR,cAAXub,GAEAlb,EAAAA,EAAAA,GAAC0D,EAAAA,EAAWgD,KAAI,CAAC3D,MAAM,OAAM7C,UAC3BF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,gBAMhBub,MAUD,EChFGwY,GAAqBr2B,IAM3B,IAADs2B,EAAA,IAN6B,QACjCnN,EAAO,KACPvc,GAID5M,EACC,MAAMu2B,EAAOljB,EAAAA,EAAMmjB,QAAQrN,EAASvc,GACpC,OAAOjK,EAAAA,EAAAA,GAACwb,EAAAA,GAAI,CAACC,GAAIkF,GAAAA,EAAOmT,iBAAsC,QAAtBH,EAAQ,OAAPnN,QAAO,IAAPA,OAAO,EAAPA,EAAStG,oBAAY,IAAAyT,EAAAA,EAAI,GAAIC,GAAM1zB,SAAE0zB,GAAY,6BCXrF,MAAMG,GAAwB12B,IAAmC,IAAlC,MAAEiE,GAA0BjE,EAChE,MAAM22B,GAAsB/sB,EAAAA,EAAAA,UAAQ,KAGlC,IACE,MAAMgtB,EAAa7W,KAAKqU,MAAMnwB,GAC9B,OAAO8b,KAAKC,UAAU4W,EAAY,KAAM,EAC1C,CAAE,MAAO30B,GACP,OAAO,IACT,IACC,CAACgC,IACJ,OACEtB,EAAAA,EAAAA,GAAA,OACE6C,KAAGC,EAAAA,EAAAA,IAAE,CACH0B,WAAY,WACZC,UAAW,aACXyvB,WAAYF,EAAsB,iBAAc9uB,GACjD,IAAChF,SAED8zB,GAAuB1yB,GACpB,ECHkF,IAAAyG,GAAA,CAAA9F,KAAA,SAAA0B,OAAA,iBAS5F,MAAMwwB,GAA2B92B,IAY1B,IAZ2B,KAChC4E,EAAI,MACJX,EAAK,eACL8yB,EAAc,WACdC,EAAU,qBACVC,GAODj3B,EACC,MAAM,MAAEmF,IAAUC,EAAAA,EAAAA,KACZ8xB,GAAUjsB,EAAAA,EAAAA,QAAuB,OAChCksB,EAAeC,IAAoB3uB,EAAAA,EAAAA,WAAS,GAyCnD,OAvCAgmB,EAAAA,EAAAA,YAAU,KACJwI,EAAqBryB,IAGrBuyB,IACFJ,IACAE,EAAqBryB,IAAQ,EAC/B,GACC,CAACqyB,EAAsBE,EAAevyB,EAAMmyB,KAG/CtI,EAAAA,EAAAA,YAAU,KACR,IAAKyI,EAAQ/oB,QAAS,OAEtB,MAAMkpB,GAAiDC,EAAAA,EAAAA,WACrD/wB,IAAc,IAAZgxB,GAAMhxB,EACN,MAAM4wB,EAAgBI,EAAMlZ,OAAOmZ,aAAeD,EAAMlZ,OAAOoZ,aAC/DL,EAAiBD,EAAc,GAEjC,IACA,CAAEO,UAAU,IAGRC,EAAiB,IAAIC,eAAeP,GAE1C,OADAM,EAAeE,QAAQX,EAAQ/oB,SACxB,IAAMwpB,EAAeG,YAAY,GACvC,CAACZ,EAASH,KAGbtI,EAAAA,EAAAA,YAAU,KACR,GAAKyI,EAAQ/oB,UACR6oB,EAAY,CACOE,EAAQ/oB,QAAQqpB,aAAeN,EAAQ/oB,QAAQspB,cAEnEL,GAAiB,EAErB,IACC,CAACJ,KAGFl0B,EAAAA,EAAAA,IAAA,OAAK0C,KAAGC,EAAAA,EAAAA,IAAE,CAAE2D,QAAS,OAAQ8G,IAAK/K,EAAM8B,QAAQ8J,IAAI,IAAClO,SAAA,EACjDs0B,GAAiBH,KACjBr0B,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,oGACZ2W,KAAK,QACL7T,KAAMkxB,GAAar0B,EAAAA,EAAAA,GAACwjB,EAAAA,IAAe,KAAMxjB,EAAAA,EAAAA,GAACo1B,EAAAA,EAAgB,IAC1D70B,QAASA,IAAM6zB,IACfvxB,IAAGkF,MAGP/H,EAAAA,EAAAA,GAAA,OACE4C,MAAOtB,EACPuB,KAAGC,EAAAA,EAAAA,IAAE,CACHqC,SAAU,SACVC,aAAc,WACdqB,QAAS,cACT,qBAAsB,WACtB,qBAAsB4tB,OAAanvB,EAAY,KAChD,IACD4D,IAAKyrB,EAAQr0B,SAEZm0B,GAAar0B,EAAAA,EAAAA,GAAC+zB,GAAqB,CAACzyB,MAAOA,IAAYA,MAEtD,EAIV,IAAA8uB,GAAA,CAAAnuB,KAAA,UAAA0B,OAAA,iEAAA0sB,GAAA,CAAApuB,KAAA,SAAA0B,OAAA,6DAGO,MAAM0xB,GAA6BlrB,IAA6D,IAA5D,OAAEmrB,GAAoDnrB,EAC/F,MAAM,MAAE3H,IAAUC,EAAAA,EAAAA,KACZjD,GAAOqG,EAAAA,GAAAA,MACN0c,EAAQgT,IAAazvB,EAAAA,EAAAA,UAAS,IAC/BwuB,GAAuBhsB,EAAAA,EAAAA,QAAgC,CAAC,GAExDktB,GAAevuB,EAAAA,EAAAA,UAAQ,KAAM8E,EAAAA,EAAAA,QAAOupB,IAAS,CAACA,IAE9CG,GAAaxuB,EAAAA,EAAAA,UACjB,IACEuuB,EAAajT,QAAO7T,IAAqB,IAApB,IAAEzI,EAAG,MAAE3E,GAAOoN,EACjC,MAAMgnB,EAAcnT,EAAOvb,cAC3B,OAAOf,EAAIe,cAAcyC,SAASisB,IAAgBp0B,EAAM0F,cAAcyC,SAASisB,EAAY,KAE/F,CAACnT,EAAQiT,IAGLG,GAAU1uB,EAAAA,EAAAA,UACd,IAAM,CACJ,CACEvH,GAAI,MACJk2B,YAAa,MACbC,OAAQA,KACN71B,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,cAInBm2B,gBAAgB,EAChB9e,KAAM,KAER,CACEtX,GAAI,QACJm2B,OAAQA,KACN71B,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,UAInBi2B,YAAa,QACbE,gBAAgB,EAChBC,KAAM,CAAEpyB,OAAQ,CAAEqyB,YAAa,IAC/BC,KAAMxnB,IAAA,IAAGynB,KAAK,SAAEC,EAAQ,cAAEC,EAAa,eAAEhC,IAAkB3lB,EAAA,OACzDzO,EAAAA,EAAAA,GAACm0B,GAAwB,CACvBlyB,KAAMk0B,EAASlwB,IACf3E,MAAO60B,EAAS70B,MAChB+yB,WAAY+B,IACZhC,eAAgBA,EAChBE,qBAAsBA,EAAqB9oB,SAC3C,KAIR,IAGI6qB,GAAQC,EAAAA,GAAAA,IAAc,CAC1BhvB,KAAMmuB,EACNc,iBAAiBA,EAAAA,GAAAA,MACjBC,qBAAqBA,EAAAA,GAAAA,MACrBC,SAAWP,GAAQA,EAAIjwB,IACvBywB,sBAAsB,EACtBC,iBAAkB,WAClBhB,YA8FF,OACEx1B,EAAAA,EAAAA,IAAA,OAAK0C,IAAGwtB,GAA4EnwB,SAAA,EAClFF,EAAAA,EAAAA,GAAC0D,EAAAA,EAAW0lB,MAAK,CAACC,MAAO,EAAEnpB,UACzBF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,wBAEfoM,OAAQ,CAAE9G,OAAQwwB,EAAWxwB,aAGjCjF,EAAAA,EAAAA,GAAA,OACE6C,KAAGC,EAAAA,EAAAA,IAAE,CACHqV,QAAS3V,EAAM8B,QAAQC,GACvB6oB,OAAQ,aAAa5qB,EAAMQ,OAAOgX,mBAClCqT,aAAc7qB,EAAM8qB,QAAQC,iBAC5B9f,KAAM,EACNhH,QAAS,OACT2R,cAAe,SACfjT,SAAU,UACX,IAACjF,SA7GmB02B,MACzB,IAAKpB,EAAavwB,OAChB,OACEjF,EAAAA,EAAAA,GAAA,OAAK6C,IAAGutB,GAAiFlwB,UACvFF,EAAAA,EAAAA,GAACqc,EAAAA,IAAK,CACJja,aACEpC,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,+BAS3B,MAAMk3B,EAAwBpB,EAAWxwB,OAAS,EAElD,OACE9E,EAAAA,EAAAA,IAAAsiB,EAAAA,GAAA,CAAAviB,SAAA,EACEF,EAAAA,EAAAA,GAAA,OAAK6C,KAAGC,EAAAA,EAAAA,IAAE,CAAEomB,aAAc1mB,EAAM8B,QAAQC,IAAI,IAACrE,UAC3CF,EAAAA,EAAAA,GAACiO,GAAAA,EAAK,CACJ5N,YAAY,qGACZwyB,QAAQ7yB,EAAAA,EAAAA,GAAC8yB,EAAAA,IAAU,IACnB5pB,YAAa1J,EAAKC,cAAc,CAAAC,GAAA,SAC9BC,eAAe,sBAGjB2B,MAAOihB,EACP3gB,SAAWtC,GAAMi2B,EAAUj2B,EAAEoc,OAAOpa,OACpCuH,YAAU,OAGd1I,EAAAA,EAAAA,IAAC22B,EAAAA,IAAK,CACJC,YAAU,EACVC,MACEH,GACE72B,EAAAA,EAAAA,GAAA,OAAK6C,KAAGC,EAAAA,EAAAA,IAAE,CAAEuB,UAA8B,EAAnB7B,EAAM8B,QAAQvC,IAAQ,IAAC7B,UAC5CF,EAAAA,EAAAA,GAACqc,EAAAA,IAAK,CACJja,aACEpC,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,8CAMrB,KACLO,SAAA,EAEDF,EAAAA,EAAAA,GAACi3B,EAAAA,IAAQ,CAACC,UAAQ,EAAAh3B,SACfm2B,EAAMc,iBAAiBrtB,KAAI,CAAC+rB,EAAQ1F,KACnCnwB,EAAAA,EAAAA,GAACo3B,EAAAA,IAAW,CACV/2B,YAAY,qGAEZg3B,UAAWxB,EAAOyB,OAAOC,eACzBC,cAAe3B,EAAO4B,mBACtBC,WAAY7B,EAAOyB,OAAOK,gBAC1B90B,KAAGC,EAAAA,EAAAA,IAAE,CACH80B,SAAU/B,EAAOyB,OAAOC,eAAiB,EAAI,GAC9C,IACDhwB,MAAO,CACLswB,UAAWhC,EAAOyB,OAAOC,eAAiB1B,EAAOyB,OAAOQ,eAAY5yB,GACpEhF,UAED63B,EAAAA,GAAAA,IAAWlC,EAAOyB,OAAOU,UAAUnC,OAAQA,EAAOoC,eAX9CpC,EAAOn2B,QAejB22B,EAAM6B,cAAcC,KAAKruB,KAAKosB,IAC7Bl2B,EAAAA,EAAAA,GAACi3B,EAAAA,IAAQ,CAAA/2B,SACNg2B,EAAIkC,cAActuB,KAAKmsB,IAAI,IAAAoC,EAAA,OAC1Br4B,EAAAA,EAAAA,GAACs4B,EAAAA,IAAS,CAERz1B,IAAoD,QAAjDw1B,EAAGpC,EAAKqB,OAAOU,UAA8BjC,YAAI,IAAAsC,OAAA,EAA/CA,EAAiD10B,OACtD4D,MAAO,CACLqwB,SAAU3B,EAAKqB,OAAOC,eAAiB,EAAI,EAC3CM,UAAW5B,EAAKqB,OAAOC,eAAiBtB,EAAKqB,OAAOQ,eAAY5yB,GAElEqzB,WAAS,EAAAr4B,UAER63B,EAAAA,GAAAA,IAAW9B,EAAKqB,OAAOU,UAAU/B,KAAMA,EAAKgC,eARxChC,EAAKv2B,GASA,KAZDw2B,EAAIx2B,WAiBtB,EAwBAk3B,OAEC,EClRV,MAAM,mBAAE4B,GAAkB,kBAAEC,KAAsB9J,EAAAA,GAAAA,IAAe,CAC/D6J,mBAAoB,CAAA94B,GAAA,SAClBC,eAAe,kBAGjB84B,kBAAmB,CAAA/4B,GAAA,SACjBC,eAAe,mBAKbmvB,GACHvM,GACDllB,IAAA,IAAC,IAAE4I,GAAmB5I,EAAA,OACpB4I,EAAIe,cAAcyC,SAAS8Y,EAAOvb,cAAc,EAAC,IAAAmD,GAAA,CAAAlI,KAAA,UAAA0B,OAAA,eAErD,MAAM+0B,GAA6B90B,IAU5B,IAV6B,YAClC+0B,EAAW,QACXnS,EAAO,OACPqP,EAAM,MACNQ,GAMDzyB,EACC,MAAM,MAAEpB,IAAUC,EAAAA,EAAAA,OACT60B,OAAQsB,IAAevC,EAAMc,iBACtC,OAAOwB,EAAY1zB,QACjB9E,EAAAA,EAAAA,IAAAsiB,EAAAA,GAAA,CAAAviB,SAAA,CACG21B,IACC71B,EAAAA,EAAAA,GAACi3B,EAAAA,IAAQ,CAAA/2B,UACPF,EAAAA,EAAAA,GAACs4B,EAAAA,IAAS,CAACz1B,KAAGC,EAAAA,EAAAA,IAAE,CAAE2K,KAAM,EAAGtJ,gBAAiB3B,EAAMQ,OAAO61B,qBAAqB,IAAC34B,UAC7EC,EAAAA,EAAAA,IAACuD,EAAAA,EAAWgD,KAAI,CAACC,MAAI,EAAAzG,SAAA,CAClB21B,EAAO,KAAG8C,EAAY1zB,OAAO,WAKrC0zB,EAAY7uB,KACX/B,IAAA,IAAAof,EAAAwM,EAAA,IAAC,IAEC1tB,EAAG,MACH3E,GACDyG,EAAA,OACC5H,EAAAA,EAAAA,IAAC82B,EAAAA,IAAQ,CAAA/2B,SAAA,EACPF,EAAAA,EAAAA,GAACs4B,EAAAA,IAAS,CACR/wB,MAAO,CACLqwB,SAAU,EACVC,UAAWe,EAAUd,WACrB53B,UAEFF,EAAAA,EAAAA,GAACwb,EAAAA,GAAI,CAACC,GAAIkF,GAAAA,EAAOmY,mBAAmB,CAAgB,QAAhB3R,EAACX,EAAQxV,eAAO,IAAAmW,EAAAA,EAAI,IAAKlhB,EAAK,CAAqB,QAArB0tB,EAACnN,EAAQtG,oBAAY,IAAAyT,EAAAA,EAAI,KAAKzzB,SAC7F+F,OAGLjG,EAAAA,EAAAA,GAACs4B,EAAAA,IAAS,CACRz1B,IAAGsH,GAEDjK,SAEDoB,EAAM6b,eAhBIlX,EAkBJ,OAIf,IAAI,EAGV,IAAAoqB,GAAA,CAAApuB,KAAA,UAAA0B,OAAA,iEAAAo1B,GAAA,CAAA92B,KAAA,SAAA0B,OAAA,6DAAAq1B,GAAA,CAAA/2B,KAAA,SAAA0B,OAAA,iBAGO,MAAMs1B,GAAsBvqB,IAM5B,IAN6B,cAClCwqB,EAAa,QACb1S,GAID9X,EACC,MAAM,MAAElM,IAAUC,EAAAA,EAAAA,KACZjD,GAAOqG,EAAAA,GAAAA,MACN0c,EAAQgT,IAAazvB,EAAAA,EAAAA,UAAS,IAE/BqzB,GAAelyB,EAAAA,EAAAA,UAAQ,KAAM8E,EAAAA,EAAAA,QAAOmtB,IAAgB,CAACA,IAErDvD,GAAU1uB,EAAAA,EAAAA,UACd,IAAM,CACJ,CACEvH,GAAI,MACJk2B,YAAa,MACbC,OAAQA,KACN71B,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,WAInBm2B,gBAAgB,EAChB9e,KAAM,KAER,CACEtX,GAAI,QACJm2B,OAAQA,KACN71B,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,UAInBi2B,YAAa,QACbE,gBAAgB,KAGpB,IAKIsD,GAAiBnyB,EAAAA,EAAAA,UAAQ,KAC7B,MAAMoyB,EAAgBF,EAAa5W,QAAO9T,IAAA,IAAC,IAAExI,GAAKwI,EAAA,OAAKyX,EAAAA,GAAAA,IAAkBjgB,EAAI,IACvEqzB,EAAeH,EAAa5W,QAAO6N,IAAA,IAAC,IAAEnqB,GAAKmqB,EAAA,QAAMlK,EAAAA,GAAAA,IAAkBjgB,EAAI,IAE7E,OADoBozB,EAAcp0B,OAAS,GAAKq0B,EAAar0B,OAAS,EAI/D,CACL,CACE4wB,OAAQr2B,EAAKC,cAAc+4B,IAC3BlQ,QAAS+Q,EAAc9W,OAAOuM,GAAuBvM,KAEvD,CACEsT,OAAQr2B,EAAKC,cAAcg5B,IAC3BnQ,QAASgR,EAAa/W,OAAOuM,GAAuBvM,MAT/C,CAAC,CAAEsT,YAAQ3wB,EAAWojB,QAAS6Q,EAAa5W,OAAOuM,GAAuBvM,KAWlF,GACA,CAACA,EAAQ4W,EAAc35B,IAEpB62B,GAAQC,EAAAA,GAAAA,IAA4B,CACxChvB,KAAM6xB,EACN5C,iBAAiBA,EAAAA,GAAAA,MACjBE,SAAWP,GAAQA,EAAIjwB,IACvBywB,sBAAsB,EACtBC,iBAAkB,WAClBhB,YAoFF,OACEx1B,EAAAA,EAAAA,IAAA,OAAK0C,IAAGk2B,GAA4E74B,SAAA,EAClFF,EAAAA,EAAAA,GAAC0D,EAAAA,EAAW0lB,MAAK,CAACC,MAAO,EAAGxmB,IAAGm2B,GAAoB94B,UACjDF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,qBAEfoM,OAAQ,CAAE9G,OAAQk0B,EAAa5W,OAAOuM,GAAuBvM,IAAStd,aAG1EjF,EAAAA,EAAAA,GAAA,OACE6C,KAAGC,EAAAA,EAAAA,IAAE,CACHqV,QAAS3V,EAAM8B,QAAQC,GACvB6oB,OAAQ,aAAa5qB,EAAMQ,OAAOgX,mBAClCqT,aAAc7qB,EAAM8qB,QAAQC,iBAC5B9mB,QAAS,OACT2R,cAAe,SACf3K,KAAM,EACNtI,SAAU,UACX,IAACjF,SAnGmB02B,MACzB,IAAKuC,EAAal0B,OAChB,OACEjF,EAAAA,EAAAA,GAAA,OAAK6C,IAAGwtB,GAAiFnwB,UACvFF,EAAAA,EAAAA,GAACqc,EAAAA,IAAK,CACJja,aACEpC,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,4BAS3B,MAAMk3B,GAAwB0C,EAAAA,EAAAA,KAAIH,EAAetvB,KAAIwmB,IAAA,IAAC,QAAEhI,GAASgI,EAAA,OAAKhI,EAAQrjB,MAAM,KAAK,EAEzF,OACE9E,EAAAA,EAAAA,IAAAsiB,EAAAA,GAAA,CAAAviB,SAAA,EACEF,EAAAA,EAAAA,GAAA,OAAK6C,KAAGC,EAAAA,EAAAA,IAAE,CAAEomB,aAAc1mB,EAAM8B,QAAQC,IAAI,IAACrE,UAC3CF,EAAAA,EAAAA,GAACiO,GAAAA,EAAK,CACJ5N,YAAY,sGACZwyB,QAAQ7yB,EAAAA,EAAAA,GAAC8yB,EAAAA,IAAU,IACnB5pB,YAAa1J,EAAKC,cAAc,CAAAC,GAAA,SAC9BC,eAAe,mBAGjB2B,MAAOihB,EACP3gB,SAAWtC,GAAMi2B,EAAUj2B,EAAEoc,OAAOpa,OACpCuH,YAAU,OAId1I,EAAAA,EAAAA,IAAC22B,EAAAA,IAAK,CACJC,YAAU,EACVC,MACEH,GACE72B,EAAAA,EAAAA,GAAA,OAAK6C,KAAGC,EAAAA,EAAAA,IAAE,CAAEuB,UAA8B,EAAnB7B,EAAM8B,QAAQvC,IAAQ,IAAC7B,UAC5CF,EAAAA,EAAAA,GAACqc,EAAAA,IAAK,CACJja,aACEpC,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,2CAMrB,KACLO,SAAA,EAEDF,EAAAA,EAAAA,GAACi3B,EAAAA,IAAQ,CAACC,UAAQ,EAAAh3B,SACfm2B,EAAMc,iBAAiBrtB,KAAK+rB,IAC3B71B,EAAAA,EAAAA,GAACo3B,EAAAA,IAAW,CACV/2B,YAAY,sGAEZg3B,UAAWxB,EAAOyB,OAAOC,eACzBC,cAAe3B,EAAO4B,mBACtBC,WAAY7B,EAAOyB,OAAOK,gBAC1BpwB,MAAO,CACLqwB,SAAU/B,EAAOyB,OAAOC,eAAiB,EAAI,EAC7CM,UAAWhC,EAAOyB,OAAOC,eAAiB1B,EAAOyB,OAAOQ,eAAY5yB,GACpEhF,UAED63B,EAAAA,GAAAA,IAAWlC,EAAOyB,OAAOU,UAAUnC,OAAQA,EAAOoC,eAT9CpC,EAAOn2B,QAajB05B,EAAetvB,KAAI,CAAC0vB,EAASrJ,KAC5BnwB,EAAAA,EAAAA,GAAC04B,GAA0B,CAEzBC,YAAaa,EAAQlR,QACrB9B,QAASA,EACTqP,OAAQ2D,EAAQ3D,OAChBQ,MAAOA,GAJFmD,EAAQ3D,QAAU1F,UAQ5B,EAuBAyG,OAEC,8BCvQiE,IAAAhzB,GAAA,CAAA3B,KAAA,UAAA0B,OAAA,mBAAAoE,GAAA,CAAA9F,KAAA,SAAA0B,OAAA,YAM3E,MAAM81B,GAAep8B,IAAiF,IAAhF,QAAEq8B,EAAO,QAAEn5B,GAA+DlD,EAC9F,OACE2C,EAAAA,EAAAA,GAAC0D,EAAAA,EAAW8X,KAAI,CACdnb,YAAY,mGACZ6sB,KAAK,OACLrqB,IAAGe,GAGHrD,QAASA,EAAQL,UAEjBF,EAAAA,EAAAA,GAAC25B,GAAAA,EAAgC,CAACC,gBAAiBF,EAASG,mBAAiB,EAACh3B,IAAGkF,MACjE,EAOT+xB,GAAoB3vB,IAQ1B,IAR2B,KAChCF,EAAI,QACJuc,EAAO,SACPuT,GAKD5vB,EACC,MAAO6vB,EAAwBC,IAA6Bn0B,EAAAA,EAAAA,UAAoC,OAC1F,MAAEtD,IAAUC,EAAAA,EAAAA,MACXy3B,EAAcC,IAAmBr0B,EAAAA,EAAAA,WAAS,GAEjD,IAAKi0B,IAAaA,EAAS90B,OACzB,OAAO,KAGT,MAAMm1B,EAAeL,EAAS,GACxBM,EAAoBN,EAASO,MAAM,GAEnCC,EAAkBb,IAAiC,IAAD/F,EAAAxM,EAAAC,EACtD6S,EAA0B,CACxBL,gBAAiBF,EACjBc,QAAS,CACPta,aAAkC,QAAtByT,EAAEnN,EAAQtG,oBAAY,IAAAyT,EAAAA,OAAIzuB,EACtC8L,QAAwB,QAAjBmW,EAAEX,EAAQxV,eAAO,IAAAmW,EAAAA,EAAI,GAC5BI,QAAwB,QAAjBH,EAAEZ,EAAQe,eAAO,IAAAH,EAAAA,OAAIliB,EAC5B60B,SAAUA,EACV9vB,KAAMA,KAGVkwB,GAAgB,EAAK,EAGvB,OACEh6B,EAAAA,EAAAA,IAAA,OAAK0C,KAAGC,EAAAA,EAAAA,IAAE,CAAE2D,QAAS,OAAQ8G,IAAK/K,EAAM8B,QAAQC,GAAI+I,WAAY,UAAU,IAACpN,SAAA,EACzEF,EAAAA,EAAAA,GAACy5B,GAAY,CAACC,QAASU,EAAc75B,QAASA,IAAMg6B,EAAeH,KAClEC,EAAkBp1B,QACjB9E,EAAAA,EAAAA,IAAC2H,EAAAA,IAAaiH,KAAI,CAACsU,OAAO,EAAMnjB,SAAA,EAC9BF,EAAAA,EAAAA,GAAC8H,EAAAA,IAAakH,QAAO,CAACC,SAAO,EAAA/O,UAC3BC,EAAAA,EAAAA,IAACC,EAAAA,EAAM,CACLC,YAAY,mGACZ2W,KAAK,QAAO9W,SAAA,CACb,IACGm6B,EAAkBp1B,aAGxBjF,EAAAA,EAAAA,GAAC8H,EAAAA,IAAaoH,QAAO,CAAAhP,SAClBm6B,EAAkBvwB,KAAK8vB,IAEpB55B,EAAAA,EAAAA,GAAC8H,EAAAA,IAAa8Z,KAAI,CAChBvhB,YAAY,mGAAkGH,UAG9GF,EAAAA,EAAAA,GAACy5B,GAAY,CAACC,QAASE,EAAiBr5B,QAASA,IAAMg6B,EAAeX,MAFjEA,EAAgBF,QAAQe,eAQrC,KACHT,IACCh6B,EAAAA,EAAAA,GAAC06B,GAAAA,EAA2B,CAC1BvyB,OAAQ+xB,EACR9xB,UAAW+xB,EACXH,uBAAwBA,EACxBC,0BAA2BA,MAG3B,8BChGV,MAAMU,GAAgBC,GAAAA,EAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6FZC,GAAiBx9B,IAMC,IAADy9B,EAAAC,EAAA,IANC,QAC7B/pB,EAAO,SACPxQ,GAAW,GAIZnD,EACC,MAAM,KACJiK,EAAI,QACJ7G,EACAhC,MAAOu8B,EAAW,QAClBC,IACEC,EAAAA,GAAAA,GAAkCP,GAAe,CACnDQ,UAAW,CACT7zB,KAAM,CACJ8zB,MAAOpqB,IAGXqqB,KAAM76B,IAGR,MAAO,CACLC,UACA6G,KAAU,OAAJA,QAAI,IAAJA,GAAkB,QAAdwzB,EAAJxzB,EAAMg0B,oBAAY,IAAAR,OAAd,EAAJA,EAAoBS,IAC1BC,WAAYP,EACZD,cACAS,SAAc,OAAJn0B,QAAI,IAAJA,GAAkB,QAAdyzB,EAAJzzB,EAAMg0B,oBAAY,IAAAP,OAAd,EAAJA,EAAoBU,SAC/B,ECjHUC,GAAsBr+B,IAAmD,IAAlD,cAAEs+B,GAA0Ct+B,EAC9E,MAAMu+B,GAAWC,EAAAA,EAAAA,MAEXC,GAAqBjZ,EAAAA,EAAAA,KAAYjf,IAA+B,IAA9B,SAAE+P,GAAsB/P,EAC9D,OAAO+P,EAASooB,eAAeJ,EAAc,IAGzCK,EAAuBnB,GAAe,CAC1C7pB,QAAS2qB,EACTn7B,WAAWy7B,EAAAA,EAAAA,QAGPC,GAAgBj1B,EAAAA,EAAAA,UAAQ,KAAO,IAADk1B,EAClC,OAAOF,EAAAA,EAAAA,MAA0D,OAApBD,QAAoB,IAApBA,GAA0B,QAANG,EAApBH,EAAsB10B,YAAI,IAAA60B,OAAN,EAApBA,EAA4BC,KAAON,CAAkB,GACjG,CAACE,EAAsBF,IAY1B,OAVAhQ,EAAAA,EAAAA,YAAU,MAEJmQ,EAAAA,EAAAA,OAGCC,GACHN,GAASS,EAAAA,EAAAA,IAAUV,GACrB,GACC,CAACC,EAAUD,EAAeO,IAExBA,EAcAA,EAAchc,cAAiBgc,EAAclrB,SAKhDhR,EAAAA,EAAAA,GAACwb,EAAAA,GAAI,CAACC,GAAIkF,GAAAA,EAAOE,gBAAgBqb,EAAchc,aAAcgc,EAAclrB,SAAS9Q,SAAEg8B,EAAc3U,UAJ7F,MAbLvnB,EAAAA,EAAAA,GAACs8B,EAAAA,IAAiB,CAChB77B,SAAO,EACP+oB,OACExpB,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,6BAa4F,8BCxChH,MAAM48B,GAAiBl/B,IAQvB,IARwB,QAC7B2T,EAAO,KACP/G,EAAI,cACJuyB,GAKDn/B,EACC,MAAM,MAAEmF,IAAUC,EAAAA,EAAAA,KACZm5B,GAAWC,EAAAA,EAAAA,MACXr8B,GAAOqG,EAAAA,GAAAA,MAGN42B,EAAgBC,IAAsBz1B,EAAAA,EAAAA,UAC3C,IAAM,EAAC01B,EAAAA,EAAAA,MAAK1yB,GAAMsY,OAAOqa,EAAAA,KAAkB7wB,EAAAA,EAAAA,QAAO9B,GAAMsY,QAAO3e,IAAA,IAAC,IAAEqC,GAAKrC,EAAA,OAAKg5B,EAAAA,EAAAA,IAAgB32B,EAAI,MAChG,CAACgE,KAGG,cAAE0C,EAAa,kBAAEtB,EAAiB,UAAEgB,IAAcjC,EAAAA,GAAAA,GAAyB,CAC/EG,eAAe,EACf1D,iBAAkB41B,EAClBnyB,gBAAiBqB,MAAOgH,EAAGkqB,EAAcC,IACvClB,GAASmB,EAAAA,EAAAA,IAAkB/rB,EAAS6rB,EAAcC,IAAU19B,KAAKo9B,KAG/DQ,EAAgBA,KACpB3xB,EAAkB,CAAEpB,KAAMyyB,GAAqB,EAG3CO,EAAgBz9B,EAAKC,cAAc,CAAAC,GAAA,SACvCC,eAAe,cAIjB,OACEQ,EAAAA,EAAAA,IAAA,OACE0C,KAAGC,EAAAA,EAAAA,IAAE,CACHsZ,WAAY5Z,EAAM8B,QAAQ8J,GAC1B+Q,cAAe3c,EAAM8B,QAAQ8J,GAC7B3H,QAAS,OACT4H,SAAU,OACV,MAAO,CACLzG,YAAa,gBAEf2F,IAAK/K,EAAM8B,QAAQ8J,IACpB,IAAClO,SAAA,CAEDw8B,EAAmBz3B,OAAS,GAC3BjF,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,gGACZ2W,KAAK,QACL1W,KAAK,OACLC,QAASy8B,EAAc98B,UAEvBF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SAACC,eAAe,WAGnCQ,EAAAA,EAAAA,IAAAsiB,EAAAA,GAAA,CAAAviB,SAAA,CACGw8B,EAAmB5yB,KAAKrE,IACvBzF,EAAAA,EAAAA,GAACsF,GAAAA,GAAW,CAACG,IAAKA,EAAqCC,qBAAmB,GAA9C,GAAGD,EAAIQ,OAAOR,EAAInE,YAEhDtB,EAAAA,EAAAA,GAAC0C,EAAAA,IAAa,CAACE,MAAOq6B,EAAc/8B,UAClCF,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,gGACZ,aAAY48B,EACZjmB,KAAK,QACL7T,MAAMnD,EAAAA,EAAAA,GAACk9B,EAAAA,IAAU,IACjB38B,QAASy8B,SAKhB3wB,IAAarM,EAAAA,EAAAA,GAACupB,EAAAA,EAAO,CAACvS,KAAK,UAC3BrK,IACG,8BC9EH,MAAMwwB,GAAwB9/B,IAQ9B,IAAD+/B,EAAA,IARgC,QACpCpsB,EAAO,KACP/G,EAAI,qBACJozB,GAKDhgC,EACC,MAAMigC,GAAoC,QAAtBF,EAAAnzB,EAAKszB,GAAAA,UAAiB,IAAAH,OAAA,EAAtBA,EAAwB97B,QAAS,IAE9Ck8B,EAAgBC,IAAqB33B,EAAAA,EAAAA,WAAS,GAC/CtG,GAAOqG,EAAAA,GAAAA,MACP,MAAErD,IAAUC,EAAAA,EAAAA,KAEZm5B,GAAWC,EAAAA,EAAAA,MAQXriB,GAAW8jB,EAEjB,OACEn9B,EAAAA,EAAAA,IAAA,OAAK0C,KAAGC,EAAAA,EAAAA,IAAE,CAAEomB,aAAc1mB,EAAM8B,QAAQvC,IAAI,IAAC7B,SAAA,EAC3CC,EAAAA,EAAAA,IAACuD,EAAAA,EAAW0lB,MAAK,CAACC,MAAO,EAAGxmB,KAAGC,EAAAA,EAAAA,IAAE,CAAE2D,QAAS,OAAQ6G,WAAY,SAAUC,IAAK/K,EAAM8B,QAAQ8J,IAAI,IAAClO,SAAA,EAChGF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,iBAGjBK,EAAAA,EAAAA,GAACI,EAAAA,EAAM,CACLC,YAAY,uGACZ2W,KAAK,QACL1W,KAAK,WACL,aAAYd,EAAKC,cAAc,CAAAC,GAAA,SAC7BC,eAAe,qBAGjBY,QAASA,IAAMk9B,GAAkB,GACjCt6B,MAAMnD,EAAAA,EAAAA,GAACk9B,EAAAA,IAAU,SAGpB1jB,IAAYgkB,IACXx9B,EAAAA,EAAAA,GAAC0D,EAAAA,EAAWg6B,KAAI,CAAAx9B,UACdF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,uBAKlB6Z,GAAWgkB,KACZx9B,EAAAA,EAAAA,GAACuD,GAAAA,EAAY,CACXjF,gBAAiBg/B,EACjBt+B,SAtCsBb,GAC5By9B,GAAS+B,EAAAA,EAAAA,IAAU3sB,EAASusB,GAAAA,EAAkBp/B,IAC3CiB,KAAKi+B,GACLj+B,MAAK,IAAMq+B,GAAkB,KAoC1B59B,SAnCqB+9B,IAAMH,GAAkB,GAoC7Ct8B,WAAYq8B,MAGZ,ECpEGK,GAA6BxgC,IAA2E,IAA1E,MAAEuF,EAAK,MAAEtB,GAA2DjE,EAC7G,MAAM,MAAEmF,IAAUC,EAAAA,EAAAA,KAClB,OACEtC,EAAAA,EAAAA,IAAA,MACE0C,KAAGC,EAAAA,EAAAA,IAAE,CACH2D,QAAS,OACTq3B,aAAc,aAAat7B,EAAMQ,OAAOgX,mBACxC+jB,UAAWv7B,EAAM8qB,QAAQ0Q,UAC1B,IAAC99B,SAAA,EAEFF,EAAAA,EAAAA,GAAA,MACE6C,KAAGC,EAAAA,EAAAA,IAAE,CACH2K,KAAM,YACNtJ,gBAAiB3B,EAAMQ,OAAO61B,oBAC9B91B,MAAOP,EAAMQ,OAAOkU,cACpBiB,QAAS3V,EAAM8B,QAAQC,GACvBkC,QAAS,OACT6G,WAAY,cACb,IAACpN,SAED0C,KAEH5C,EAAAA,EAAAA,GAAA,MACE6C,KAAGC,EAAAA,EAAAA,IAAE,CACH2K,KAAM,EACN0K,QAAS3V,EAAM8B,QAAQC,GACvB6X,WAAY,EACZ+C,cAAe,EACf1Y,QAAS,OACT6G,WAAY,UACb,IAACpN,SAEDoB,MAEA,EChCT,MAAM28B,GAAgB7nB,IACpB,MAAM,KAAEnU,EAAI,QAAE8Y,GAAY3E,EAC1B,OAAOiF,EAAAA,GAAoBC,yBAAyBrZ,EAAM8Y,EAAQ,EAGpE,IAAAnX,GAAA,CAAA3B,KAAA,SAAA0B,OAAA,kBAIO,MAAMu6B,GAA6B7gC,IAMnC,IANoC,iBACzCilB,EAAgB,QAChBkE,GAIDnpB,EACC,MAAM,MAAEmF,IAAUC,EAAAA,EAAAA,KAElB,OACEzC,EAAAA,EAAAA,GAACm+B,EAAAA,IAAQ,CAAAj+B,SACNoiB,EAAiBxY,KAAK0X,IACrBrhB,EAAAA,EAAAA,IAACqb,EAAAA,GAAI,CAEHC,GAAIwiB,GAAazc,GACjB3e,KAAGC,EAAAA,EAAAA,IAAE,CAAE2D,QAAS,OAAQ6G,WAAY,SAAUC,IAAK/K,EAAM8B,QAAQC,IAAI,IAACrE,SAAA,EAEtEF,EAAAA,EAAAA,GAACqiB,GAAAA,EAAqB,IAAG,IAAEb,EAAMvf,KAAM,KACvC9B,EAAAA,EAAAA,IAACqG,EAAAA,IAAG,CACFnG,YAAY,4GACZwC,IAAGe,GAAwB1D,SAAA,CAC5B,IACGshB,EAAMzG,aATLyG,EAAMvf,SAaN,EC9BFm8B,GAAyB/gC,IAU/B,IAVgC,aACrCghC,EAAY,QACZ7X,GAQDnpB,EACC,MAAM,MAAEmF,IAAUC,EAAAA,EAAAA,MACZ,aAAEyd,EAAY,QAAElP,GAAYwV,EAE5B8X,EAAsBC,IAExB7c,EAAAA,EAAAA,OAAM6c,KACJv+B,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,UASjB6+B,GAA6Bv3B,EAAAA,EAAAA,UAAQ,KACzC,MAAMs3B,EAAUF,EAAav0B,KAAK0X,GAAU8c,EAAmB9c,EAAM+c,WAErE,OADsB,IAAIvqB,IAAIuqB,GACTvnB,OAASunB,EAAQt5B,MAAM,GAC3C,CAACo5B,IAEJ,OACEr+B,EAAAA,EAAAA,GAACm+B,EAAAA,IAAQ,CAAAj+B,SACNm+B,EAAav0B,KAAI,CAAC0X,EAAO2O,KAEtBhwB,EAAAA,EAAAA,IAACqb,EAAAA,GAAI,CACHC,GAAIkF,GAAAA,EAAOE,gBAA4B,OAAZX,QAAY,IAAZA,EAAAA,EAAgB,GAAW,OAAPlP,QAAO,IAAPA,EAAAA,EAAW,GAAIwQ,EAAMpK,cAEpEvU,KAAGC,EAAAA,EAAAA,IAAE,CACH2D,QAAS,OACT6G,WAAY,SACZC,IAAK/K,EAAM8B,QAAQC,GACnBk6B,OAAQ,UACR9kB,OAAQ6kB,GAA8BrO,EAAQ,EAAI3tB,EAAM8qB,QAAQoR,WAAal8B,EAAM8qB,QAAQ0Q,UAC5F,IAAC99B,SAAA,EAEFF,EAAAA,EAAAA,GAAC2+B,EAAAA,IAAU,KACXx+B,EAAAA,EAAAA,IAAA,OAAAD,SAAA,CACGo+B,EAAmB9c,EAAM+c,SACzBC,GAA8BrO,EAAQ,IAAKnwB,EAAAA,EAAAA,GAAC0D,EAAAA,EAAWg6B,KAAI,CAAAx9B,SAAEshB,EAAMpK,oBAZjEoK,EAAMpK,iBAiBR,iBCvD2D,IAAAxT,GAAA,CAAA3B,KAAA,UAAA0B,OAAA,kBAAAoE,GAAA,CAAA9F,KAAA,SAAA0B,OAAA,2CAAAwG,GAAA,CAAAlI,KAAA,SAAA0B,OAAA,2CAAA+K,GAAA,CAAAzM,KAAA,SAAA0B,OAAA,iBAAA8K,GAAA,CAAAxM,KAAA,UAAA0B,OAAA,kBAAAysB,GAAA,CAAAnuB,KAAA,SAAA0B,OAAA,2CAEnE,MAAMi7B,GAAmBvhC,IAQzB,IAADwhC,EAAAC,EAAAC,EAAA,IAR2B,QAC/B/tB,EAAO,KACP/G,EAAI,OACJilB,GAKD7xB,EACC,MAAM2hC,EAAiB,OAAJ/0B,QAAI,IAAJA,GAAwC,QAApC40B,EAAJ50B,EAAOg1B,EAAAA,WAAiC,IAAAJ,OAApC,EAAJA,EAA0Cv9B,MACvD49B,EAAiB,OAAJj1B,QAAI,IAAJA,GAA0B,QAAtB60B,EAAJ70B,EAAOyG,EAAAA,EAAMyuB,qBAAa,IAAAL,OAAtB,EAAJA,EAA4Bx9B,MACzC89B,EAAY1uB,EAAAA,EAAM2uB,aAAap1B,EAAMilB,EAAQle,EAASguB,IAEtD,MAAEx8B,IAAUC,EAAAA,EAAAA,KAClB,OAAO28B,GACLj/B,EAAAA,EAAAA,IAAA,OACE0C,KAAGC,EAAAA,EAAAA,IAAE,CACH2D,QAAS,OACT6G,WAAY,SACZC,IAAK/K,EAAM8B,QAAQC,GACnB6X,WAAY5Z,EAAM8B,QAAQC,GAC1B4a,cAAe3c,EAAM8B,QAAQC,GAC7B8J,SAAU,QACX,IAACnO,SAAA,EAEFF,EAAAA,EAAAA,GAACs/B,GAAAA,EAAwB,CACvBC,WAAqC,QAA3BR,EAAE90B,EAAKyG,EAAAA,EAAM8uB,sBAAc,IAAAT,OAAA,EAAzBA,EAA2Bz9B,MACvCuB,KAAGC,EAAAA,EAAAA,IAAE,CAAEC,MAAOP,EAAMQ,OAAOy8B,gCAAgC,MAE5DL,EAAW,IACXJ,IACCh/B,EAAAA,EAAAA,GAAC0C,EAAAA,IAAa,CAACE,MAAOo8B,EAAW9+B,UAC/BF,EAAAA,EAAAA,GAACwG,EAAAA,IAAG,CACFnG,YAAY,kGACZwC,IAAGe,GAAqB1D,UAExBC,EAAAA,EAAAA,IAAA,OAAK0C,IAAGkF,GAAoD7H,SAAA,EAC1DF,EAAAA,EAAAA,GAAC0/B,EAAAA,IAAU,IAAG,IAAEV,SAKvBE,IACCl/B,EAAAA,EAAAA,GAAC0C,EAAAA,IAAa,CACZqG,wBAAyB,CAAE42B,aAAc,CAAE/5B,SAAU,SACrDhD,OACEzC,EAAAA,EAAAA,IAAA,OAAK0C,IAAGsH,GAAoDjK,SAAA,CACzDg/B,GACDl/B,EAAAA,EAAAA,GAAC2E,EAAAA,EAAU,CACT9B,IAAG6L,GACH7J,WAAW,EACXmS,KAAK,QACL1W,KAAK,WACLsE,SAAUs6B,EACV/7B,MAAMnD,EAAAA,EAAAA,GAAC8E,EAAAA,IAAQ,SAGpB5E,UAEDF,EAAAA,EAAAA,GAACwG,EAAAA,IAAG,CACFnG,YAAY,kGACZwC,IAAG4L,GAAqBvO,UAExBC,EAAAA,EAAAA,IAAA,OAAK0C,IAAGutB,GAAoDlwB,SAAA,EAC1DF,EAAAA,EAAAA,GAAC4/B,EAAAA,IAAa,IAAG,IAAEV,EAAW5E,MAAM,EAAG,cAOjDt6B,EAAAA,EAAAA,GAAC0D,EAAAA,EAAWg6B,KAAI,CAAAx9B,SAAC,UAClB,ECvF8D,IAAA0D,GAAA,CAAA3B,KAAA,SAAA0B,OAAA,iBAM1D,MAAMk8B,GAA+BxiC,IAA0D,IAAzD,SAAE6C,GAAiD7C,EAC9F,MAAM,MAAEmF,IAAUC,EAAAA,EAAAA,KAClB,OACEzC,EAAAA,EAAAA,GAAA,SACE6C,KAAGC,EAAAA,EAAAA,IAAE,CACH2D,QAAS,QACT2mB,OAAQ,aAAa5qB,EAAMQ,OAAOgX,mBAClC8jB,aAAc,OACdzQ,aAAc7qB,EAAM8qB,QAAQC,iBAC5Bra,MAAO,MACP1F,SAAU,IACV0b,aAAc1mB,EAAM8B,QAAQyrB,GAC5B5qB,SAAU,UACX,IAACjF,UAEFF,EAAAA,EAAAA,GAAA,SAAO6C,IAAGe,GAAuB1D,SAAEA,KAC7B,ECnBC4/B,GAA+BziC,IAAmC,IAAlC,MAAEiE,GAA0BjE,EACvE,MAAM,MAAEmF,IAAUC,EAAAA,EAAAA,KAClB,OACEtC,EAAAA,EAAAA,IAAA,OAAK0C,KAAGC,EAAAA,EAAAA,IAAE,CAAE2D,QAAS,OAAQ8G,IAAK/K,EAAM8B,QAAQ8J,GAAId,WAAY,UAAU,IAACpN,SAAA,CACxEoB,GACDtB,EAAAA,EAAAA,GAAC2E,EAAAA,EAAU,CAACE,WAAW,EAAOD,SAAUtD,EAAO6B,MAAMnD,EAAAA,EAAAA,GAAC8E,EAAAA,IAAQ,IAAKkS,KAAK,YACpE,ECoBV,MAAM+oB,GAAaA,KAAM//B,EAAAA,EAAAA,GAAC0D,EAAAA,EAAWg6B,KAAI,CAAAx9B,SAAC,WAAoB,IAAA6H,GAAA,CAAA9F,KAAA,SAAA0B,OAAA,UAEvD,MAAMq8B,GAAkB3iC,IAgBxB,IAhByB,QAC9B2T,EAAO,iBACPivB,EAAgB,KAChBh2B,EAAI,QACJuc,EAAO,SACPuT,EAAQ,OACRzE,EAAM,cACN4D,GASD77B,EACC,MAAM,MAAEmF,IAAUC,EAAAA,EAAAA,MACZ,OAAEysB,IAAWgR,EAAAA,EAAAA,OAEb,iBAAE5d,IAAqBO,EAAAA,EAAAA,KAAYjf,IAAA,IAAC,SAAE+P,GAAsB/P,EAAA,MAAM,CACtE0e,iBAAkB3O,EAASoP,uBAAuB/R,GACnD,IAEKqtB,GAAep3B,EAAAA,EAAAA,UAAQ,IAAMyJ,EAAAA,EAAMsS,wBAAwB/Y,IAAO,CAACA,IACnEk2B,EAAiBl2B,EAAKm2B,GAAAA,IAoH5B,OACEjgC,EAAAA,EAAAA,IAAA,OAAK0C,IAAGkF,GAAgB7H,SAAA,EACtBF,EAAAA,EAAAA,GAACm9B,GAAqB,CAACnsB,QAASA,EAAS/G,KAAMA,EAAMozB,qBAAsB4C,KAC3EjgC,EAAAA,EAAAA,GAAC0D,EAAAA,EAAW0lB,MAAK,CAACC,MAAO,EAAEnpB,UACzBF,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SAACC,eAAe,cAtHjB0gC,MAAO,IAAD1M,EAAAxM,EAAAyC,EAC1B,OACEzpB,EAAAA,EAAAA,IAAC0/B,GAA4B,CAAA3/B,SAAA,EAC3BF,EAAAA,EAAAA,GAAC69B,GAA0B,CACzBj7B,OACE5C,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,eAInB2B,MAAOklB,EAAQ8Z,UAAY5vB,EAAAA,EAAMuL,gBAAgBuK,EAAQ8Z,YAAatgC,EAAAA,EAAAA,GAAC+/B,GAAU,OAEnF//B,EAAAA,EAAAA,GAAC69B,GAA0B,CACzBj7B,OACE5C,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,eAInB2B,OAAOtB,EAAAA,EAAAA,GAAC0zB,GAAkB,CAAClN,QAASA,EAASvc,KAAMA,OAErDjK,EAAAA,EAAAA,GAAC69B,GAA0B,CACzBj7B,OACE5C,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,kBAInB2B,OAAOtB,EAAAA,EAAAA,GAAC8/B,GAA4B,CAACx+B,MAA4B,QAAvBqyB,EAAS,OAAPnN,QAAO,IAAPA,OAAO,EAAPA,EAAStG,oBAAY,IAAAyT,EAAAA,EAAI,QAEvE3zB,EAAAA,EAAAA,GAAC69B,GAA0B,CACzBj7B,OACE5C,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SAACC,eAAe,WAEnC2B,OAAOtB,EAAAA,EAAAA,GAACozB,GAAgB,CAAClY,OAAQsL,EAAQtL,YAE3Clb,EAAAA,EAAAA,GAAC69B,GAA0B,CACzBj7B,OAAO5C,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SAACC,eAAe,WACxC2B,OAAOtB,EAAAA,EAAAA,GAAC8/B,GAA4B,CAACx+B,MAAsB,QAAjB6lB,EAAEX,EAAQxV,eAAO,IAAAmW,EAAAA,EAAI,QAEjEnnB,EAAAA,EAAAA,GAAC69B,GAA0B,CACzBj7B,OACE5C,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,aAInB2B,MAAOoP,EAAAA,EAAM6vB,YAAY/Z,EAAQ8Z,UAAW9Z,EAAQga,WAErDL,IACCngC,EAAAA,EAAAA,GAAC69B,GAA0B,CACzBj7B,OAAO5C,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SAACC,eAAe,eACxC2B,OAAOtB,EAAAA,EAAAA,GAAC07B,GAAmB,CAACC,cAAewE,EAAe7+B,WAG9DtB,EAAAA,EAAAA,GAAC69B,GAA0B,CACzBj7B,OACE5C,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,kBAInB2B,MACU,OAARy4B,QAAQ,IAARA,GAAAA,EAAU90B,QAASjF,EAAAA,EAAAA,GAAC85B,GAAiB,CAAC7vB,KAAMA,EAAMuc,QAASA,EAASuT,SAAUA,KAAe/5B,EAAAA,EAAAA,GAAC+/B,GAAU,OAG5G//B,EAAAA,EAAAA,GAAC69B,GAA0B,CACzBj7B,OAAO5C,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SAACC,eAAe,SACxC2B,OAAOtB,EAAAA,EAAAA,GAACu8B,GAAc,CAACvrB,QAAwB,QAAjB4Y,EAAEpD,EAAQxV,eAAO,IAAA4Y,EAAAA,EAAI,GAAI3f,KAAMA,EAAMuyB,cAAeyD,OAEpFjgC,EAAAA,EAAAA,GAAC69B,GAA0B,CACzBj7B,OACE5C,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SAACC,eAAe,WAEnC2B,OAAOtB,EAAAA,EAAAA,GAAC4+B,GAAgB,CAAC30B,KAAMA,EAAMilB,OAAQA,EAAQle,QAASA,OAEhEhR,EAAAA,EAAAA,GAAC69B,GAA0B,CACzBj7B,OACE5C,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,kBAInB2B,OACc,OAAZ+8B,QAAY,IAAZA,OAAY,EAAZA,EAAcp5B,QAAS,GACrBjF,EAAAA,EAAAA,GAACo+B,GAAsB,CAAC5X,QAASA,EAAS6X,aAAcA,KAExDr+B,EAAAA,EAAAA,GAAC+/B,GAAU,OAIjB//B,EAAAA,EAAAA,GAAC69B,GAA0B,CACzBj7B,OACE5C,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,sBAInB2B,OACkB,OAAhBghB,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBrd,QAAS,GACzBjF,EAAAA,EAAAA,GAACk+B,GAA0B,CAAC1X,QAASA,EAASlE,iBAAkBA,KAEhEtiB,EAAAA,EAAAA,GAAC+/B,GAAU,QAIY,EAc9BM,IACDlgC,EAAAA,EAAAA,IAAA,OAAK0C,KAAGC,EAAAA,EAAAA,IAAE,CAAE2D,QAAS,OAAQ8G,IAAK/K,EAAM8B,QAAQyrB,GAAIgO,UAAW,IAAK0C,UAAW,IAAKt7B,SAAU,UAAU,IAACjF,SAAA,EAVpGF,EAAAA,EAAAA,GAACq1B,GAA0B,CAACC,OAAQA,KAYvCt1B,EAAAA,EAAAA,GAACi5B,GAAmB,CAACC,cAAeA,EAAe1S,QAASA,SAE1D,EC3JJka,GAA+CC,IACnDC,EAAAA,EAAAA,OAAMD,EAAY,OAePE,GAAqBF,GACtB,OAAVA,QAAU,IAAVA,OAAU,EAAVA,EAAY72B,KAAKg3B,IAAY,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,MAAM,CACjClI,QAAS,CACPe,OAAoC,QAA9BsG,EAAsB,QAAtBC,EAAEF,EAAapH,eAAO,IAAAsH,OAAA,EAApBA,EAAsBvG,cAAM,IAAAsG,EAAAA,EAAI,GACxC9+B,KAAgC,QAA5Bg/B,EAAsB,QAAtBC,EAAEJ,EAAapH,eAAO,IAAAwH,OAAA,EAApBA,EAAsBj/B,YAAI,IAAAg/B,EAAAA,EAAI,GACpCY,QAAsC,QAA/BV,EAAsB,QAAtBC,EAAEN,EAAapH,eAAO,IAAA0H,OAAA,EAApBA,EAAsBS,eAAO,IAAAV,EAAAA,EAAI,GAC1CW,OAAoC,QAA9BT,EAAsB,QAAtBC,EAAER,EAAapH,eAAO,IAAA4H,OAAA,EAApBA,EAAsBQ,cAAM,IAAAT,EAAAA,EAAI,GACxCrmB,OAAoC,QAA9BumB,EAAsB,QAAtBC,EAAEV,EAAapH,eAAO,IAAA8H,OAAA,EAApBA,EAAsBxmB,cAAM,IAAAumB,EAAAA,EAAI,GACxChC,WAA4C,QAAlCkC,EAAsB,QAAtBC,EAAEZ,EAAapH,eAAO,IAAAgI,OAAA,EAApBA,EAAsBnC,kBAAU,IAAAkC,EAAAA,EAAI,IAElDx3B,KAMuC,QANnC03B,EACe,QADfC,EACFd,EAAa72B,YAAI,IAAA23B,OAAA,EAAjBA,EACI93B,KAAKrE,IAAG,IAAAs8B,EAAAl0B,EAAA,MAAM,CACd5H,IAAY,QAAT87B,EAAEt8B,EAAIQ,WAAG,IAAA87B,EAAAA,EAAI,GAChBzgC,MAAgB,QAAXuM,EAAEpI,EAAInE,aAAK,IAAAuM,EAAAA,EAAI,GACrB,IACA0U,QAAQ9c,KAAS+T,EAAAA,EAAAA,SAAQ/T,EAAIQ,cAAK,IAAA07B,EAAAA,EAAI,GAC5C,IA0BUK,GAAwBj6B,IAMD,IAADk6B,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,IANG,QACpCtxB,EAAO,aACPkP,GAIDnY,EACC,MAAMw6B,GAAetG,EAAAA,EAAAA,MACfL,GAAWC,EAAAA,EAAAA,MAKjB,GAAI0G,EAAc,CAAC,IAADC,EAAAC,EAAAC,EAAAC,EAChB,MAKMC,EALeC,KACnBhI,GAAe,CACb7pB,YAG+B6xB,IAGnC/W,EAAAA,EAAAA,YAAU,KACR8P,GAAS3qB,EAAAA,EAAAA,IAAuB,CAAEC,OAAQF,IAAW,GACpD,CAAC4qB,EAAU5qB,IAEd,MAAM,cAAEkoB,EAAa,KAAEjvB,EAAI,OAAEqrB,EAAM,SAAEyE,IAAa9yB,EAAAA,EAAAA,UAAQ,KAAO,IAAD67B,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAhFrC7C,EAkFzB,MAAO,CACLzH,eAAeuK,EAAAA,EAAAA,QACb/C,IApFqBC,EAqFiD,QAA/CmC,EAAgC,QAAhCC,EAACH,EAA2Bt7B,YAAI,IAAAy7B,GAAM,QAANC,EAA/BD,EAAiCz7B,YAAI,IAAA07B,OAAN,EAA/BA,EAAuC1a,eAAO,IAAAwa,EAAAA,EAAI,GApFlFnC,EACGpe,QAAOllB,IAAA,IAAC,IAAE4I,EAAG,MAAE3E,EAAK,KAAEykB,EAAI,UAAED,GAAWzoB,EAAA,OAAa,OAAR4I,GAA0B,OAAV3E,GAA2B,OAATykB,GAA+B,OAAdD,CAAkB,IACjHhc,KAAIlG,IAAA,IAAC,IAAEqC,EAAG,MAAE3E,EAAK,KAAEykB,EAAI,UAAED,GAAgBliB,EAAA,MAAM,CAC9CqC,MACA3E,QACAykB,KAAM2L,OAAO3L,GACbD,UAAW4L,OAAO5L,GACnB,OA+EM4d,GAAWA,EAAOz9B,IAAIkH,OAAOlI,OAAS,IAEzCgF,MAAMw5B,EAAAA,EAAAA,QACJ/C,GAAkF,QAA5DuC,EAAgD,QAAhDC,EAAiBN,EAA2Bt7B,YAAI,IAAA47B,GAAM,QAANC,EAA/BD,EAAiC57B,YAAI,IAAA67B,OAAN,EAA/BA,EAAuCl5B,YAAI,IAAAg5B,EAAAA,EAAI,KACrFx9B,GAAQA,EAAIQ,IAAIkH,OAAOlI,OAAS,IAEnCqwB,QAAQmO,EAAAA,EAAAA,QACN/C,GAAoF,QAA9D0C,EAAgD,QAAhDC,EAAiBT,EAA2Bt7B,YAAI,IAAA+7B,GAAM,QAANC,EAA/BD,EAAiC/7B,YAAI,IAAAg8B,OAAN,EAA/BA,EAAuChO,cAAM,IAAA8N,EAAAA,EAAI,KACvFO,GAAUA,EAAM19B,IAAIkH,OAAOlI,OAAS,IAEvC80B,SAAU8G,GAAiD,QAAhC0C,EAACX,EAA2Bt7B,YAAI,IAAAi8B,GAAQ,QAARC,EAA/BD,EAAiCK,cAAM,IAAAJ,OAAR,EAA/BA,EAAyCK,eACtE,GACA,CAACjB,EAA2Bt7B,OAE/B,MAAO,CACLkf,QAA8C,QAAvCgc,EAAiC,QAAjCC,EAAEG,EAA2Bt7B,YAAI,IAAAm7B,OAAA,EAA/BA,EAAiCrG,YAAI,IAAAoG,EAAAA,OAAIt9B,EAClD6e,WAAuD,QAA7C2e,EAAiC,QAAjCC,EAAEC,EAA2Bt7B,YAAI,IAAAq7B,OAAA,EAA/BA,EAAiC5e,kBAAU,IAAA2e,EAAAA,OAAIx9B,EAC3DzE,QAASmiC,EAA2BniC,QACpChC,MAAOmkC,EAA2B5H,YAClCS,SAAUmH,EAA2BnH,SACrCD,WAAYoH,EAA2BpH,WACvCzB,WACAb,gBACAjvB,OACAqrB,SAEJ,CAGA,MAAMwO,ECzImCC,EAAC/yB,EAAiBkP,KAC3D,MAAO8jB,EAAcC,IAAmBn+B,EAAAA,EAAAA,UAAS,KAC1Co+B,EAAqBC,IAA0Br+B,EAAAA,EAAAA,UAAS,IACzD81B,GAAWC,EAAAA,EAAAA,OAIX,QAAErV,EAAO,KAAEvc,EAAI,cAAEivB,EAAa,WAAEnV,EAAU,OAAEuR,EAAM,SAAEyE,IAAalX,EAAAA,EAAAA,KAAa3kB,IAAiB,CACnGsoB,QAAStoB,EAAMyV,SAASooB,eAAe/qB,GAEvC/G,MAAMw5B,EAAAA,EAAAA,QAAOvlC,EAAMyV,SAASywB,cAAcpzB,IAAWvL,GAAQA,EAAIQ,IAAIkH,OAAOlI,OAAS,IACrFi0B,eAAeuK,EAAAA,EAAAA,QAAOvlC,EAAMyV,SAAS0wB,uBAAuBrzB,IAAW0yB,GAAWA,EAAOz9B,IAAIkH,OAAOlI,OAAS,IAC7GqwB,QAAQmO,EAAAA,EAAAA,QAAOvlC,EAAMyV,SAAS2wB,gBAAgBtzB,IAAW2yB,GAAUA,EAAM19B,IAAIkH,OAAOlI,OAAS,IAC7F8e,WAAY7lB,EAAMyV,SAAS4wB,gBAAgBrkB,GAC3C6Z,SAAU77B,EAAMyV,SAAS6wB,kBAAkBxzB,OAGvCyzB,GAAWn5B,EAAAA,EAAAA,cAAY,KAC3B,MAAMo5B,GAASrI,EAAAA,EAAAA,IAAUrrB,GAEzB,OADAizB,EAAgBS,EAAO3O,KAAKr2B,IACrBk8B,EAAS8I,EAAO,GACtB,CAAC9I,EAAU5qB,IAER2zB,GAAkBr5B,EAAAA,EAAAA,cAAY,KAClC,MAAMo5B,GAASE,EAAAA,EAAAA,IAAiB1kB,GAEhC,OADAikB,EAAuBO,EAAO3O,KAAKr2B,IAC5Bk8B,EAAS8I,EAAO,GACtB,CAAC9I,EAAU1b,IAER2kB,GAAqBv5B,EAAAA,EAAAA,cAAY,KACrCswB,GAAS3qB,EAAAA,EAAAA,IAAuB,CAAEC,OAAQF,IAAW,GACpD,CAAC4qB,EAAU5qB,KAGd8a,EAAAA,EAAAA,YAAU,KACHtF,GACHie,IAAWplC,OAAOC,GAAMoR,EAAAA,EAAMC,sBAAsBrR,KAEtDulC,GAAoB,GACnB,CAACre,EAASie,EAAUI,KAEvB/Y,EAAAA,EAAAA,YAAU,KACH/H,GACH4gB,IAAkBtlC,OAAOC,GAAMoR,EAAAA,EAAMC,sBAAsBrR,IAC7D,GACC,CAACykB,EAAY4gB,IAGhB,MAAQlkC,QAASqkC,EAAYrmC,MAAOsmC,IAAkBliB,EAAAA,EAAAA,KAAa3kB,IAAiB,IAAA8mC,EAAAC,EAAAC,EAAAC,EAAA,MAAM,CACxF1kC,SAAUujC,GAAgBoB,QAAkB,QAAXJ,EAAC9mC,EAAMwc,YAAI,IAAAsqB,GAAgB,QAAhBC,EAAVD,EAAahB,UAAa,IAAAiB,OAAhB,EAAVA,EAA4B9vB,QAC9D1W,MAAiB,QAAZymC,EAAEhnC,EAAMwc,YAAI,IAAAwqB,GAAgB,QAAhBC,EAAVD,EAAalB,UAAa,IAAAmB,OAAhB,EAAVA,EAA4B1mC,MACpC,KAEOgC,QAAS4kC,EAAmB5mC,MAAO6mC,IAAyBziB,EAAAA,EAAAA,KAAa3kB,IAAiB,IAAAqnC,EAAAC,EAAAC,EAAAC,EAAA,MAAM,CACtGjlC,SAAUujC,GAAgBoB,QAAkB,QAAXG,EAACrnC,EAAMwc,YAAI,IAAA6qB,GAAuB,QAAvBC,EAAVD,EAAarB,UAAoB,IAAAsB,OAAvB,EAAVA,EAAmCrwB,QACrE1W,MAAiB,QAAZgnC,EAAEvnC,EAAMwc,YAAI,IAAA+qB,GAAuB,QAAvBC,EAAVD,EAAavB,UAAoB,IAAAwB,OAAvB,EAAVA,EAAmCjnC,MAC3C,IAID,MAAO,CACLgC,QAHcqkC,GAAcO,EAI5B/9B,KAAM,CACJkf,UACAvc,OACAqrB,SACA4D,gBACAnV,aACAgW,YAEFyB,WAAYiJ,EACZkB,OAAQ,CAAEZ,gBAAeO,wBAC1B,EDiE2BvB,CAA4B/yB,EAASkP,GAC3DzhB,EAAQqlC,EAAoB6B,OAAOZ,eAAiBjB,EAAoB6B,OAAOL,qBAErF,MAAO,CACL9e,QAAiC,QAA1Byb,EAAE6B,EAAoBx8B,YAAI,IAAA26B,OAAA,EAAxBA,EAA0Bzb,QACnC0S,cAAuC,QAA1BgJ,EAAE4B,EAAoBx8B,YAAI,IAAA46B,OAAA,EAAxBA,EAA0BhJ,cACzCjvB,KAA8B,QAA1Bk4B,EAAE2B,EAAoBx8B,YAAI,IAAA66B,OAAA,EAAxBA,EAA0Bl4B,KAChC8Z,WAAoC,QAA1Bqe,EAAE0B,EAAoBx8B,YAAI,IAAA86B,OAAA,EAAxBA,EAA0Bre,WACtCuR,OAAgC,QAA1B+M,EAAEyB,EAAoBx8B,YAAI,IAAA+6B,OAAA,EAAxBA,EAA0B/M,OAClCyE,SAAkC,QAA1BuI,EAAEwB,EAAoBx8B,YAAI,IAAAg7B,OAAA,EAAxBA,EAA0BvI,SACpCt5B,QAASqjC,EAAoBrjC,QAC7BhC,QACAsmC,cAAejB,EAAoB6B,OAAOZ,cAC1CO,qBAAsBxB,EAAoB6B,OAAOL,qBACjD9J,WAAYsI,EAAoBtI,WACjC,kBErJI,MAAMoK,WAAwB7nC,EAAAA,UACnCmD,MAAAA,GACE,OACElB,EAAAA,EAAAA,GAAC6lC,GAAAA,EAAS,CACRC,WAAY,IACZC,WAAY,UAAU3nC,KAAKC,MAAM+8B,uBACjC4K,2BAA4BrlB,GAAAA,EAAOslB,WAGzC,+JCesF,IAAA97B,GAAA,CAAAlI,KAAA,SAAA0B,OAAA,6DAAA+K,GAAA,CAAAzM,KAAA,UAAA0B,OAAA,wBAkBjF,MAAMuiC,GAA4B7oC,IAclC,IAAD8oC,EAAA,IAdoC,QACxC3f,EAAO,WACPiE,EAAU,KACVnF,EAAI,aACJ8gB,EAAY,oBACZC,EAAmB,cACnBnN,EAAgB,CAAC,EAAC,OAClB5D,EAAS,CAAC,EAAC,KACXrrB,EAAO,CAAC,GAMT5M,EACC,MAAM,MAAEmF,IAAUC,EAAAA,EAAAA,MACXysB,EAAQ2B,IAAa/qB,EAAAA,EAAAA,UAAS,KAC/B,cAAErG,IAAkBoG,EAAAA,GAAAA,MAEpB,iBAAEygC,EAAgB,mBAAEC,EAAkB,mBAAEC,GAAuBJ,EAG/DK,GAAoBx/B,EAAAA,EAAAA,UAAQ,KAAO,IAADy/B,EACtC,OAAKC,EAAAA,EAAAA,MAGqD,QAA1DD,EAAuB,OAAhBJ,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkB/jB,QAAQqkB,IAAWA,EAAMC,iBAAQ,IAAAH,EAAAA,EAAI,GAFrDJ,CAEuD,GAC/D,CAACA,KAEGQ,EAAiBC,IAAsBjhC,EAAAA,EAAAA,eAE5CZ,GAEI+f,GAAgBpC,EAAAA,EAAAA,KAAYjf,IAA+B,IAADujB,EAAA,IAA7B,SAAExT,GAAsB/P,EACzD,OAAO8sB,EAAAA,EAAAA,WAAU/c,EAASoX,wBAAuC,QAAhB5D,EAACX,EAAQxV,eAAO,IAAAmW,EAAAA,EAAI,KAAMwJ,IAClEnG,EAAAA,EAAAA,UACLze,EAAAA,EAAAA,QAAO4kB,GACJ7mB,KAAI/B,IAAA,IAAC,eAAE0e,GAAgB1e,EAAA,OAAK0e,CAAc,IAC1CmK,SAEL,IAGEoW,GAAsB//B,EAAAA,EAAAA,UAAQ,MAASuf,UAASvB,mBAAkB,CAACuB,EAASvB,KAE5E,gBAAEgiB,IAAoBpkB,EAAAA,EAAAA,KAAa3kB,IAAiB,CACxD+oC,gBAAiB/oC,EAAMyV,SAASszB,qBAG3BC,EAAsBC,IAA2BrhC,EAAAA,EAAAA,UAAsC,MAExFshC,GAAgBC,EAAAA,GAAAA,MAKhBC,GAAeC,EAAAA,GAAAA,MAIfC,GAAcC,EAAAA,GAAAA,MAEdC,GAAgCC,EAAAA,GAAAA,MAUhCxiB,GAAiCle,EAAAA,EAAAA,UACrC,SAAAmgB,EAAAwC,EAAA8I,EAAA,MAAM,CACJ,CACEpL,YAA4B,QAAjBF,EAAEZ,EAAQe,eAAO,IAAAH,EAAAA,EAAI,GAChCkB,QAAS4Q,EACT5D,SACArrB,OACA29B,OAAQX,EAA+B,QAAhBrd,EAACpD,EAAQxV,eAAO,IAAA4Y,EAAAA,EAAI,KAAO,CAAC,EACnDie,cAAe,CAAC,EAChBxgB,KAAqB,QAAjBqL,EAAElM,EAAQxV,eAAO,IAAA0hB,EAAAA,EAAI,GACzB3vB,MAAOP,EAAMQ,OAAOwkB,QACpBhB,WAEH,GACD,CAACA,EAAS0S,EAAe5D,EAAQrrB,EAAMg9B,EAAiBzkC,KAG1DspB,EAAAA,EAAAA,YAAU,KACR,KAAMya,IAAuBD,IAAqBnhB,EAAUlgB,OAAS,EAAG,CACtE,MAAM,eAAE6iC,EAAc,iBAAEC,GAAqBC,GAAAA,GAAqBC,8BAA8B,CAC9FvgB,SAAUvC,EACV+iB,oBAAqB,CAAU,UAAT5iB,EAAmB6iB,EAAAA,GAA2BC,EAAAA,IAEpEC,kBAAoBpmC,IAClB,MAAMgkB,EAAiBhkB,EAAK8sB,WAAWuZ,EAAAA,IACvC,MAAgB,UAAThjB,GAAoBW,EAAiBA,CAAc,IAI9DogB,GAAqB76B,IAAO,IACvBA,EACH86B,iBAAkBwB,EAClBvB,mBAAoBwB,KAExB,IACC,CAACzB,EAAkBC,EAAoBphB,EAAWG,EAAM+gB,KAK3Dva,EAAAA,EAAAA,YAAU,KACRua,GAAqB76B,IACnB,IAAKA,EAAQ86B,mBAAqB96B,EAAQ+6B,mBACxC,OAAO/6B,EAET,MAAM,eAAEs8B,EAAc,iBAAEC,EAAgB,gBAAEQ,GAAoBP,GAAAA,GAAqBQ,6BAA6B,CAC9GlC,iBAAkB96B,EAAQ86B,iBAC1BC,mBAAoB/6B,EAAQ+6B,mBAC5B7e,SAAUvC,EACVsjB,qBAAsBj9B,EAAQi9B,qBAE9BJ,kBAAoBpmC,IAClB,MAAMgkB,EAAiBhkB,EAAK8sB,WAAWuZ,EAAAA,IACvC,MAAgB,UAAThjB,GAAoBW,EAAiBA,CAAc,IAI9D,OAAKsiB,EAGE,IACF/8B,EACH86B,iBAAkBwB,EAClBvB,mBAAoBwB,GALbv8B,CAMR,GACD,GACD,CAAC2Z,EAAWkhB,EAAqB/gB,IAEpC,MAAMojB,GAAcC,EAAAA,GAAAA,KACdC,EAAqBxC,EAAawC,qBAAsBC,EAAAA,EAAAA,OAA2CH,GAEzGI,EAAAA,GAAAA,GAA2B,CACzBxd,SAAU,CAAgB,QAAhB6a,EAAC3f,EAAQxV,eAAO,IAAAm1B,EAAAA,EAAI,IAC9B4C,iBAAkB,CAAoB,YAAnBviB,EAAQtL,QAC3B0tB,qBACArd,SAASyd,EAAAA,EAAAA,QAGX,MAAMC,GAAoBC,EAAAA,EAAAA,KAAyD,OAAlB1C,QAAkB,IAAlBA,EAAAA,EAAsB,GAAKtX,EAE5F,OACE/uB,EAAAA,EAAAA,IAAA,OACE0C,IAAGsH,GAKDjK,SAAA,EAEFC,EAAAA,EAAAA,IAAA,OACE0C,KAAGC,EAAAA,EAAAA,IAAE,CACHqc,cAAe3c,EAAM8B,QAAQvC,GAC7B0E,QAAS,OACT8G,IAAK/K,EAAM8B,QAAQC,GACnBkJ,KAAM,YACP,IAACvN,SAAA,EAEDgpC,EAAAA,EAAAA,MACClpC,EAAAA,EAAAA,GAACmpC,GAAAA,EAAqB,CAAC3C,mBAAoBA,KAE3CxmC,EAAAA,EAAAA,GAACiO,GAAAA,EAAK,CACJ5N,YAAY,+FACZ6sB,KAAK,YACL2F,QAAQ7yB,EAAAA,EAAAA,GAAC8yB,EAAAA,IAAU,IACnBxxB,MAAO4tB,EACPrmB,YAAU,EACVjH,SAAWtC,GAAMuxB,EAAUvxB,EAAEoc,OAAOpa,OACpC4H,YAAazJ,EAAc,CAAAC,GAAA,SACzBC,eAAe,4BAKpBkpC,EAAAA,EAAAA,QACC7oC,EAAAA,EAAAA,GAACopC,EAAAA,IAAY,CACX/oC,YAAY,+FACZgpC,QAASjD,EAAawC,mBACtBU,gBAAkBD,IAChBhD,GAAqB76B,IAAO,IAAWA,EAASo9B,mBAAoBS,KAAW,EAC/EnpC,SAEDT,EAAc,CAAAC,GAAA,SACbC,eAAe,oBAKpB4pC,EAAAA,EAAAA,QACCvpC,EAAAA,EAAAA,GAACwpC,GAAAA,EAAqC,CACpCC,cAAehf,EACfif,sBAAuBtD,EAAasD,sBACpCC,cAAetD,QAIrBrmC,EAAAA,EAAAA,GAAA,OACE6C,IAAG6L,GAGDxO,UAEFF,EAAAA,EAAAA,GAACizB,GAAAA,EAAwB,CAACjO,YAAagiB,EAAqB9T,UAAWpO,GAAwB5kB,UAC7FF,EAAAA,EAAAA,GAAC4pC,GAAAA,GAA2C,CAACnD,kBAAmBA,EAAkBvmC,UAChFF,EAAAA,EAAAA,GAAC6pC,GAAAA,EAA0B,CACzBtD,mBAAoBA,EACpBD,iBAAkBG,EAClBW,cAAeA,EACfE,aAAcA,EACdniB,UAAWA,EACX2kB,eAnKYC,GAAoC5C,EAAwB4C,GAoKxEvC,YAAaA,EACbwC,gBA1KaC,GAA6B3pC,GACpD6mC,EAAwBa,GAAAA,GAAqBkC,wBAAwB5pC,GAAM,OAAO4E,EAAW+kC,IA0KnF/a,OAAQ+Z,EACRkB,oBAAqB,CAACC,GAAAA,GAAcC,KAAMD,GAAAA,GAAcE,IAAKF,GAAAA,GAAcG,OAC3ExD,mBAAoBA,EACpB6B,mBAAoBA,EACpBc,sBAAuBtD,EAAasD,sBACpCc,QAAS,aAKhBtD,IACClnC,EAAAA,EAAAA,GAACyqC,GAAAA,EAAwB,CACvBC,aAAcvlB,EACdskB,cAAehf,EACfkgB,aAAc,GACdC,OAAQ1D,EACRloC,SAhLY6rC,IAClBnD,EAA8BmD,GAG9B1D,EAAwB,KAAK,EA6KvBtnC,SAAUA,IAAMsnC,EAAwB,MACxCqD,QAAS,KACTL,oBAAqB,CAACC,GAAAA,GAAcC,KAAMD,GAAAA,GAAcE,IAAKF,GAAAA,GAAcG,OAC3Eb,sBAAuBtD,EAAasD,yBAGxC1pC,EAAAA,EAAAA,GAAC8qC,GAAAA,EAAyB,CACxBhE,gBAAiBA,EACjBjnC,SAAUA,IAAMknC,OAAmB7hC,GACnCigB,UAAWA,EACX6hB,oBAAqBA,EACrB+D,iBAAkBjmB,GAClB8jB,mBAAoBA,EACpB4B,QAAS,SAEP,EAIGQ,GAAyB3sC,IACpC,MAAM4sC,EAAwB,GAAG5sC,EAAMmoB,QAAQxV,WAAW3S,EAAMinB,OAE1D4lB,GAAajkC,EAAAA,EAAAA,UACjB,IAAMkqB,GAAAA,EAAkBC,qBAAqB,UAAW6Z,IACxD,CAACA,KAGI7E,EAAcC,IAAuBvgC,EAAAA,EAAAA,WAA8C,KACxF,MAAMqlC,EAAyD,CAC7D1C,sBAAsB,EACtBnC,sBAAkBphC,EAClBqhC,wBAAoBrhC,EAEpB0jC,oBAAoBC,EAAAA,EAAAA,MACpBa,sBAAuB,CACrB/hB,SAAUC,GAAAA,GAA6BE,KACvCK,eAAgB,EAChBJ,uBAAwB,KAG5B,IACE,MAAMqjB,EAAsBF,EAAW1Z,QAAQ,gBAE/C,OAAK4Z,EAGEhuB,KAAKqU,MAAM2Z,GAFTD,CAGX,CAAE,MACA,OAAOA,CACT,KAOF,OAJArf,EAAAA,EAAAA,YAAU,KACRof,EAAWjZ,QAAQ,eAAgB7U,KAAKC,UAAU+oB,GAAc,GAC/D,CAACA,EAAc8E,KAGhBlrC,EAAAA,EAAAA,GAACqrC,GAAAA,GAAwC,CAAChF,oBAAqBA,EAAoBnmC,UACjFF,EAAAA,EAAAA,GAACkmC,GAAyB,IAAK7nC,EAAO+nC,aAAcA,EAAcC,oBAAqBA,KAC9C,kBC7V/C,MAAMiF,GAAkB,UAACC,GAAiChkB,SAE1D,IAAA3jB,GAAA,CAAA3B,KAAA,SAAA0B,OAAA,sBAGO,MAAM6nC,GAAmBnuC,IAOzB,IAP0B,aAC/B6iB,EAAY,QACZlP,GAKD3T,EACC,MAAMouC,GAAqBxkC,EAAAA,EAAAA,UAAQ,IAAM,CAACiZ,IAAe,CAACA,IAE1D,OACElgB,EAAAA,EAAAA,GAAA,OAAK6C,IAAGe,GAA2B1D,UACjCF,EAAAA,EAAAA,GAAC0rC,GAAAA,EAAU,CAACC,cAAeF,EAAoBz6B,QAASA,EAASs6B,gBAAiBA,MAC9E,kBCnBH,MAAMM,GAA0BntC,IACrC,GAAKA,EAGL,OAAIA,aAAiBotC,GAAAA,GACfptC,EAAMqtC,cAAc7mC,OAAS,EACxBxG,EAAMqtC,cAAchiC,KAAKxK,GAAMA,EAAE6d,aAAY4uB,KAAK,MAIzD,YAAattC,EACRA,EAAMlB,QAGRkB,EAAM0e,UAAU,ECcnB6uB,GAAsBA,KAC1B7rC,EAAAA,EAAAA,IAAC8rC,EAAAA,EAAa,CAAA/rC,SAAA,EACZF,EAAAA,EAAAA,GAACksC,EAAAA,IAAa,CACZzrC,SAAO,EACP+oB,OAAOxpB,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SAACC,eAAe,uBAEzC,IAAIkM,MAAM,GAAG8wB,QAAQ7yB,KAAK0T,IACzBxd,EAAAA,EAAAA,GAACs8B,EAAAA,IAAiB,CAAS6P,KAAM,KAAK3uB,KAAdA,QAKjB4uB,GAAUA,KAAO,IAADC,EAAAjlB,EAC3B,MAAM,QAAEpW,EAAO,aAAEkP,IAAiBX,EAAAA,EAAAA,KAI5BY,GAAWC,EAAAA,EAAAA,OACX,MAAE5d,IAAUC,EAAAA,EAAAA,MACX6pC,EAAoBC,IAAyBzmC,EAAAA,EAAAA,WAAS,IACtD0mC,EAAoBC,IAAyB3mC,EAAAA,EAAAA,WAAS,GAE7D4mC,IAAU17B,EAAS,+CACnB07B,IAAUxsB,EAAc,oDAExB,MAAM,WACJ6D,EAAU,MACVtlB,EAAK,cACLy6B,EAAa,QACbz4B,EAAO,OACP60B,EAAM,WACNkG,EAAU,QACVhV,EAAO,KACPvc,EAAI,qBACJq7B,EAAoB,cACpBP,EAAa,SACbtJ,EAAQ,SACR1B,GACEiI,GAAsB,CACxB9hB,eACAlP,aAGK27B,EAAiBC,IAAoB3lC,EAAAA,EAAAA,UAA8B,IACnEiyB,EAIE,CACLlkB,OAAO2nB,KAAKzD,GAAe3W,QAAQ6C,KAAec,EAAAA,GAAAA,IAAkBd,KACpEpQ,OAAO2nB,KAAKzD,GAAe3W,QAAQ6C,IAAcc,EAAAA,GAAAA,IAAkBd,MAL5D,CAAC,GAAI,KAOb,CAAC8T,KAEE,sBAAEpV,EAAwB,GAAE,6BAAED,GAA+B,IAAUhB,EAAAA,EAAAA,KAC1E3kB,GAAsBA,EAAM2uC,qBAAuB,CAAC,IAGjDC,EAAYztB,KAoEZL,GAAoBC,EAAAA,GAAAA,GAAc,eAAezc,EAAMoX,WAAWsF,YAAY3a,SAE9EwoC,EAAiBtsC,KAAa+lB,IAAYzC,GAGhD,OAEGghB,aAAyB94B,GAAAA,GAAgB84B,EAAciI,iBAAmBC,GAAAA,GAAWC,0BAE9E,OAARzR,QAAQ,IAARA,OAAQ,EAARA,EAAU0R,QAASF,GAAAA,GAAWC,yBAC7BzuC,GAASmtC,GAAuBntC,GAAOggB,MAAM,eAEvCze,EAAAA,EAAAA,GAAC4lC,GAAe,CAACxK,MAAOpqB,IAK/Bs0B,aAAgCr5B,GAAAA,GAChCq5B,EAAqB0H,iBAAmBC,GAAAA,GAAWC,yBAE5CltC,EAAAA,EAAAA,GAACotC,GAAAA,EAAY,IAIlBrI,GAAiBO,EACZ,MAILrJ,EAAAA,EAAAA,QAAwCx9B,GAASg9B,IAEjDz7B,EAAAA,EAAAA,GAAA,OAAK6C,KAAGC,EAAAA,EAAAA,IAAE,CAAEuB,UAAW7B,EAAM8B,QAAQyrB,IAAI,IAAC7vB,UACxCF,EAAAA,EAAAA,GAACqc,EAAAA,IAAK,CACJzZ,OACE5C,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,2BAInByC,YAAawpC,GAA+B,OAARnQ,QAAQ,IAARA,EAAAA,EAAYh9B,GAChD6d,OAAOtc,EAAAA,EAAAA,GAACqtC,EAAAA,EAAU,SAOtBN,GAAmBvmB,GAAYzC,GAKjC5jB,EAAAA,EAAAA,IAAAsiB,EAAAA,GAAA,CAAAviB,SAAA,EACEC,EAAAA,EAAAA,IAAC8rC,EAAAA,EAAa,CAACqB,eAAgBtuB,EAAkB9e,SAAA,EAE/CF,EAAAA,EAAAA,GAAC2jB,GAAa,CACZG,sBAAuBA,EACvBC,WAAYA,EACZG,qBAAsBA,IAAMqoB,GAAsB,GAClDpoB,qBAAsBA,IAAMsoB,GAAsB,GAClD5oB,6BAA8BA,EAC9BG,eAAgBtT,EAAAA,EAAM68B,kBAAkB/mB,EAASxV,GACjDsI,QAASrP,EACTga,UAAWqR,EACXtkB,QAASA,EACTsH,gBAAqC,QAAtB+zB,EAAS,OAAP7lB,QAAO,IAAPA,OAAO,EAAPA,EAAS7J,mBAAW,IAAA0vB,EAAAA,OAAInnC,KAG3ClF,EAAAA,EAAAA,GAAA,OAAK6C,KAAGC,EAAAA,EAAAA,IAAE,CAAE2K,KAAM,EAAGtI,SAAU,OAAQ+jB,aAAc1mB,EAAM8B,QAAQC,GAAIkC,QAAS,QAAQ,IAACvG,SAtIvEstC,MAAO,IAADC,EAC5B,IAAKjnB,EACH,OAAO,KAET,OAAQsmB,GACN,KAAKttB,EAAAA,GAAeC,oBAClB,OAAIiuB,EAAAA,EAAAA,OAEA1tC,EAAAA,EAAAA,GAACgrC,GAAqB,CAEpB1lB,KAAK,QACLmF,WAAYkiB,EACZnmB,QAASA,EACT0S,cAAeA,EACfjvB,KAAMA,EACNqrB,OAAQA,GANJ,UAUDt1B,EAAAA,EAAAA,GAACuwB,GAAmB,CAACjL,KAAK,QAAQmF,WAAYkiB,EAAiBnmB,QAASA,IAEnF,KAAKhH,EAAAA,GAAeE,qBAClB,OAAIguB,EAAAA,EAAAA,OAEA1tC,EAAAA,EAAAA,GAACgrC,GAAqB,CAEpB1lB,KAAK,SACLmF,WAAYmiB,EACZpmB,QAASA,EACT0S,cAAeA,EACfjvB,KAAMA,EACNqrB,OAAQA,GANJ,WAUDt1B,EAAAA,EAAAA,GAACuwB,GAAmB,CAACjL,KAAK,SAASmF,WAAYmiB,EAAkBpmB,QAASA,IAErF,KAAKhH,EAAAA,GAAeK,UAClB,OACE7f,EAAAA,EAAAA,GAAC+e,GAAkB,CACjB/N,QAASA,EACTsI,QAASrP,EACTiW,aAAcA,EACdvD,YAAgC,QAArB8wB,EAAEjnB,EAAQ7J,mBAAW,IAAA8wB,EAAAA,OAAIvoC,IAG1C,KAAKsa,EAAAA,GAAeI,OAClB,IAAID,EAAAA,EAAAA,MACF,OAAO3f,EAAAA,EAAAA,GAACwrC,GAAgB,CAACx6B,QAASA,EAASsI,QAASrP,EAAMiW,aAAcA,IAI9E,OACElgB,EAAAA,EAAAA,GAACggC,GAAe,CACdxZ,QAASA,EACTvc,KAAMA,EACNqrB,OAAQA,EACR4D,cAAeA,EACfloB,QAASA,EACTivB,iBAAkBzE,EAClBzB,SAAUA,GACV,EA0EGyT,SAGLxtC,EAAAA,EAAAA,GAAC2tC,EAAAA,GAAc,CACb38B,QAASA,EACTxL,QAASA,IAAM+mC,GAAsB,GACrChlB,QAAwB,QAAjBH,EAAEZ,EAAQe,eAAO,IAAAH,EAAAA,EAAI,GAC5Bjf,OAAQmkC,EACRjiC,UAAWmxB,KAEbx7B,EAAAA,EAAAA,GAAC4tC,GAAAA,EAAc,CACbC,eAAgB,CAAC78B,GACjBxL,QAASA,IAAMinC,GAAsB,GACrCtkC,OAAQqkC,EACRniC,UAAWA,KACT8V,EAASQ,GAAAA,EAAO6D,uBAAuBtE,GAAc,QApCpDlgB,EAAAA,EAAAA,GAACgsC,GAAmB,GAuCxB,EAIP,qMC/OA,MAAM,OAAEjiC,EAAM,SAAE+jC,GAAallC,EAAAA,IAEvBmlC,EAAyB,mBAGlBn8B,EAAgC,QAAQm8B,SACxCx8B,EAAuB,gBACvBO,EAAmB,YAYzB,MAAMU,UAA0B/U,EAAAA,UAA8BO,WAAAA,GAAA,SAAAC,WAAA,KACnEC,MAAQ,CACN8vC,cAAe,MACf,KAEFC,wBAA2BD,IACzB5vC,KAAKS,SAAS,CAAEmvC,iBAAgB,EAChC,KAEFE,mBAAqB,CAACC,EAAW7sC,EAAY8sC,KAC3C,MAAM,YAAE3+B,GAAgBrR,KAAKC,MAC7B+vC,EAAS3+B,EAAYnO,GAAS,UAAUA,0BAA2B4D,EAAU,EAC7E,KAEFmpC,mBAAqB,CAAC9kC,EAAYC,KAE6B,KAD9CA,GAAUA,EAAOlI,OAAU,IAC7B0F,cAAc0oB,QAAQnmB,EAAMvC,cACzC,CAEFsnC,qBAAAA,GACE,MAAM,OAAEC,GAAWnwC,KAAKC,OAClB,cAAE2vC,GAAkB5vC,KAAKF,MAG/B,IAAK8vC,GAFoBA,IAAkBp8B,EAGzC,OAAO,KAGT,MAAM48B,EAAcD,GAClBvuC,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,wEAEfoM,OAAQ,CAAEiiC,cAAeA,MAG3BhuC,EAAAA,EAAAA,GAACY,EAAAA,EAAgB,CAAAlB,GAAA,SACfC,eAAe,oEAEfoM,OAAQ,CAAEiiC,cAAeA,KAI7B,OAAOhuC,EAAAA,EAAAA,GAAA,KAAGC,UAAU,yBAAwBC,SAAEsuC,GAChD,CAEAC,WAAAA,CAAYjtB,GACV,OACExhB,EAAAA,EAAAA,GAAC+J,EAAM,CAACzI,MAAOkgB,EAAMvf,KAAK/B,SACvBshB,EAAMvf,MADuBuf,EAAMvf,KAI1C,CACAf,MAAAA,GACE,MAAM,YAAEuO,EAAW,SAAEgD,EAAQ,OAAE87B,GAAWnwC,KAAKC,OACzC,cAAE2vC,GAAkB5vC,KAAKF,MACzBwwC,EAAmBV,IAAkBp8B,EAC3C,OAEEzR,EAAAA,EAAAA,IAACwuC,EAAAA,IAAU,CAAC7lC,IAAK2J,EAAU4Z,OAAO,WAAWpsB,UAAU,sBAAqBC,SAAA,EAE1EF,EAAAA,EAAAA,GAAC2uC,EAAAA,IAAW/sB,KAAI,CACd4H,MAAO+kB,GAASvuC,EAAAA,EAAAA,GAAA,KAAAE,SAAG,kBAAoB,QACvC+B,KAAMsP,EACN7I,MAAO,CAAC,CAAEC,UAAU,EAAMpL,QAAS,+CAAgD2C,UAEnFC,EAAAA,EAAAA,IAACyI,EAAAA,IAAY,CACXgmC,kBAAkB,wBAClBhtC,SAAUxD,KAAK6vC,wBACf/kC,YAAY,iBACZI,aAAclL,KAAKiwC,mBACnBQ,SAAUzwC,KAAKC,MAAMqU,yBAErB1J,YAAU,EAAA9I,SAAA,EAEVC,EAAAA,EAAAA,IAAC4J,EAAM,CAACzI,MAAOsQ,EAA+B3R,UAAU,0BAAyBC,SAAA,EAC/EF,EAAAA,EAAAA,GAAA,KAAGC,UAAU,mBAAmBsH,MAAO,CAAEunC,SAAU,MAAQ,IAAEf,MAE/D/tC,EAAAA,EAAAA,GAAC8tC,EAAQ,CAACtkB,MAAM,SAAQtpB,SAAE8U,OAAOjJ,OAAO0D,GAAa3F,KAAK0X,GAAUpjB,KAAKqwC,YAAYjtB,YAKxFktB,GACC1uC,EAAAA,EAAAA,GAAC2uC,EAAAA,IAAW/sB,KAAI,CACd4H,MAAM,aACNvnB,KAAM6P,EACNpJ,MAAO,CACL,CAAEC,UAAU,EAAMpL,QAAS,0CAC3B,CAAEwxC,UAAW3wC,KAAK8vC,qBAClBhuC,UAEFF,EAAAA,EAAAA,GAACiO,EAAAA,EAAK,CACJ5N,YAAY,6EACZ6I,YAAY,yBAGd,KAGH9K,KAAKkwC,0BAGZ,qIC5HK,SAASx9B,EAAmBk+B,GACjC,OAAIA,EACK,GAAGC,EAAAA,aAA6CC,EAAAA,EAAAA,IAAmBF,GAAO,KAE1E,EAEX,CAEO,SAASG,IAIP,IAJ+B,MACtCH,EAAQ,IAGT/wC,UAAAgH,OAAA,QAAAC,IAAAjH,UAAA,GAAAA,UAAA,GAAG,CAAC,EACH,MAAMmxC,EAAU,GACVC,EAAgBL,EAAMvlC,SAAS,SAAWulC,EAAQl+B,EAAmBk+B,GAE3E,OADIK,GAAeD,EAAQ7gB,KAAK8gB,GACzBD,EAAQrD,KAAK,QACtB,CAEO,SAASuD,EAAiCC,GAC/C,MAAI,gBAAiBA,EACZA,EAAsB,YAE3B,oBAAqBA,GAAY,mBAAoBA,EAChDz+B,EAAmBy+B,EAA0B,iBAAK,QAAUA,EAAyB,eAE1F,mBAAoBA,EACfA,EAAyB,eAE9B,oBAAqBA,EAChBA,EAA0B,gBAE5B,EACT,qBC7BAC,EAAOC,QAsCP,SAAenuC,EAAOouC,GACpB,GAAqB,kBAAVpuC,EACT,OAAOmwB,EAAMnwB,GAGf,GAAqB,kBAAVA,EACT,OAAOquC,EAAOruC,EAAOouC,GAGvB,OAAO,IACT,EA/CAF,EAAOC,QAAQE,OAASA,EACxBH,EAAOC,QAAQhe,MAAQA,EAOvB,IAAIme,EAAwB,wBAExBC,EAAuB,wBAEvB/lC,EAAM,CACRgmC,EAAI,EACJC,GAAI,KACJC,GAAI,GAAK,GACTC,GAAI,GAAK,GACTC,GAAiB,MAAX,GAAK,KAGTC,EAAc,6CA+ClB,SAASR,EAAOruC,EAAOouC,GACrB,IAAKhe,OAAO0e,SAAS9uC,GACnB,OAAO,KAGT,IAAI+uC,EAAMvjB,KAAKwjB,IAAIhvC,GACfivC,EAAsBb,GAAWA,EAAQa,oBAAuB,GAChEC,EAAiBd,GAAWA,EAAQc,eAAkB,GACtDC,EAAiBf,QAAqCxqC,IAA1BwqC,EAAQe,cAA+Bf,EAAQe,cAAgB,EAC3FC,EAAgBtL,QAAQsK,GAAWA,EAAQgB,eAC3CC,EAAQjB,GAAWA,EAAQiB,MAAS,GAEnCA,GAAS7mC,EAAI6mC,EAAK3pC,iBAEnB2pC,EADEN,GAAOvmC,EAAIomC,GACN,KACEG,GAAOvmC,EAAImmC,GACb,KACEI,GAAOvmC,EAAIkmC,GACb,KACEK,GAAOvmC,EAAIimC,GACb,KAEA,KAIX,IACIa,GADMtvC,EAAQwI,EAAI6mC,EAAK3pC,gBACb6pC,QAAQJ,GAUtB,OARKC,IACHE,EAAMA,EAAIE,QAAQjB,EAAsB,OAGtCU,IACFK,EAAMA,EAAIE,QAAQlB,EAAuBW,IAGpCK,EAAMJ,EAAgBG,CAC/B,CAaA,SAASlf,EAAMsf,GACb,GAAmB,kBAARA,IAAqBC,MAAMD,GACpC,OAAOA,EAGT,GAAmB,kBAARA,EACT,OAAO,KAIT,IACIE,EADAC,EAAUf,EAAYgB,KAAKJ,GAE3BJ,EAAO,IAYX,OAVKO,GAMHD,EAAaG,WAAWF,EAAQ,IAChCP,EAAOO,EAAQ,GAAGlqC,gBALlBiqC,EAAaz4B,SAASu4B,EAAK,IAC3BJ,EAAO,KAOF7jB,KAAKC,MAAMjjB,EAAI6mC,GAAQM,EAChC","sources":["common/components/Prompt.tsx","common/components/EditableNote.tsx","common/components/KeyValueTagFullViewModal.tsx","common/components/KeyValueTag.tsx","common/components/TagSelectDropdown.tsx","common/hooks/useEditKeyValueTagsModal.tsx","model-registry/components/RegisterModel.tsx","experiment-tracking/components/ArtifactView.tsx","experiment-tracking/components/ArtifactPage.tsx","experiment-tracking/components/run-page/RunViewArtifactTab.tsx","experiment-tracking/components/run-page/useRunViewActiveTab.tsx","experiment-tracking/components/run-page/RunViewModeSwitch.tsx","experiment-tracking/components/run-page/RunViewHeaderRegisterModelButton.tsx","experiment-tracking/components/run-page/RunViewHeader.tsx","experiment-tracking/components/runs-charts/hooks/useOrderedCharts.tsx","experiment-tracking/components/run-page/RunViewChartTooltipBody.tsx","experiment-tracking/components/run-page/RunViewMetricHistoryChart.tsx","experiment-tracking/components/run-page/RunViewMetricSingleValueChart.tsx","experiment-tracking/components/run-page/RunViewMetricChartHeader.tsx","experiment-tracking/components/run-page/RunViewMetricChart.tsx","experiment-tracking/components/run-page/useChartRefreshManager.tsx","experiment-tracking/components/run-page/RunViewMetricCharts.tsx","experiment-tracking/components/run-page/overview/RunViewStatusBox.tsx","experiment-tracking/components/run-page/overview/RunViewUserLinkBox.tsx","common/components/ExpandableCell.tsx","experiment-tracking/components/DetailsOverviewParamsTable.tsx","experiment-tracking/components/run-page/overview/RunViewMetricsTable.tsx","experiment-tracking/components/run-page/overview/RunViewDatasetBox.tsx","experiment-tracking/components/run-page/hooks/useGetRunQuery.tsx","experiment-tracking/components/run-page/overview/RunViewParentRunBox.tsx","experiment-tracking/components/run-page/overview/RunViewTagsBox.tsx","experiment-tracking/components/run-page/overview/RunViewDescriptionBox.tsx","experiment-tracking/components/DetailsOverviewMetadataRow.tsx","experiment-tracking/components/run-page/overview/RunViewRegisteredModelsBox.tsx","experiment-tracking/components/run-page/overview/RunViewLoggedModelsBox.tsx","experiment-tracking/components/run-page/overview/RunViewSourceBox.tsx","experiment-tracking/components/DetailsOverviewMetadataTable.tsx","experiment-tracking/components/DetailsOverviewCopyableIdBox.tsx","experiment-tracking/components/run-page/RunViewOverview.tsx","experiment-tracking/components/run-page/hooks/useRunDetailsPageData.tsx","experiment-tracking/components/run-page/useRunDetailsPageDataLegacy.tsx","experiment-tracking/components/RunNotFoundView.tsx","experiment-tracking/components/run-page/RunViewMetricChartsV2.tsx","experiment-tracking/components/run-page/RunViewTracesTab.tsx","graphql/get-graphql-error.ts","experiment-tracking/components/run-page/RunPage.tsx","model-registry/components/RegisterModelForm.tsx","model-registry/utils/SearchUtils.ts","../node_modules/bytes/index.js"],"sourcesContent":["import React from 'react';\nimport { UNSAFE_NavigationContext } from '../utils/RoutingUtils';\n\nconst useNavigationBlock = () => {\n  return (React.useContext(UNSAFE_NavigationContext) as any).navigator.block;\n};\n\nexport interface PromptProps {\n  when: boolean;\n  message: string;\n}\n\n/**\n * Component confirms navigating away by displaying prompt if given condition is met.\n * Uses react-router v6 API.\n */\nexport const Prompt = ({ when, message }: PromptProps) => {\n  const block = useNavigationBlock();\n\n  React.useEffect(() => {\n    if (!when) return;\n\n    const unblock = block?.(() => {\n      // eslint-disable-next-line no-alert\n      return window.confirm(message);\n    });\n\n    // eslint-disable-next-line consistent-return\n    return unblock;\n  }, [message, block, when]);\n\n  return null;\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { Alert, Button, LegacyTooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { Prompt } from './Prompt';\nimport ReactMde, { SvgIcon } from 'react-mde';\nimport { forceAnchorTagNewTab, getMarkdownConverter, sanitizeConvertedHtml } from '../utils/MarkdownUtils';\nimport './EditableNote.css';\nimport { FormattedMessage, IntlShape, injectIntl } from 'react-intl';\n\ntype EditableNoteImplProps = {\n  defaultMarkdown?: string;\n  defaultSelectedTab?: string;\n  onSubmit?: (...args: any[]) => any;\n  onCancel?: (...args: any[]) => any;\n  showEditor?: boolean;\n  saveText?: any;\n  toolbarCommands?: any[];\n  maxEditorHeight?: number;\n  minEditorHeight?: number;\n  childProps?: any;\n  intl: IntlShape;\n};\n\ntype EditableNoteImplState = any;\n\nexport class EditableNoteImpl extends Component<EditableNoteImplProps, EditableNoteImplState> {\n  static defaultProps = {\n    defaultMarkdown: '',\n    defaultSelectedTab: 'write',\n    showEditor: false,\n    saveText: (\n      <FormattedMessage defaultMessage=\"Save\" description=\"Default text for save button on editable notes in MLflow\" />\n    ),\n    confirmLoading: false,\n    toolbarCommands: [\n      ['header', 'bold', 'italic', 'strikethrough'],\n      ['link', 'quote', 'code', 'image'],\n      ['unordered-list', 'ordered-list', 'checked-list'],\n    ],\n    maxEditorHeight: 500,\n    minEditorHeight: 200,\n    childProps: {},\n  };\n\n  state = {\n    markdown: this.props.defaultMarkdown,\n    selectedTab: this.props.defaultSelectedTab,\n    error: null,\n  };\n\n  converter = getMarkdownConverter();\n\n  handleMdeValueChange = (markdown: any) => {\n    this.setState({ markdown });\n  };\n\n  handleTabChange = (selectedTab: any) => {\n    this.setState({ selectedTab });\n  };\n\n  handleSubmitClick = () => {\n    const { onSubmit } = this.props;\n    const { markdown } = this.state;\n    this.setState({ confirmLoading: true });\n    if (onSubmit) {\n      return Promise.resolve(onSubmit(markdown))\n        .then(() => {\n          this.setState({ confirmLoading: false, error: null });\n        })\n        .catch((e) => {\n          this.setState({\n            confirmLoading: false,\n            error:\n              e && e.getMessageField\n                ? e.getMessageField()\n                : this.props.intl.formatMessage({\n                    defaultMessage: 'Failed to submit',\n                    description: 'Message text for failing to save changes in editable note in MLflow',\n                  }),\n          });\n        });\n    }\n    return null;\n  };\n\n  handleCancelClick = () => {\n    // Reset to the last defaultMarkdown passed in as props.\n    this.setState({\n      markdown: this.props.defaultMarkdown,\n      selectedTab: this.props.defaultSelectedTab,\n    });\n    const { onCancel } = this.props;\n    if (onCancel) {\n      onCancel();\n    }\n  };\n\n  contentHasChanged() {\n    return this.state.markdown !== this.props.defaultMarkdown;\n  }\n\n  renderActions() {\n    // @ts-expect-error TS(2339): Property 'confirmLoading' does not exist on type '... Remove this comment to see the full error message\n    const { confirmLoading } = this.state;\n    return (\n      <div className=\"editable-note-actions\" data-testid=\"editable-note-actions\">\n        <div>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_components_editablenote.tsx_114\"\n            type=\"primary\"\n            className=\"editable-note-save-button\"\n            onClick={this.handleSubmitClick}\n            disabled={!this.contentHasChanged() || confirmLoading}\n            loading={confirmLoading}\n            data-testid=\"editable-note-save-button\"\n          >\n            {this.props.saveText}\n          </Button>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_components_editablenote.tsx_124\"\n            htmlType=\"button\"\n            className=\"editable-note-cancel-button\"\n            onClick={this.handleCancelClick}\n            disabled={confirmLoading}\n          >\n            <FormattedMessage\n              defaultMessage=\"Cancel\"\n              description=\"Text for the cancel button in an editable note in MLflow\"\n            />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  getSanitizedHtmlContent() {\n    const { markdown } = this.state;\n    if (markdown) {\n      const sanitized = sanitizeConvertedHtml(this.converter.makeHtml(markdown));\n      return forceAnchorTagNewTab(sanitized);\n    }\n    return null;\n  }\n\n  render() {\n    const { showEditor } = this.props;\n    const { markdown, selectedTab, error } = this.state;\n    const htmlContent = this.getSanitizedHtmlContent();\n    return (\n      <div className=\"note-view-outer-container\" data-testid=\"note-view-outer-container\">\n        {showEditor ? (\n          <React.Fragment>\n            <div className=\"note-view-text-area\">\n              <ReactMde\n                value={markdown}\n                minEditorHeight={this.props.minEditorHeight}\n                maxEditorHeight={this.props.maxEditorHeight}\n                minPreviewHeight={50}\n                childProps={this.props.childProps}\n                toolbarCommands={this.props.toolbarCommands}\n                onChange={this.handleMdeValueChange}\n                // @ts-expect-error TS(2322): Type 'string' is not assignable to type '\"write\" |... Remove this comment to see the full error message\n                selectedTab={selectedTab}\n                onTabChange={this.handleTabChange}\n                // @ts-expect-error TS(2554): Expected 0 arguments, but got 1.\n                generateMarkdownPreview={(md) => Promise.resolve(this.getSanitizedHtmlContent(md))}\n                getIcon={(name) => <TooltipIcon name={name} />}\n              />\n            </div>\n            {error && (\n              <Alert\n                componentId=\"codegen_mlflow_app_src_common_components_editablenote.tsx_178\"\n                type=\"error\"\n                message={this.props.intl.formatMessage({\n                  defaultMessage: 'There was an error submitting your note.',\n                  description: 'Error message text when saving an editable note in MLflow',\n                })}\n                description={error}\n                closable\n              />\n            )}\n            {this.renderActions()}\n            <Prompt\n              when={this.contentHasChanged()}\n              message={this.props.intl.formatMessage({\n                defaultMessage: 'Are you sure you want to navigate away? Your pending text changes will be lost.',\n                description: 'Prompt text for navigating away before saving changes in editable note in MLflow',\n              })}\n            />\n          </React.Fragment>\n        ) : (\n          <HTMLNoteContent content={htmlContent} />\n        )}\n      </div>\n    );\n  }\n}\n\ntype TooltipIconProps = {\n  name?: string;\n};\n\nfunction TooltipIcon(props: TooltipIconProps) {\n  const { theme } = useDesignSystemTheme();\n  const { name } = props;\n  return (\n    // @ts-expect-error TS(2322): Type '{ children: Element; position: string; title... Remove this comment to see the full error message\n    <LegacyTooltip position=\"top\" title={name}>\n      <span css={{ color: theme.colors.textPrimary }}>\n        {/* @ts-expect-error TS(2322): Type 'string | undefined' is not assignable to typ... Remove this comment to see the full error message */}\n        <SvgIcon icon={name} />\n      </span>\n    </LegacyTooltip>\n  );\n}\n\ntype HTMLNoteContentProps = {\n  content?: string;\n};\n\nfunction HTMLNoteContent(props: HTMLNoteContentProps) {\n  const { content } = props;\n  return content ? (\n    <div className=\"note-view-outer-container\" data-testid=\"note-view-outer-container\">\n      <div className=\"note-view-text-area\">\n        <div className=\"note-view-preview note-editor-preview\">\n          <div\n            className=\"note-editor-preview-content\"\n            data-testid=\"note-editor-preview-content\"\n            // @ts-expect-error TS(2322): Type 'string | undefined' is not assignable to typ... Remove this comment to see the full error message\n            // eslint-disable-next-line react/no-danger\n            dangerouslySetInnerHTML={{ __html: props.content }}\n          ></div>\n        </div>\n      </div>\n    </div>\n  ) : (\n    <div>\n      <FormattedMessage defaultMessage=\"None\" description=\"Default text for no content in an editable note in MLflow\" />\n    </div>\n  );\n}\n\nexport const EditableNote = injectIntl(EditableNoteImpl);\n","import React from 'react';\nimport { Modal, Typography, CopyIcon, useDesignSystemTheme } from '@databricks/design-system';\nconst { Paragraph } = Typography;\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\n\nexport interface KeyValueTagFullViewModalProps {\n  tagKey: string;\n  tagValue: string;\n  setIsKeyValueTagFullViewModalVisible: React.Dispatch<React.SetStateAction<boolean>>;\n  isKeyValueTagFullViewModalVisible: boolean;\n}\n\nexport const KeyValueTagFullViewModal = React.memo((props: KeyValueTagFullViewModalProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_common_components_keyvaluetagfullviewmodal.tsx_17\"\n      title={'Tag: ' + props.tagKey}\n      visible={props.isKeyValueTagFullViewModalVisible}\n      onCancel={() => props.setIsKeyValueTagFullViewModalVisible(false)}\n    >\n      <div css={{ display: 'flex' }}>\n        <Paragraph css={{ flexGrow: 1 }}>\n          <pre\n            css={{\n              backgroundColor: theme.colors.backgroundPrimary,\n              marginTop: theme.spacing.sm,\n              whiteSpace: 'pre-wrap',\n              wordBreak: 'break-all',\n            }}\n          >\n            {props.tagValue}\n          </pre>\n        </Paragraph>\n        <div\n          css={{\n            marginTop: theme.spacing.sm,\n          }}\n        >\n          <CopyButton copyText={props.tagValue} showLabel={false} icon={<CopyIcon />} aria-label=\"Copy\" />\n        </div>\n      </div>\n    </Modal>\n  );\n});\n","import { Tag, LegacyTooltip, Typography } from '@databricks/design-system';\nimport { KeyValueEntity } from '../../experiment-tracking/types';\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { KeyValueTagFullViewModal } from './KeyValueTagFullViewModal';\nimport { Interpolation, Theme } from '@emotion/react';\n\n/**\n * An arbitrary number that is used to determine if a tag is too\n * long and should be truncated. We want to avoid short keys or values\n * in a long tag to be truncated\n * */\nexport const TRUNCATE_ON_CHARS_LENGTH = 30;\n\nfunction getTruncatedStyles(shouldTruncate = true): Interpolation<Theme> {\n  return shouldTruncate\n    ? {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        textWrap: 'nowrap',\n        whiteSpace: 'nowrap' as const,\n      }\n    : { whiteSpace: 'nowrap' as const };\n}\n\n/**\n * A <Tag /> wrapper used for displaying key-value entity\n */\nexport const KeyValueTag = ({\n  isClosable = false,\n  onClose,\n  tag,\n  enableFullViewModal = false,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n  maxWidth = 300,\n  className,\n}: {\n  isClosable?: boolean;\n  onClose?: () => void;\n  tag: KeyValueEntity;\n  enableFullViewModal?: boolean;\n  charLimit?: number;\n  maxWidth?: number;\n  className?: string;\n}) => {\n  const intl = useIntl();\n\n  const [isKeyValueTagFullViewModalVisible, setIsKeyValueTagFullViewModalVisible] = useState(false);\n\n  const { shouldTruncateKey, shouldTruncateValue } = getKeyAndValueComplexTruncation(tag, charLimit);\n  const allowFullViewModal = enableFullViewModal && (shouldTruncateKey || shouldTruncateValue);\n\n  const fullViewModalLabel = intl.formatMessage({\n    defaultMessage: 'Click to see more',\n    description: 'Run page > Overview > Tags cell > Tag',\n  });\n\n  return (\n    <div>\n      <Tag\n        componentId=\"codegen_mlflow_app_src_common_components_keyvaluetag.tsx_60\"\n        closable={isClosable}\n        onClose={onClose}\n        title={tag.key}\n        className={className}\n      >\n        <LegacyTooltip title={allowFullViewModal ? fullViewModalLabel : ''}>\n          <span\n            css={{ maxWidth, display: 'inline-flex' }}\n            onClick={() => (allowFullViewModal ? setIsKeyValueTagFullViewModalVisible(true) : undefined)}\n          >\n            <Typography.Text bold title={tag.key} css={getTruncatedStyles(shouldTruncateKey)}>\n              {tag.key}\n            </Typography.Text>\n            {tag.value && (\n              <Typography.Text title={tag.value} css={getTruncatedStyles(shouldTruncateValue)}>\n                : {tag.value}\n              </Typography.Text>\n            )}\n          </span>\n        </LegacyTooltip>\n      </Tag>\n      <div>\n        {isKeyValueTagFullViewModalVisible && (\n          <KeyValueTagFullViewModal\n            tagKey={tag.key}\n            tagValue={tag.value}\n            isKeyValueTagFullViewModalVisible={isKeyValueTagFullViewModalVisible}\n            setIsKeyValueTagFullViewModalVisible={setIsKeyValueTagFullViewModalVisible}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport function getKeyAndValueComplexTruncation(\n  tag: KeyValueEntity,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n): { shouldTruncateKey: boolean; shouldTruncateValue: boolean } {\n  const { key, value } = tag;\n  const fullLength = key.length + value.length;\n  const isKeyLonger = key.length > value.length;\n  const shorterLength = isKeyLonger ? value.length : key.length;\n\n  // No need to truncate if tag is short enough\n  if (fullLength <= charLimit) return { shouldTruncateKey: false, shouldTruncateValue: false };\n  // If the shorter string is too long, truncate both key and value.\n  if (shorterLength > charLimit / 2) return { shouldTruncateKey: true, shouldTruncateValue: true };\n\n  // Otherwise truncate the longer string\n  return {\n    shouldTruncateKey: isKeyLonger,\n    shouldTruncateValue: !isKeyLonger,\n  };\n}\n","import { sortedIndexOf } from 'lodash';\nimport React, { useMemo, useRef, useState } from 'react';\nimport { Control, useController } from 'react-hook-form';\nimport { useIntl } from 'react-intl';\n\nimport { PlusIcon, LegacySelect, LegacyTooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { KeyValueEntity } from '../../experiment-tracking/types';\n\n/**\n * Will show an extra row at the bottom of the dropdown menu to create a new tag when\n * The user has typed something in the search input\n * and either\n * 1. The search input is not an exact match for an existing tag name\n * 2. There are no tags available based on search input\n */\n\nfunction DropdownMenu(menu: React.ReactElement, allAvailableTags: string[]) {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const searchValue = menu.props.searchValue.toLowerCase();\n\n  const resolvedMenu = useMemo(() => {\n    if (!searchValue) return menu;\n\n    const doesTagExists = sortedIndexOf(allAvailableTags, searchValue) >= 0;\n    if (doesTagExists) return menu;\n\n    const isValidTagKey = /^[^,.:/=\\-\\s]+$/.test(searchValue);\n\n    // Overriding the menu to add a new option at the top\n    return React.cloneElement(menu, {\n      flattenOptions: [\n        {\n          data: {\n            value: searchValue,\n            disabled: !isValidTagKey,\n            style: {\n              color: isValidTagKey ? theme.colors.actionTertiaryTextDefault : theme.colors.actionDisabledText,\n            },\n            children: (\n              <LegacyTooltip\n                title={\n                  isValidTagKey\n                    ? undefined\n                    : intl.formatMessage({\n                        defaultMessage: ', . : / - = and blank spaces are not allowed',\n                        description:\n                          'Key-value tag editor modal > Tag dropdown Manage Modal > Invalid characters error',\n                      })\n                }\n                placement=\"right\"\n              >\n                <span css={{ display: 'block' }}>\n                  <PlusIcon css={{ marginRight: theme.spacing.sm }} />\n                  {intl.formatMessage(\n                    {\n                      defaultMessage: 'Add tag \"{tagKey}\"',\n                      description: 'Key-value tag editor modal > Tag dropdown Manage Modal > Add new tag button',\n                    },\n                    {\n                      tagKey: searchValue,\n                    },\n                  )}\n                </span>\n              </LegacyTooltip>\n            ),\n          },\n          key: searchValue,\n          groupOption: false,\n        },\n        ...menu.props.flattenOptions,\n      ],\n    });\n  }, [allAvailableTags, menu, searchValue, intl, theme]);\n\n  return resolvedMenu;\n}\n\nfunction getDropdownMenu(allAvailableTags: string[]) {\n  return (menu: React.ReactElement) => DropdownMenu(menu, allAvailableTags);\n}\n\n/**\n * Used in tag edit feature, allows selecting existing / adding new tag value\n */\nexport function TagKeySelectDropdown({\n  allAvailableTags,\n  control,\n  onKeyChangeCallback,\n}: {\n  allAvailableTags: string[];\n  control: Control<KeyValueEntity>;\n  onKeyChangeCallback?: (key?: string) => void;\n}) {\n  const intl = useIntl();\n  const [isOpen, setIsOpen] = useState(false);\n  const selectRef = useRef<{ blur: () => void; focus: () => void }>(null);\n\n  const { field, fieldState } = useController({\n    control: control,\n    name: 'key',\n    rules: {\n      required: {\n        message: intl.formatMessage({\n          defaultMessage: 'A tag key is required',\n          description: 'Key-value tag editor modal > Tag dropdown > Tag key required error message',\n        }),\n        value: true,\n      },\n    },\n  });\n\n  const handleDropdownVisibleChange = (visible: boolean) => {\n    setIsOpen(visible);\n  };\n\n  const handleClear = () => {\n    field.onChange(undefined);\n    onKeyChangeCallback?.(undefined);\n  };\n\n  const handleSelect = (key: string) => {\n    field.onChange(key);\n    onKeyChangeCallback?.(key);\n  };\n\n  return (\n    <LegacySelect\n      allowClear\n      ref={selectRef}\n      dangerouslySetAntdProps={{\n        showSearch: true,\n        dropdownRender: getDropdownMenu(allAvailableTags),\n      }}\n      css={{ width: '100%' }}\n      placeholder={intl.formatMessage({\n        defaultMessage: 'Type a key',\n        description: 'Key-value tag editor modal > Tag dropdown > Tag input placeholder',\n      })}\n      value={field.value}\n      defaultValue={field.value}\n      open={isOpen}\n      onDropdownVisibleChange={handleDropdownVisibleChange}\n      filterOption={(input, option) => option?.value.toLowerCase().includes(input.toLowerCase())}\n      onSelect={handleSelect}\n      onClear={handleClear}\n      validationState={fieldState.error ? 'error' : undefined}\n    >\n      {allAvailableTags.map((tag) => (\n        <LegacySelect.Option value={tag} key={tag}>\n          {tag}\n        </LegacySelect.Option>\n      ))}\n    </LegacySelect>\n  );\n}\n","import { isEqual, sortBy } from 'lodash';\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport { truncate } from 'lodash';\n\nimport {\n  Button,\n  FormUI,\n  Modal,\n  PlusIcon,\n  Popover,\n  RHFControlledComponents,\n  RestoreAntDDefaultClsPrefix,\n  LegacyTooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { Typography } from '@databricks/design-system';\nimport { KeyValueEntity } from '../../experiment-tracking/types';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport { TagKeySelectDropdown } from '../components/TagSelectDropdown';\nimport { KeyValueTag } from '../components/KeyValueTag';\nimport { ErrorWrapper } from '../utils/ErrorWrapper';\n\nfunction getTagsMap(tags: KeyValueEntity[]) {\n  return new Map(tags.map((tag) => [tag.key, tag]));\n}\n\n/**\n * Provides methods to initialize and display modal used to add and remove tags from any compatible entity\n */\nexport const useEditKeyValueTagsModal = <T extends { tags?: KeyValueEntity[] }>({\n  onSuccess,\n  saveTagsHandler,\n  allAvailableTags,\n  valueRequired = false,\n}: {\n  onSuccess?: () => void;\n  saveTagsHandler: (editedEntity: T, existingTags: KeyValueEntity[], newTags: KeyValueEntity[]) => Promise<any>;\n  allAvailableTags?: string[];\n  valueRequired?: boolean;\n}) => {\n  const editedEntityRef = useRef<T>();\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const { theme } = useDesignSystemTheme();\n\n  const [initialTags, setInitialTags] = useState<Map<string, KeyValueEntity>>(new Map());\n  const [finalTags, setFinalTags] = useState<Map<string, KeyValueEntity>>(new Map());\n\n  const [showModal, setShowModal] = useState(false);\n\n  const form = useForm<KeyValueEntity>({\n    defaultValues: {\n      key: undefined,\n      value: '',\n    },\n  });\n\n  const hideModal = () => setShowModal(false);\n\n  /**\n   * Function used to invoke the modal and start editing tags of the particular model version\n   */\n  const showEditTagsModal = useCallback(\n    (editedEntity: T) => {\n      editedEntityRef.current = editedEntity;\n      setInitialTags(getTagsMap(editedEntity.tags || []));\n      setFinalTags(getTagsMap(editedEntity.tags || []));\n      form.reset();\n\n      setShowModal(true);\n    },\n    [form],\n  );\n\n  const saveTags = async () => {\n    if (!editedEntityRef.current) {\n      return;\n    }\n    setErrorMessage('');\n    setIsLoading(true);\n    saveTagsHandler(editedEntityRef.current, Array.from(initialTags.values()), Array.from(finalTags.values()))\n      .then(() => {\n        hideModal();\n        onSuccess?.();\n        setIsLoading(false);\n      })\n      .catch((e: ErrorWrapper | Error) => {\n        setIsLoading(false);\n        setErrorMessage(e instanceof ErrorWrapper ? e.getUserVisibleError()?.message : e.message);\n      });\n  };\n\n  const intl = useIntl();\n  const formValues = form.watch();\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const hasNewValues = useMemo(\n    () => !isEqual(sortBy(Array.from(initialTags.values()), 'key'), sortBy(Array.from(finalTags.values()), 'key')),\n    [initialTags, finalTags],\n  );\n  const isDirty = formValues.key || formValues.value;\n  const showPopoverMessage = hasNewValues && isDirty;\n\n  const onKeyChangeCallback = (key: string | undefined) => {\n    const tag = key ? finalTags.get(key) : undefined;\n    /**\n     * If a tag value exists for provided key, set the value to the existing tag value\n     */\n    form.setValue('value', tag?.value ?? '');\n  };\n\n  const handleTagDelete = ({ key }: KeyValueEntity) => {\n    setFinalTags((currentFinalTags) => {\n      currentFinalTags.delete(key);\n      return new Map(currentFinalTags);\n    });\n  };\n\n  const onSubmit = () => {\n    // Do not accept form if no value provided while it's required\n    if (valueRequired && !formValues.value.trim()) {\n      return;\n    }\n\n    // Add new tag to existing tags leaving only one tag per key value\n    const newEntries = new Map(finalTags);\n    newEntries.set(formValues.key, formValues);\n\n    setFinalTags(newEntries);\n    form.reset();\n  };\n\n  const EditTagsModal = (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_135\"\n      destroyOnClose\n      visible={showModal}\n      title={\n        <FormattedMessage\n          defaultMessage=\"Add/Edit tags\"\n          description=\"Key-value tag editor modal > Title of the update tags modal\"\n        />\n      }\n      onCancel={hideModal}\n      footer={\n        <RestoreAntDDefaultClsPrefix>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_147\"\n            dangerouslyUseFocusPseudoClass\n            onClick={hideModal}\n            /**\n             * Hack: The footer will remove the margin to the save tags button\n             * if the button if wrapped on another component.\n             */\n            css={{ marginRight: !hasNewValues ? theme.spacing.sm : 0 }}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Cancel',\n              description: 'Key-value tag editor modal > Manage Tag cancel button',\n            })}\n          </Button>\n          {showPopoverMessage ? (\n            <UnsavedTagPopoverTrigger formValues={formValues} isLoading={isLoading} onSaveTask={saveTags} />\n          ) : (\n            <LegacyTooltip\n              title={\n                !hasNewValues\n                  ? intl.formatMessage({\n                      defaultMessage: 'Please add or remove one or more tags before saving',\n                      description: 'Key-value tag editor modal > Tag disabled message',\n                    })\n                  : undefined\n              }\n            >\n              <Button\n                componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_174\"\n                dangerouslyUseFocusPseudoClass\n                disabled={!hasNewValues}\n                loading={isLoading}\n                type=\"primary\"\n                onClick={saveTags}\n              >\n                {intl.formatMessage({\n                  defaultMessage: 'Save tags',\n                  description: 'Key-value tag editor modal > Manage Tag save button',\n                })}\n              </Button>\n            </LegacyTooltip>\n          )}\n        </RestoreAntDDefaultClsPrefix>\n      }\n    >\n      <form\n        onSubmit={form.handleSubmit(onSubmit)}\n        css={{ display: 'flex', alignItems: 'flex-end', gap: theme.spacing.md }}\n      >\n        <div css={{ minWidth: 0, display: 'flex', gap: theme.spacing.md, flex: 1 }}>\n          <div css={{ flex: 1 }}>\n            <FormUI.Label htmlFor=\"key\">\n              {intl.formatMessage({\n                defaultMessage: 'Key',\n                description: 'Key-value tag editor modal > Key input label',\n              })}\n            </FormUI.Label>\n            <TagKeySelectDropdown\n              allAvailableTags={allAvailableTags || []}\n              control={form.control}\n              onKeyChangeCallback={onKeyChangeCallback}\n            />\n          </div>\n          <div css={{ flex: 1 }}>\n            <FormUI.Label htmlFor=\"value\">\n              {valueRequired\n                ? intl.formatMessage({\n                    defaultMessage: 'Value',\n                    description: 'Key-value tag editor modal > Value input label (required)',\n                  })\n                : intl.formatMessage({\n                    defaultMessage: 'Value (optional)',\n                    description: 'Key-value tag editor modal > Value input label',\n                  })}\n            </FormUI.Label>\n            <RHFControlledComponents.Input\n              componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_223\"\n              name=\"value\"\n              control={form.control}\n              aria-label={\n                valueRequired\n                  ? intl.formatMessage({\n                      defaultMessage: 'Value',\n                      description: 'Key-value tag editor modal > Value input label (required)',\n                    })\n                  : intl.formatMessage({\n                      defaultMessage: 'Value (optional)',\n                      description: 'Key-value tag editor modal > Value input label',\n                    })\n              }\n              placeholder={intl.formatMessage({\n                defaultMessage: 'Type a value',\n                description: 'Key-value tag editor modal > Value input placeholder',\n              })}\n            />\n          </div>\n        </div>\n        <LegacyTooltip\n          title={intl.formatMessage({\n            defaultMessage: 'Add tag',\n            description: 'Key-value tag editor modal > Add tag button',\n          })}\n        >\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_248\"\n            htmlType=\"submit\"\n            aria-label={intl.formatMessage({\n              defaultMessage: 'Add tag',\n              description: 'Key-value tag editor modal > Add tag button',\n            })}\n          >\n            <PlusIcon />\n          </Button>\n        </LegacyTooltip>\n      </form>\n      {errorMessage && <FormUI.Message type=\"error\" message={errorMessage} />}\n      <div\n        css={{\n          display: 'flex',\n          rowGap: theme.spacing.xs,\n          flexWrap: 'wrap',\n          marginTop: theme.spacing.sm,\n        }}\n      >\n        {Array.from(finalTags.values()).map((tag) => (\n          <KeyValueTag isClosable tag={tag} onClose={() => handleTagDelete(tag)} key={tag.key} />\n        ))}\n      </div>\n    </Modal>\n  );\n\n  return { EditTagsModal, showEditTagsModal, isLoading };\n};\n\nfunction UnsavedTagPopoverTrigger({\n  isLoading,\n  formValues,\n  onSaveTask,\n}: {\n  isLoading: boolean;\n  formValues: any;\n  onSaveTask: () => void;\n}) {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const tagKeyDisplay = `${truncate(formValues.key, { length: 20 }) || '_'}`;\n  const tagValueDisplay = formValues.value ? `:${truncate(formValues.value, { length: 20 })}` : '';\n  const fullTagDisplay = `${tagKeyDisplay}${tagValueDisplay}`;\n\n  const shownText = intl.formatMessage(\n    {\n      defaultMessage: 'Are you sure you want to save and close without adding \"{tag}\"',\n      description: 'Key-value tag editor modal > Unsaved tag message',\n    },\n    {\n      tag: fullTagDisplay,\n    },\n  );\n  return (\n    <Popover.Root componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_309\">\n      <Popover.Trigger asChild>\n        <Button\n          componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_306\"\n          dangerouslyUseFocusPseudoClass\n          loading={isLoading}\n          type=\"primary\"\n        >\n          {intl.formatMessage({\n            defaultMessage: 'Save tags',\n            description: 'Key-value tag editor modal > Manage Tag save button',\n          })}\n        </Button>\n      </Popover.Trigger>\n      <Popover.Content align=\"end\" aria-label={shownText}>\n        <Typography.Paragraph css={{ maxWidth: 400 }}>{shownText}</Typography.Paragraph>\n        <Popover.Close asChild>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_316\"\n            onClick={onSaveTask}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Yes, save and close',\n              description: 'Key-value tag editor modal > Unsaved tag message > Yes, save and close button',\n            })}\n          </Button>\n        </Popover.Close>\n        <Popover.Close asChild>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_324\"\n            type=\"primary\"\n            css={{ marginLeft: theme.spacing.sm }}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Cancel',\n              description: 'Key-value tag editor modal > Unsaved tag message > cancel button',\n            })}\n          </Button>\n        </Popover.Close>\n        <Popover.Arrow />\n      </Popover.Content>\n    </Popover.Root>\n  );\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport _, { identity } from 'lodash';\nimport { Button, ButtonProps, Modal, Spacer, LegacyTooltip, Typography } from '@databricks/design-system';\nimport { FormattedMessage, injectIntl, type IntlShape } from 'react-intl';\nimport {\n  CREATE_NEW_MODEL_OPTION_VALUE,\n  MODEL_NAME_FIELD,\n  RegisterModelForm,\n  SELECTED_MODEL_FIELD,\n} from './RegisterModelForm';\nimport {\n  createModelVersionApi,\n  createRegisteredModelApi,\n  searchModelVersionsApi,\n  searchRegisteredModelsApi,\n} from '../actions';\nimport { connect } from 'react-redux';\nimport Utils from '../../common/utils/Utils';\nimport { getUUID } from '../../common/utils/ActionUtils';\nimport { getModelNameFilter } from '../utils/SearchUtils';\n\nconst MAX_SEARCH_REGISTERED_MODELS = 5;\n\ntype RegisterModelImplProps = {\n  disabled: boolean;\n  runUuid: string;\n  modelPath: string;\n  modelRelativePath: string;\n  modelByName: any;\n  createRegisteredModelApi: (...args: any[]) => any;\n  createModelVersionApi: (...args: any[]) => any;\n  searchModelVersionsApi: (...args: any[]) => any;\n  searchRegisteredModelsApi: (...args: any[]) => any;\n  intl: IntlShape;\n  /**\n   * Type of button to display (\"primary\", \"link\", etc.)\n   */\n  buttonType?: ButtonProps['type'];\n  /**\n   * Tooltip to display on hover\n   */\n  tooltip?: React.ReactNode;\n  /**\n   * Whether to show the button. If set to true, only modal will be used and button will not be shown.\n   */\n  showButton?: boolean;\n  /**\n   * Whether the modal is visible. If set, modal visibility will be controlled by the props.\n   */\n  modalVisible?: boolean;\n  /**\n   * Callback to close the modal. If set, modal visibility will be controlled by the parent component.\n   */\n  onCloseModal?: () => void;\n  /**\n   * Callback to run after the model is registered.\n   */\n  onRegisterSuccess?: (data?: { value: { status?: string } }) => void;\n  /**\n   * Callback to run after the model is registered.\n   */\n  onRegisterFailure?: (reason?: any) => void;\n};\n\ntype RegisterModelImplState = any; // used in drop-down list so not many are visible at once\n\n/**\n * Component with a set of controls used to register a logged model.\n * Includes register modal and optional \"Register\" button.\n */\nexport class RegisterModelImpl extends React.Component<RegisterModelImplProps, RegisterModelImplState> {\n  form: any;\n\n  state = {\n    visible: false,\n    confirmLoading: false,\n    modelByName: {},\n  };\n\n  createRegisteredModelRequestId = getUUID();\n\n  createModelVersionRequestId = getUUID();\n\n  searchModelVersionRequestId = getUUID();\n  constructor() {\n    // @ts-expect-error TS(2554): Expected 1-2 arguments, but got 0.\n    super();\n    this.form = React.createRef();\n  }\n\n  showRegisterModal = () => {\n    this.setState({ visible: true });\n  };\n\n  hideRegisterModal = () => {\n    this.setState({ visible: false });\n    this.props.onCloseModal?.();\n  };\n\n  resetAndClearModalForm = () => {\n    this.setState({ visible: false, confirmLoading: false });\n    this.form.current?.resetFields();\n    this.props.onCloseModal?.();\n  };\n\n  handleRegistrationFailure = (e: any) => {\n    this.setState({ confirmLoading: false });\n    Utils.logErrorAndNotifyUser(e);\n  };\n\n  handleSearchRegisteredModels = (input: any) => {\n    this.props.searchRegisteredModelsApi(getModelNameFilter(input), MAX_SEARCH_REGISTERED_MODELS);\n  };\n\n  reloadModelVersionsForCurrentRun = () => {\n    const { runUuid } = this.props;\n    return this.props.searchModelVersionsApi({ run_id: runUuid }, this.searchModelVersionRequestId);\n  };\n\n  handleRegisterModel = () => {\n    return this.form.current.validateFields().then((values: any) => {\n      this.setState({ confirmLoading: true });\n      const { runUuid, modelPath } = this.props;\n      const selectedModelName = values[SELECTED_MODEL_FIELD];\n      if (selectedModelName === CREATE_NEW_MODEL_OPTION_VALUE) {\n        // When user choose to create a new registered model during the registration, we need to\n        // 1. Create a new registered model\n        // 2. Create model version #1 in the new registered model\n        return this.props\n          .createRegisteredModelApi(values[MODEL_NAME_FIELD], this.createRegisteredModelRequestId)\n          .then(() =>\n            this.props.createModelVersionApi(\n              values[MODEL_NAME_FIELD],\n              modelPath,\n              runUuid,\n              [],\n              this.createModelVersionRequestId,\n            ),\n          )\n          .then(this.props.onRegisterSuccess ?? identity)\n          .then(this.resetAndClearModalForm)\n          .catch(this.props.onRegisterFailure ?? this.handleRegistrationFailure)\n          .then(this.reloadModelVersionsForCurrentRun)\n          .catch(Utils.logErrorAndNotifyUser);\n      } else {\n        return this.props\n          .createModelVersionApi(selectedModelName, modelPath, runUuid, [], this.createModelVersionRequestId)\n          .then(this.props.onRegisterSuccess ?? identity)\n          .then(this.resetAndClearModalForm)\n          .catch(this.props.onRegisterFailure ?? this.handleRegistrationFailure)\n          .then(this.reloadModelVersionsForCurrentRun)\n          .catch(Utils.logErrorAndNotifyUser);\n      }\n    });\n  };\n\n  componentDidMount() {\n    this.props.searchRegisteredModelsApi();\n  }\n\n  componentDidUpdate(prevProps: RegisterModelImplProps, prevState: RegisterModelImplState) {\n    // Repopulate registered model list every time user launch the modal\n    if (prevState.visible === false && this.state.visible === true) {\n      this.props.searchRegisteredModelsApi();\n    }\n  }\n\n  renderRegisterModelForm() {\n    const { modelByName } = this.props;\n    return (\n      <RegisterModelForm\n        modelByName={modelByName}\n        innerRef={this.form}\n        onSearchRegisteredModels={_.debounce(this.handleSearchRegisteredModels, 300)}\n      />\n    );\n  }\n\n  renderFooter() {\n    return [\n      <Button\n        componentId=\"codegen_mlflow_app_src_model-registry_components_registermodel.tsx_242\"\n        key=\"back\"\n        onClick={this.hideRegisterModal}\n      >\n        <FormattedMessage\n          defaultMessage=\"Cancel\"\n          description=\"Cancel button text to cancel the flow to register the model\"\n        />\n      </Button>,\n      <Button\n        componentId=\"codegen_mlflow_app_src_model-registry_components_registermodel.tsx_248\"\n        key=\"submit\"\n        type=\"primary\"\n        onClick={() => this.handleRegisterModel()}\n        data-test-id=\"confirm-register-model\"\n      >\n        <FormattedMessage defaultMessage=\"Register\" description=\"Register button text to register the model\" />\n      </Button>,\n    ];\n  }\n\n  renderHelper(disableButton: boolean, form: React.ReactNode, footer: React.ReactNode) {\n    const { visible, confirmLoading } = this.state;\n    const { showButton = true, buttonType } = this.props;\n    return (\n      <div className=\"register-model-btn-wrapper\">\n        {showButton && (\n          <LegacyTooltip title={this.props.tooltip || null} placement=\"left\">\n            <Button\n              componentId=\"codegen_mlflow_app_src_model-registry_components_registermodel.tsx_261\"\n              className=\"register-model-btn\"\n              type={buttonType}\n              onClick={this.showRegisterModal}\n              disabled={disableButton}\n              htmlType=\"button\"\n            >\n              <FormattedMessage\n                defaultMessage=\"Register model\"\n                description=\"Button text to register the model for deployment\"\n              />\n            </Button>\n          </LegacyTooltip>\n        )}\n        <Modal\n          title={this.props.intl.formatMessage({\n            defaultMessage: 'Register model',\n            description: 'Register model modal title to register the model for deployment',\n          })}\n          // @ts-expect-error TS(2322): Type '{ children: Element; title: any; width: numb... Remove this comment to see the full error message\n          width={540}\n          visible={this.props.modalVisible || visible}\n          onOk={() => this.handleRegisterModel()}\n          okText={this.props.intl.formatMessage({\n            defaultMessage: 'Register',\n            description: 'Confirmation text to register the model',\n          })}\n          confirmLoading={confirmLoading}\n          onCancel={this.hideRegisterModal}\n          centered\n          footer={footer}\n        >\n          {form}\n        </Modal>\n      </div>\n    );\n  }\n\n  render() {\n    const { disabled } = this.props;\n    return this.renderHelper(disabled, this.renderRegisterModelForm(), this.renderFooter());\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    modelByName: state.entities.modelByName,\n  };\n};\n\nconst mapDispatchToProps = {\n  createRegisteredModelApi,\n  createModelVersionApi,\n  searchModelVersionsApi,\n  searchRegisteredModelsApi,\n};\n\nexport const RegisterModelWithIntl = injectIntl(RegisterModelImpl);\nexport const RegisterModel = connect(mapStateToProps, mapDispatchToProps)(RegisterModelWithIntl);\n\n// ..\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Link } from '../../common/utils/RoutingUtils';\nimport { getBasename } from '../../common/utils/FileUtils';\nimport { ArtifactNode as ArtifactUtils, ArtifactNode } from '../utils/ArtifactUtils';\n// @ts-expect-error TS(7016): Could not find a declaration file for module 'byte... Remove this comment to see the full error message\nimport bytes from 'bytes';\nimport { RegisterModel } from '../../model-registry/components/RegisterModel';\nimport ShowArtifactPage from './artifact-view-components/ShowArtifactPage';\nimport {\n  ModelVersionStatus,\n  ModelVersionStatusIcons,\n  DefaultModelVersionStatusMessages,\n  modelVersionStatusIconTooltips,\n} from '../../model-registry/constants';\nimport Utils from '../../common/utils/Utils';\nimport _, { first } from 'lodash';\nimport { ModelRegistryRoutes } from '../../model-registry/routes';\nimport {\n  DesignSystemHocProps,\n  Empty,\n  LayerIcon,\n  LegacyTooltip,\n  Typography,\n  WithDesignSystemThemeHoc,\n} from '@databricks/design-system';\nimport './ArtifactView.css';\n\nimport { getArtifactRootUri, getArtifacts } from '../reducers/Reducers';\nimport { getAllModelVersions } from '../../model-registry/reducers';\nimport { listArtifactsApi, listArtifactsLoggedModelApi } from '../actions';\nimport { MLMODEL_FILE_NAME } from '../constants';\nimport { getArtifactLocationUrl } from '../../common/utils/ArtifactUtils';\nimport { ArtifactViewTree } from './ArtifactViewTree';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { Button } from '@databricks/design-system';\nimport { CopyIcon } from '@databricks/design-system';\nimport { DownloadIcon } from '@databricks/design-system';\nimport { Checkbox } from '@databricks/design-system';\nimport { getLoggedTablesFromTags } from '@mlflow/mlflow/src/common/utils/TagUtils';\nimport { CopyButton } from '../../shared/building_blocks/CopyButton';\nimport { isExperimentLoggedModelsUIEnabled } from '../../common/utils/FeatureUtils';\nimport type { LoggedModelArtifactViewerProps } from './artifact-view-components/ArtifactViewComponents.types';\nimport { MlflowService } from '../sdk/MlflowService';\n\nconst { Text } = Typography;\n\ntype ArtifactViewImplProps = DesignSystemHocProps & {\n  runUuid: string;\n  initialSelectedArtifactPath?: string;\n  artifactNode: any; // TODO: PropTypes.instanceOf(ArtifactNode)\n  artifactRootUri: string;\n  listArtifactsApi: (...args: any[]) => any;\n  listArtifactsLoggedModelApi: typeof listArtifactsLoggedModelApi;\n  modelVersionsBySource: any;\n  handleActiveNodeChange: (...args: any[]) => any;\n  runTags?: any;\n  modelVersions?: any[];\n  intl: {\n    formatMessage: (...args: any[]) => any;\n  };\n  getCredentialsForArtifactReadApi: (...args: any[]) => any;\n\n  /**\n   * If true, the artifact browser will try to use all available height\n   */\n  useAutoHeight?: boolean;\n} & LoggedModelArtifactViewerProps;\n\ntype ArtifactViewImplState = any;\n\nexport class ArtifactViewImpl extends Component<ArtifactViewImplProps, ArtifactViewImplState> {\n  state = {\n    activeNodeId: undefined,\n    toggledNodeIds: {},\n    requestedNodeIds: new Set(),\n    viewAsTable: true,\n  };\n\n  getExistingModelVersions() {\n    const { modelVersionsBySource } = this.props;\n    const activeNodeRealPath = Utils.normalize(this.getActiveNodeRealPath());\n    return modelVersionsBySource[activeNodeRealPath];\n  }\n\n  renderRegisterModelButton() {\n    const { runUuid } = this.props;\n    const { activeNodeId } = this.state;\n    const activeNodeRealPath = this.getActiveNodeRealPath();\n    return (\n      <RegisterModel\n        runUuid={runUuid}\n        modelPath={activeNodeRealPath}\n        modelRelativePath={String(activeNodeId)}\n        disabled={activeNodeId === undefined}\n        showButton\n        buttonType={undefined}\n      />\n    );\n  }\n\n  renderModelVersionInfoSection(existingModelVersions: any) {\n    return <ModelVersionInfoSection modelVersion={_.last(existingModelVersions)} />;\n  }\n\n  renderPathAndSizeInfo() {\n    // We will only be in this function if this.state.activeNodeId is defined\n    const node = ArtifactUtils.findChild(this.props.artifactNode, this.state.activeNodeId);\n    const activeNodeRealPath = this.getActiveNodeRealPath();\n\n    return (\n      <div className=\"artifact-info-left\">\n        <div className=\"artifact-info-path\">\n          <label>\n            <FormattedMessage\n              defaultMessage=\"Full Path:\"\n              // eslint-disable-next-line max-len\n              description=\"Label to display the full path of where the artifact of the experiment runs is located\"\n            />\n          </label>{' '}\n          {/* @ts-expect-error TS(2322): Type '{ children: string; className: string; ellip... Remove this comment to see the full error message */}\n          <Text className=\"artifact-info-text\" ellipsis copyable>\n            {activeNodeRealPath}\n          </Text>\n        </div>\n        {node.fileInfo.is_dir === false ? (\n          <div className=\"artifact-info-size\">\n            <label>\n              <FormattedMessage\n                defaultMessage=\"Size:\"\n                description=\"Label to display the size of the artifact of the experiment\"\n              />\n            </label>{' '}\n            {bytes(this.getActiveNodeSize())}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n\n  renderSizeInfo() {\n    // We will only be in this function if this.state.activeNodeId is defined\n    const node = ArtifactUtils.findChild(this.props.artifactNode, this.state.activeNodeId);\n    const { theme } = this.props.designSystemThemeApi;\n\n    return (\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          gap: theme.spacing.sm,\n          overflow: 'hidden',\n          textOverflow: 'ellipsis',\n        }}\n      >\n        <Typography.Text bold size=\"lg\" ellipsis title={this.state.activeNodeId}>\n          {this.state.activeNodeId}\n        </Typography.Text>\n        {node.fileInfo.is_dir === false && (\n          <Typography.Text color=\"secondary\">{bytes(this.getActiveNodeSize())}</Typography.Text>\n        )}\n      </div>\n    );\n  }\n\n  renderPathInfo() {\n    const activeNodeRealPath = this.getActiveNodeRealPath();\n    const { theme } = this.props.designSystemThemeApi;\n\n    return (\n      <div\n        css={{\n          display: 'flex',\n          overflow: 'hidden',\n          alignItems: 'center',\n          gap: theme.spacing.sm,\n        }}\n      >\n        <div\n          css={{\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n            flex: '0 auto',\n            color: theme.colors.textSecondary,\n          }}\n          title={activeNodeRealPath}\n        >\n          <FormattedMessage\n            defaultMessage=\"Path:\"\n            description=\"Label to display the full path of where the artifact of the experiment runs is located\"\n          />{' '}\n          {activeNodeRealPath}\n        </div>\n\n        <CopyButton\n          css={{ flex: '0 0 auto' }}\n          showLabel={false}\n          size=\"small\"\n          type=\"tertiary\"\n          copyText={activeNodeRealPath}\n          icon={<CopyIcon />}\n        />\n      </div>\n    );\n  }\n\n  onDownloadClick(runUuid: any, artifactPath: any) {\n    window.location.href = getArtifactLocationUrl(artifactPath, runUuid);\n  }\n\n  renderControls() {\n    const { runUuid } = this.props;\n    const { activeNodeId } = this.state;\n    return (\n      <div style={{ display: 'flex', alignItems: 'flex-start' }}>\n        <div style={{ display: 'inline-flex', alignItems: 'center' }}>\n          {this.shouldShowViewAsTableCheckbox && (\n            <Checkbox\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_artifactview.tsx_288\"\n              isChecked={this.state.viewAsTable}\n              onChange={() =>\n                this.setState({\n                  viewAsTable: !this.state.viewAsTable,\n                })\n              }\n            >\n              <FormattedMessage\n                defaultMessage=\"View as table\"\n                description=\"Experiment tracking > Artifact view > View as table checkbox\"\n              />\n            </Checkbox>\n          )}\n          <LegacyTooltip\n            arrowPointAtCenter\n            placement=\"topLeft\"\n            title={this.props.intl.formatMessage({\n              defaultMessage: 'Download artifact',\n              description: 'Link to download the artifact of the experiment',\n            })}\n          >\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_artifactview.tsx_337\"\n              icon={<DownloadIcon />}\n              onClick={() => this.onDownloadClick(runUuid, activeNodeId)}\n            />\n          </LegacyTooltip>\n        </div>\n      </div>\n    );\n  }\n\n  renderArtifactInfo() {\n    const existingModelVersions = this.getExistingModelVersions();\n    let toRender;\n    if (existingModelVersions && Utils.isModelRegistryEnabled()) {\n      // note that this case won't trigger for files inside a registered model/model version folder\n      // React searches for existing model versions under the path of the file, which won't exist.\n      toRender = this.renderModelVersionInfoSection(existingModelVersions);\n    } else if (this.activeNodeCanBeRegistered() && Utils.isModelRegistryEnabled()) {\n      toRender = this.renderRegisterModelButton();\n    } else if (this.activeNodeIsDirectory()) {\n      toRender = null;\n    } else {\n      toRender = this.renderControls();\n    }\n    const { theme } = this.props.designSystemThemeApi;\n    return (\n      <div\n        css={{\n          padding: `${theme.spacing.xs}px ${theme.spacing.sm}px ${theme.spacing.sm}px ${theme.spacing.md}px`,\n          display: 'flex',\n          flexDirection: 'column',\n          gap: theme.spacing.xs,\n        }}\n      >\n        <div\n          css={{\n            whiteSpace: 'nowrap',\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            gap: theme.spacing.md,\n          }}\n        >\n          <div css={{ flex: '1 1', overflow: 'hidden' }}>{this.renderSizeInfo()}</div>\n          <div css={{ flex: '0 1' }}>{toRender}</div>\n        </div>\n\n        {this.renderPathInfo()}\n      </div>\n    );\n  }\n\n  onToggleTreebeard = (\n    dataNode: {\n      id: string;\n      loading: boolean;\n    },\n    toggled: boolean,\n  ) => {\n    const { id, loading } = dataNode;\n\n    const usingLoggedModels = isExperimentLoggedModelsUIEnabled() && this.props.isLoggedModelsMode;\n\n    const newRequestedNodeIds = new Set(this.state.requestedNodeIds);\n    // - loading indicates that this node is a directory and has not been loaded yet.\n    // - requestedNodeIds keeps track of in flight requests.\n    if (loading && !this.state.requestedNodeIds.has(id)) {\n      // Call relevant API based on the mode we are in\n      if (usingLoggedModels && this.props.loggedModelId) {\n        this.props.listArtifactsLoggedModelApi(this.props.loggedModelId, id);\n      } else {\n        this.props.listArtifactsApi(this.props.runUuid, id);\n      }\n    }\n    this.setState({\n      activeNodeId: id,\n      toggledNodeIds: {\n        ...this.state.toggledNodeIds,\n        [id]: toggled,\n      },\n      requestedNodeIds: newRequestedNodeIds,\n    });\n  };\n\n  getTreebeardData = (artifactNode: any): any => {\n    const { isRoot } = artifactNode;\n    if (isRoot) {\n      if (artifactNode.children) {\n        return Object.values(artifactNode.children).map((c) => this.getTreebeardData(c));\n      }\n      // This case should never happen since we should never call this function on an empty root.\n      throw Error('unreachable code.');\n    }\n\n    let id;\n    let name;\n    let toggled;\n    let children;\n    let active;\n\n    if (artifactNode.fileInfo) {\n      const { path } = artifactNode.fileInfo;\n      id = path;\n      name = getBasename(path);\n    }\n\n    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    const toggleState = this.state.toggledNodeIds[id];\n    if (toggleState) {\n      toggled = toggleState;\n    }\n\n    if (artifactNode.children) {\n      children = Object.values(artifactNode.children).map((c) => this.getTreebeardData(c));\n    }\n\n    if (this.state.activeNodeId === id) {\n      active = true;\n    }\n\n    const loading = artifactNode.children !== undefined && !artifactNode.isLoaded;\n\n    return {\n      id,\n      name,\n      toggled,\n      children,\n      active,\n      loading,\n    };\n  };\n\n  getActiveNodeRealPath() {\n    if (this.state.activeNodeId) {\n      return `${this.props.artifactRootUri}/${this.state.activeNodeId}`;\n    }\n    return this.props.artifactRootUri;\n  }\n\n  getActiveNodeSize() {\n    if (this.state.activeNodeId) {\n      const node = ArtifactUtils.findChild(this.props.artifactNode, this.state.activeNodeId);\n      const size = node.fileInfo.file_size || '0';\n      return parseInt(size, 10);\n    }\n    return 0;\n  }\n\n  activeNodeIsDirectory() {\n    if (this.state.activeNodeId) {\n      const node = ArtifactUtils.findChild(this.props.artifactNode, this.state.activeNodeId);\n      return node.fileInfo.is_dir;\n    } else {\n      // No node is highlighted so we're displaying the root, which is a directory.\n      return true;\n    }\n  }\n\n  activeNodeCanBeRegistered() {\n    if (this.state.activeNodeId) {\n      const node = ArtifactUtils.findChild(this.props.artifactNode, this.state.activeNodeId);\n      if (node && node.children && MLMODEL_FILE_NAME in node.children) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  componentDidUpdate(prevProps: ArtifactViewImplProps, prevState: ArtifactViewImplState) {\n    const { activeNodeId } = this.state;\n    if (prevState.activeNodeId !== activeNodeId) {\n      this.props.handleActiveNodeChange(this.activeNodeIsDirectory());\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.initialSelectedArtifactPath) {\n      const artifactPathParts = this.props.initialSelectedArtifactPath.split('/');\n      if (artifactPathParts) {\n        try {\n          // Check if valid artifactId was supplied in URL. If not, don't select\n          // or expand anything.\n          ArtifactUtils.findChild(this.props.artifactNode, this.props.initialSelectedArtifactPath);\n        } catch (err) {\n          // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n          console.error(err);\n          return;\n        }\n      }\n      let pathSoFar = '';\n      const toggledArtifactState = {\n        activeNodeId: this.props.initialSelectedArtifactPath,\n        toggledNodeIds: {},\n      };\n      artifactPathParts.forEach((part) => {\n        pathSoFar += part;\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        toggledArtifactState['toggledNodeIds'][pathSoFar] = true;\n        pathSoFar += '/';\n      });\n      this.setArtifactState(toggledArtifactState);\n    }\n  }\n\n  setArtifactState(artifactState: any) {\n    this.setState(artifactState);\n  }\n\n  get shouldShowViewAsTableCheckbox() {\n    return (\n      this.state.activeNodeId &&\n      this.props.runTags &&\n      getLoggedTablesFromTags(this.props.runTags).includes(this.state.activeNodeId)\n    );\n  }\n\n  render() {\n    if (ArtifactUtils.isEmpty(this.props.artifactNode)) {\n      return <NoArtifactView useAutoHeight={this.props.useAutoHeight} />;\n    }\n    const { theme } = this.props.designSystemThemeApi;\n\n    const { loggedModelId, isLoggedModelsMode } = this.props;\n\n    return (\n      <div\n        className=\"artifact-view\"\n        css={{\n          flex: this.props.useAutoHeight ? 1 : 'unset',\n          height: this.props.useAutoHeight ? 'auto' : undefined,\n          [theme.responsive.mediaQueries.xs]: {\n            overflowX: 'auto',\n          },\n        }}\n      >\n        <div\n          style={{\n            minWidth: '200px',\n            maxWidth: '400px',\n            flex: 1,\n            whiteSpace: 'nowrap',\n            borderRight: `1px solid ${theme.colors.borderDecorative}`,\n          }}\n        >\n          <ArtifactViewTree\n            data={this.getTreebeardData(this.props.artifactNode)}\n            onToggleTreebeard={this.onToggleTreebeard}\n          />\n        </div>\n        <div className=\"artifact-right\">\n          {this.state.activeNodeId ? this.renderArtifactInfo() : null}\n          <ShowArtifactPage\n            runUuid={this.props.runUuid}\n            path={this.state.activeNodeId}\n            isDirectory={this.activeNodeIsDirectory()}\n            size={this.getActiveNodeSize()}\n            runTags={this.props.runTags}\n            artifactRootUri={this.props.artifactRootUri}\n            modelVersions={this.props.modelVersions}\n            showArtifactLoggedTableView={this.state.viewAsTable && this.shouldShowViewAsTableCheckbox}\n            loggedModelId={loggedModelId}\n            isLoggedModelsMode={isLoggedModelsMode}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const { runUuid, loggedModelId, isLoggedModelsMode } = ownProps;\n  const { apis } = state;\n  const artifactNode =\n    isLoggedModelsMode && loggedModelId ? getArtifacts(loggedModelId, state) : getArtifacts(runUuid, state);\n  const artifactRootUri = ownProps?.artifactRootUri ?? getArtifactRootUri(runUuid, state);\n  const modelVersions = getAllModelVersions(state);\n  const modelVersionsWithNormalizedSource = _.flatMap(modelVersions, (version) => {\n    // @ts-expect-error TS(2698): Spread types may only be created from object types... Remove this comment to see the full error message\n    return { ...version, source: Utils.normalize((version as any).source) };\n  });\n  const modelVersionsBySource = _.groupBy(modelVersionsWithNormalizedSource, 'source');\n  return { artifactNode, artifactRootUri, modelVersions, modelVersionsBySource, apis };\n};\n\nconst mapDispatchToProps = {\n  listArtifactsApi,\n  listArtifactsLoggedModelApi,\n};\n\nexport const ArtifactView = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  // @ts-expect-error TS(2769): No overload matches this call.\n)(WithDesignSystemThemeHoc(injectIntl(ArtifactViewImpl)));\n\ntype ModelVersionInfoSectionProps = {\n  modelVersion: any;\n};\n\nfunction ModelVersionInfoSection(props: ModelVersionInfoSectionProps) {\n  const { modelVersion } = props;\n  const { name, version, status, status_message } = modelVersion;\n\n  // eslint-disable-next-line prefer-const\n  let mvPageRoute = ModelRegistryRoutes.getModelVersionPageRoute(name, version);\n  const modelVersionLink = (\n    <LegacyTooltip title={`${name} version ${version}`}>\n      <Link to={mvPageRoute} className=\"model-version-link\" target=\"_blank\" rel=\"noreferrer\">\n        <span className=\"model-name\">{name}</span>\n        <span>,&nbsp;v{version}&nbsp;</span>\n        <i className=\"fas fa-external-link-o\" />\n      </Link>\n    </LegacyTooltip>\n  );\n\n  return (\n    <div className=\"model-version-info\">\n      <div className=\"model-version-link-section\">\n        <LegacyTooltip title={status_message || modelVersionStatusIconTooltips[status]}>\n          <div>{ModelVersionStatusIcons[status]}</div>\n        </LegacyTooltip>\n        {modelVersionLink}\n      </div>\n      <div className=\"model-version-status-text\">\n        {status === ModelVersionStatus.READY ? (\n          <React.Fragment>\n            <FormattedMessage\n              defaultMessage=\"Registered on {registeredDate}\"\n              description=\"Label to display at what date the model was registered\"\n              values={{\n                registeredDate: Utils.formatTimestamp(modelVersion.creation_timestamp, 'yyyy/mm/dd'),\n              }}\n            />\n          </React.Fragment>\n        ) : (\n          status_message || DefaultModelVersionStatusMessages[status]\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction NoArtifactView({ useAutoHeight }: { useAutoHeight?: boolean }) {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        flex: useAutoHeight ? 1 : 'unset',\n        height: useAutoHeight ? 'auto' : undefined,\n        paddingTop: theme.spacing.md,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      <Empty\n        image={<LayerIcon />}\n        title={\n          <FormattedMessage\n            defaultMessage=\"No Artifacts Recorded\"\n            description=\"Empty state string when there are no artifacts record for the experiment\"\n          />\n        }\n        description={\n          <FormattedMessage\n            defaultMessage=\"Use the log artifact APIs to store file outputs from MLflow runs.\"\n            description=\"Information in the empty state explaining how one could log artifacts output files for the experiment runs\"\n          />\n        }\n      />\n    </div>\n  );\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { WithRouterNextProps, withRouterNext } from '../../common/utils/withRouterNext';\nimport { ArtifactView } from './ArtifactView';\nimport { Spinner } from '../../common/components/Spinner';\nimport { listArtifactsApi, listArtifactsLoggedModelApi } from '../actions';\nimport { searchModelVersionsApi } from '../../model-registry/actions';\nimport { isExperimentLoggedModelsUIEnabled } from '../../common/utils/FeatureUtils';\nimport { connect } from 'react-redux';\nimport { getArtifactRootUri } from '../reducers/Reducers';\nimport { MODEL_VERSION_STATUS_POLL_INTERVAL as POLL_INTERVAL } from '../../model-registry/constants';\nimport RequestStateWrapper from '../../common/components/RequestStateWrapper';\nimport Utils from '../../common/utils/Utils';\nimport { getUUID } from '../../common/utils/ActionUtils';\nimport { getLoggedModelPathsFromTags } from '../../common/utils/TagUtils';\nimport { ArtifactViewBrowserSkeleton } from './artifact-view-components/ArtifactViewSkeleton';\nimport { DangerIcon, Empty } from '@databricks/design-system';\nimport { ArtifactViewErrorState } from './artifact-view-components/ArtifactViewErrorState';\nimport type { LoggedModelArtifactViewerProps } from './artifact-view-components/ArtifactViewComponents.types';\n\ntype ArtifactPageImplProps = {\n  runUuid?: string;\n  initialSelectedArtifactPath?: string;\n  artifactRootUri?: string;\n  apis: any;\n  listArtifactsApi: (...args: any[]) => any;\n  listArtifactsLoggedModelApi: typeof listArtifactsLoggedModelApi;\n  searchModelVersionsApi: (...args: any[]) => any;\n  runTags?: any;\n\n  /**\n   * If true, the artifact browser will try to use all available height\n   */\n  useAutoHeight?: boolean;\n} & LoggedModelArtifactViewerProps;\n\ntype ArtifactPageImplState = any;\n\nexport class ArtifactPageImpl extends Component<ArtifactPageImplProps, ArtifactPageImplState> {\n  pollIntervalId: any;\n\n  getFailedtoListArtifactsMsg = () => {\n    return (\n      <span>\n        <FormattedMessage\n          // eslint-disable-next-line max-len\n          defaultMessage=\"Unable to list artifacts stored under {artifactUri} for the current run. Please contact your tracking server administrator to notify them of this error, which can happen when the tracking server lacks permission to list artifacts under the current run's root artifact directory.\"\n          // eslint-disable-next-line max-len\n          description=\"Error message when the artifact is unable to load. This message is displayed in the open source ML flow only\"\n          values={{ artifactUri: this.props.artifactRootUri }}\n        />\n      </span>\n    );\n  };\n\n  state = { activeNodeIsDirectory: false, errorThrown: false };\n\n  searchRequestId = getUUID();\n\n  listArtifactRequestIds = [getUUID()].concat(\n    this.props.initialSelectedArtifactPath\n      ? this.props.initialSelectedArtifactPath.split('/').map((s) => getUUID())\n      : [],\n  );\n\n  pollModelVersionsForCurrentRun = async () => {\n    const { apis, runUuid, isLoggedModelsMode } = this.props;\n    const { activeNodeIsDirectory } = this.state;\n    const searchRequest = apis[this.searchRequestId];\n    // Do not poll for run's model versions if we are in the logged models mode\n    if (isLoggedModelsMode && !runUuid) {\n      return;\n    }\n    if (activeNodeIsDirectory && !(searchRequest && searchRequest.active)) {\n      try {\n        // searchModelVersionsApi may be sync or async so we're not using <promise>.catch() syntax\n        await this.props.searchModelVersionsApi({ run_id: runUuid }, this.searchRequestId);\n      } catch (error) {\n        // We're not reporting errors more than once when polling\n        // in order to avoid flooding logs\n        if (!this.state.errorThrown) {\n          const errorString = error instanceof Error ? error.toString() : JSON.stringify(error);\n          const errorMessage = `Error while fetching model version for run: ${errorString}`;\n          Utils.logErrorAndNotifyUser(errorMessage);\n          this.setState({ errorThrown: true });\n        }\n      }\n    }\n  };\n\n  handleActiveNodeChange = (activeNodeIsDirectory: any) => {\n    this.setState({ activeNodeIsDirectory });\n  };\n\n  pollArtifactsForCurrentRun = async () => {\n    const { runUuid, loggedModelId } = this.props;\n\n    const usingLoggedModels = isExperimentLoggedModelsUIEnabled() && this.props.isLoggedModelsMode;\n\n    // In the logged models mode, fetch artifacts for the model instead of the run\n    if (usingLoggedModels && loggedModelId) {\n      await this.props.listArtifactsLoggedModelApi(this.props.loggedModelId, undefined, this.listArtifactRequestIds[0]);\n    } else {\n      await this.props.listArtifactsApi(runUuid, undefined, this.listArtifactRequestIds[0]);\n    }\n    if (this.props.initialSelectedArtifactPath) {\n      const parts = this.props.initialSelectedArtifactPath.split('/');\n      let pathSoFar = '';\n      for (let i = 0; i < parts.length; i++) {\n        pathSoFar += parts[i];\n        // ML-12477: ListArtifacts API requests need to be sent and fulfilled for parent\n        // directories before nested child directories, as our Reducers assume that parent\n        // directories are listed before their children to construct the correct artifact tree.\n        // Index i + 1 because listArtifactRequestIds[0] would have been used up by\n        // root-level artifact API call above.\n\n        // In the logged models mode, fetch artifacts for the model instead of the run\n        if (usingLoggedModels && loggedModelId) {\n          await this.props.listArtifactsLoggedModelApi(\n            this.props.loggedModelId,\n            pathSoFar,\n            this.listArtifactRequestIds[i + 1],\n          );\n        } else {\n          await this.props.listArtifactsApi(runUuid, pathSoFar, this.listArtifactRequestIds[i + 1]);\n        }\n        pathSoFar += '/';\n      }\n    }\n  };\n\n  componentDidMount() {\n    if (Utils.isModelRegistryEnabled()) {\n      this.pollModelVersionsForCurrentRun();\n      this.pollIntervalId = setInterval(this.pollModelVersionsForCurrentRun, POLL_INTERVAL);\n    }\n    this.pollArtifactsForCurrentRun();\n  }\n\n  componentDidUpdate(prevProps: ArtifactPageImplProps) {\n    if (prevProps.runUuid !== this.props.runUuid) {\n      this.setState({\n        errorThrown: false,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (Utils.isModelRegistryEnabled()) {\n      clearInterval(this.pollIntervalId);\n    }\n  }\n\n  renderErrorCondition = (shouldRenderError: any) => {\n    return shouldRenderError;\n  };\n\n  renderArtifactView = (isLoading: any, shouldRenderError: any, requests: any) => {\n    if (isLoading) {\n      return <ArtifactViewBrowserSkeleton />;\n    }\n    if (this.renderErrorCondition(shouldRenderError)) {\n      const failedReq = requests[0];\n      if (failedReq && failedReq.error) {\n        // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n        console.error(failedReq.error);\n      }\n      return (\n        <ArtifactViewErrorState\n          css={{ flex: this.props.useAutoHeight ? 1 : 'unset', height: this.props.useAutoHeight ? 'auto' : undefined }}\n          data-testid=\"artifact-view-error\"\n          description={this.getFailedtoListArtifactsMsg()}\n        />\n      );\n    }\n    return (\n      <ArtifactView\n        {...this.props}\n        handleActiveNodeChange={this.handleActiveNodeChange}\n        useAutoHeight={this.props.useAutoHeight}\n      />\n    );\n  };\n\n  render() {\n    return (\n      <RequestStateWrapper\n        requestIds={this.listArtifactRequestIds}\n        // eslint-disable-next-line no-trailing-spaces\n      >\n        {this.renderArtifactView}\n      </RequestStateWrapper>\n    );\n  }\n}\n\ntype ArtifactPageOwnProps = Omit<\n  ArtifactPageImplProps,\n  | 'apis'\n  | 'initialSelectedArtifactPath'\n  | 'listArtifactsApi'\n  | 'listArtifactsLoggedModelApi'\n  | 'searchModelVersionsApi'\n  /* prettier-ignore */\n>;\n\nconst mapStateToProps = (state: any, ownProps: ArtifactPageOwnProps & WithRouterNextProps) => {\n  const { runUuid, location } = ownProps;\n  const currentPathname = location?.pathname || '';\n\n  const initialSelectedArtifactPathMatch = currentPathname.match(/\\/(?:artifactPath|artifacts)\\/(.+)/);\n  // The dot (\"*\") parameter behavior is not stable between implementations\n  // so we'll extract the catch-all after /artifactPath, e.g.\n  // `/experiments/123/runs/321/artifactPath/models/requirements.txt`\n  // is getting transformed into\n  // `models/requirements.txt`\n  const initialSelectedArtifactPath = initialSelectedArtifactPathMatch?.[1] || undefined;\n\n  const { apis } = state;\n  const artifactRootUri = ownProps.artifactRootUri ?? getArtifactRootUri(runUuid, state);\n\n  // Autoselect most recently created logged model\n  let selectedPath = initialSelectedArtifactPath;\n  if (!selectedPath) {\n    const loggedModelPaths = getLoggedModelPathsFromTags(ownProps.runTags ?? {});\n    if (loggedModelPaths.length > 0) {\n      selectedPath = _.first(loggedModelPaths);\n    }\n  }\n  return { artifactRootUri, apis, initialSelectedArtifactPath: selectedPath };\n};\n\nconst mapDispatchToProps = {\n  listArtifactsApi,\n  listArtifactsLoggedModelApi,\n  searchModelVersionsApi,\n};\n\nexport const ConnectedArtifactPage = connect(mapStateToProps, mapDispatchToProps)(ArtifactPageImpl);\n\nexport default withRouterNext(ConnectedArtifactPage);\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../../types';\nimport ArtifactPage from '../ArtifactPage';\nimport { useMediaQuery } from '@databricks/web-shared/hooks';\n\n/**\n * A run page tab containing the artifact browser\n */\nexport const RunViewArtifactTab = ({\n  runTags,\n  artifactUri,\n  runUuid,\n}: {\n  runUuid: string;\n  experimentId: string;\n  artifactUri?: string;\n  runTags: Record<string, KeyValueEntity>;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  // Use scrollable artifact area only for non-xs screens\n  const useFullHeightPage = useMediaQuery(`(min-width: ${theme.responsive.breakpoints.sm}px)`);\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        overflow: 'hidden',\n        display: 'flex',\n        paddingBottom: theme.spacing.md,\n        position: 'relative',\n      }}\n    >\n      <ArtifactPage\n        runUuid={runUuid}\n        runTags={runTags}\n        useAutoHeight={useFullHeightPage}\n        artifactRootUri={artifactUri}\n      />\n    </div>\n  );\n};\n","import { shouldEnableRunDetailsPageTracesTab } from '../../../common/utils/FeatureUtils';\nimport { useParams } from '../../../common/utils/RoutingUtils';\nimport { RunPageTabName } from '../../constants';\n\n/**\n * Returns the run view's active tab.\n * - Supports multi-slash artifact paths (hence '*' catch-all param)\n * - Supports both new (/artifacts/...) and previous (/artifactPath/...) routes\n */\nexport const useRunViewActiveTab = (): RunPageTabName => {\n  const { '*': tabParam } = useParams<{ '*': string }>();\n  if (tabParam === 'model-metrics') {\n    return RunPageTabName.MODEL_METRIC_CHARTS;\n  }\n  if (tabParam === 'system-metrics') {\n    return RunPageTabName.SYSTEM_METRIC_CHARTS;\n  }\n  if (shouldEnableRunDetailsPageTracesTab() && tabParam === 'traces') {\n    return RunPageTabName.TRACES;\n  }\n  if (tabParam?.match(/^(artifactPath|artifacts)/)) {\n    return RunPageTabName.ARTIFACTS;\n  }\n\n  return RunPageTabName.OVERVIEW;\n};\n","import { LegacyTabs } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { useNavigate, useParams } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\nimport { RunPageTabName } from '../../constants';\nimport { useRunViewActiveTab } from './useRunViewActiveTab';\nimport { useState } from 'react';\nimport { PreviewBadge } from '../../../shared/building_blocks/PreviewBadge';\nimport { shouldEnableRunDetailsPageTracesTab } from '../../../common/utils/FeatureUtils';\n\n// Set of tabs that when active, the margin of the tab selector should be removed for better displaying\nconst TABS_WITHOUT_MARGIN = [RunPageTabName.ARTIFACTS, RunPageTabName.EVALUATIONS];\n\n/**\n * Mode switcher for the run details page.\n */\nexport const RunViewModeSwitch = () => {\n  const { experimentId, runUuid } = useParams<{ runUuid: string; experimentId: string }>();\n  const navigate = useNavigate();\n  const currentTab = useRunViewActiveTab();\n  const [removeTabMargin, setRemoveTabMargin] = useState(TABS_WITHOUT_MARGIN.includes(currentTab));\n\n  const onTabChanged = (newTabKey: string) => {\n    if (!experimentId || !runUuid || currentTab === newTabKey) {\n      return;\n    }\n\n    setRemoveTabMargin(TABS_WITHOUT_MARGIN.includes(newTabKey as RunPageTabName));\n\n    if (newTabKey === RunPageTabName.OVERVIEW) {\n      navigate(Routes.getRunPageRoute(experimentId, runUuid));\n      return;\n    }\n    navigate(Routes.getRunPageTabRoute(experimentId, runUuid, newTabKey));\n  };\n\n  return (\n    // @ts-expect-error TS(2322)\n    <LegacyTabs activeKey={currentTab} onChange={onTabChanged} tabBarStyle={{ margin: removeTabMargin && '0px' }}>\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage defaultMessage=\"Overview\" description=\"Run details page > tab selector > overview tab\" />\n        }\n        key={RunPageTabName.OVERVIEW}\n      />\n\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage\n            defaultMessage=\"Model metrics\"\n            description=\"Run details page > tab selector > Model metrics tab\"\n          />\n        }\n        key={RunPageTabName.MODEL_METRIC_CHARTS}\n      />\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage\n            defaultMessage=\"System metrics\"\n            description=\"Run details page > tab selector > Model metrics tab\"\n          />\n        }\n        key={RunPageTabName.SYSTEM_METRIC_CHARTS}\n      />\n      {shouldEnableRunDetailsPageTracesTab() && (\n        <LegacyTabs.TabPane\n          tab={<FormattedMessage defaultMessage=\"Traces\" description=\"Run details page > tab selector > Traces tab\" />}\n          key={RunPageTabName.TRACES}\n        />\n      )}\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage defaultMessage=\"Artifacts\" description=\"Run details page > tab selector > artifacts tab\" />\n        }\n        key={RunPageTabName.ARTIFACTS}\n      />\n    </LegacyTabs>\n  );\n};\n","import {\n  Button,\n  ChevronDownIcon,\n  DropdownMenu,\n  NewWindowIcon,\n  Tag,\n  LegacyTooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { first, last, orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport Utils from '../../../common/utils/Utils';\nimport { RegisterModel } from '../../../model-registry/components/RegisterModel';\nimport { ModelVersionStatusIcons } from '../../../model-registry/constants';\nimport { ModelRegistryRoutes } from '../../../model-registry/routes';\nimport type { ReduxState } from '../../../redux-types';\nimport Routes from '../../routes';\nimport { KeyValueEntity, ModelVersionInfoEntity } from '../../types';\nimport { ReactComponent as RegisteredModelOkIcon } from '../../../common/static/registered-model-grey-ok.svg';\n\ninterface LoggedModelWithRegistrationInfo {\n  path: string;\n  absolutePath: string;\n  registeredVersions: ModelVersionInfoEntity[];\n}\n\nexport function LoggedModelsDropdownContent({\n  models,\n  onRegisterClick,\n  experimentId,\n  runUuid,\n}: {\n  models: LoggedModelWithRegistrationInfo[];\n  onRegisterClick: (model: LoggedModelWithRegistrationInfo) => void;\n  experimentId: string;\n  runUuid: string;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const renderSection = (title: string, sectionModels: LoggedModelWithRegistrationInfo[]) => {\n    return (\n      <DropdownMenu.Group>\n        <DropdownMenu.Label>{title}</DropdownMenu.Label>\n        {sectionModels.map((model) => {\n          const registeredModel = first(model.registeredVersions);\n          if (!registeredModel) {\n            return (\n              <DropdownMenu.Item\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_50\"\n                onClick={() => onRegisterClick(model)}\n                key={model.absolutePath}\n              >\n                <div css={{ marginRight: theme.spacing.md }}>{last(model.path.split('/'))}</div>\n                <DropdownMenu.HintColumn>\n                  <Link\n                    target=\"_blank\"\n                    to={Routes.getRunPageTabRoute(experimentId, runUuid, 'artifacts/' + model.path)}\n                  >\n                    <Button\n                      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_58\"\n                      type=\"link\"\n                      size=\"small\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                      }}\n                      endIcon={<NewWindowIcon />}\n                    >\n                      <FormattedMessage\n                        defaultMessage=\"View model\"\n                        description=\"Run page > Header > Register model dropdown > View model button label\"\n                      />\n                    </Button>\n                  </Link>\n                </DropdownMenu.HintColumn>\n              </DropdownMenu.Item>\n            );\n          }\n          const { status, name, version } = registeredModel;\n\n          return (\n            <Link target=\"_blank\" to={getRegisteredModelVersionLink(registeredModel)} key={model.absolutePath}>\n              <DropdownMenu.Item componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_80\">\n                <DropdownMenu.IconWrapper css={{ display: 'flex', alignItems: 'center' }}>\n                  {status === 'READY' ? <RegisteredModelOkIcon /> : ModelVersionStatusIcons[status]}\n                </DropdownMenu.IconWrapper>\n                <span css={{ marginRight: theme.spacing.md }}>\n                  {name}\n                  <Tag\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_90\"\n                    css={{ marginLeft: 8, marginRight: 4 }}\n                  >\n                    v{version}\n                  </Tag>\n                </span>\n                <DropdownMenu.HintColumn>\n                  <Button\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_89\"\n                    type=\"link\"\n                    size=\"small\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                    }}\n                    endIcon={<NewWindowIcon />}\n                  >\n                    <FormattedMessage\n                      defaultMessage=\"Go to model\"\n                      description=\"Run page > Header > Register model dropdown > Go to model button label\"\n                    />\n                  </Button>\n                </DropdownMenu.HintColumn>\n              </DropdownMenu.Item>\n            </Link>\n          );\n        })}\n      </DropdownMenu.Group>\n    );\n  };\n  const registeredModels = models.filter((model) => model.registeredVersions.length > 0);\n  const unregisteredModels = models.filter((model) => !model.registeredVersions.length);\n  return (\n    <>\n      {unregisteredModels.length ? renderSection('Unregistered models', unregisteredModels) : null}\n      {unregisteredModels.length && registeredModels.length ? <DropdownMenu.Separator /> : null}\n      {registeredModels.length ? renderSection('Registered models', registeredModels) : null}\n    </>\n  );\n}\n\nconst getRegisteredModelVersionLink = (modelVersion: ModelVersionInfoEntity) => {\n  const { name, version } = modelVersion;\n  return ModelRegistryRoutes.getModelVersionPageRoute(name, version);\n};\n\nexport const RunViewHeaderRegisterModelButton = ({\n  runUuid,\n  experimentId,\n  runTags,\n  artifactRootUri,\n}: {\n  runUuid: string;\n  experimentId: string;\n  runTags: Record<string, KeyValueEntity>;\n  artifactRootUri?: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const registeredModelVersions = useSelector((state: ReduxState) =>\n    orderBy(state.entities.modelVersionsByRunUuid[runUuid]),\n  );\n  const loggedModelPaths = useMemo(\n    () => (runTags ? Utils.getLoggedModelsFromTags(runTags).map(({ artifactPath }) => artifactPath) : []),\n    [runTags],\n  );\n\n  const models = useMemo<LoggedModelWithRegistrationInfo[]>(\n    () =>\n      orderBy(\n        loggedModelPaths.map((path) => ({\n          path,\n          absolutePath: `${artifactRootUri}/${path}`,\n          registeredVersions:\n            registeredModelVersions?.filter(({ source }) => source === `${artifactRootUri}/${path}`) || [],\n        })),\n        (model) => parseInt(model.registeredVersions[0]?.version || '0', 10),\n        'desc',\n      ),\n    [loggedModelPaths, registeredModelVersions, artifactRootUri],\n  );\n\n  const [selectedModelToRegister, setSelectedModelToRegister] = useState<LoggedModelWithRegistrationInfo | null>(null);\n\n  if (models.length > 1) {\n    const modelsRegistered = models.filter((model) => model.registeredVersions.length > 0);\n\n    return (\n      <>\n        {selectedModelToRegister && (\n          <RegisterModel\n            runUuid={runUuid}\n            modelPath={selectedModelToRegister.absolutePath}\n            modelRelativePath={selectedModelToRegister.path}\n            disabled={false}\n            showButton={false}\n            modalVisible\n            onCloseModal={() => setSelectedModelToRegister(null)}\n          />\n        )}\n        <DropdownMenu.Root modal={false}>\n          <LegacyTooltip\n            placement=\"bottom\"\n            title={\n              <FormattedMessage\n                defaultMessage=\"{registeredCount}/{loggedCount} logged models are registered\"\n                description=\"Run page > Header > Register model dropdown > Button tooltip\"\n                values={{ registeredCount: modelsRegistered.length, loggedCount: models.length }}\n              />\n            }\n          >\n            <DropdownMenu.Trigger asChild>\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_195\"\n                type=\"primary\"\n                endIcon={<ChevronDownIcon />}\n              >\n                <FormattedMessage\n                  defaultMessage=\"Register model\"\n                  description=\"Run page > Header > Register model dropdown > Button label when some models are not registered\"\n                />\n              </Button>\n            </DropdownMenu.Trigger>\n          </LegacyTooltip>\n          <DropdownMenu.Content align=\"end\">\n            <LoggedModelsDropdownContent\n              models={models}\n              onRegisterClick={setSelectedModelToRegister}\n              experimentId={experimentId}\n              runUuid={runUuid}\n            />\n          </DropdownMenu.Content>\n        </DropdownMenu.Root>\n      </>\n    );\n  }\n\n  const singleModel = first(models);\n\n  if (!singleModel) {\n    return null;\n  }\n\n  const registeredModelVersion = first(singleModel.registeredVersions);\n\n  if (registeredModelVersion) {\n    return (\n      <Link\n        to={getRegisteredModelVersionLink(registeredModelVersion)}\n        target=\"_blank\"\n        css={{ marginLeft: theme.spacing.sm }}\n      >\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_231\"\n          endIcon={<NewWindowIcon />}\n          type=\"link\"\n        >\n          Model registered\n        </Button>\n      </Link>\n    );\n  }\n  return (\n    <RegisterModel\n      disabled={false}\n      runUuid={runUuid}\n      modelPath={singleModel.absolutePath}\n      modelRelativePath={singleModel.path}\n      showButton\n      buttonType=\"primary\"\n    />\n  );\n};\n","import { FormattedMessage } from 'react-intl';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport { OverflowMenu, PageHeader } from '../../../shared/building_blocks/PageHeader';\nimport Routes from '../../routes';\nimport { ExperimentEntity, KeyValueEntity } from '../../types';\nimport { RunViewModeSwitch } from './RunViewModeSwitch';\nimport Utils from '../../../common/utils/Utils';\nimport { RunViewHeaderRegisterModelButton } from './RunViewHeaderRegisterModelButton';\nimport type { UseGetRunQueryResponseExperiment } from './hooks/useGetRunQuery';\n\n/**\n * Run details page header component, common for all page view modes\n */\nexport const RunViewHeader = ({\n  hasComparedExperimentsBefore,\n  comparedExperimentIds = [],\n  experiment,\n  runDisplayName,\n  runTags,\n  runParams,\n  runUuid,\n  handleRenameRunClick,\n  handleDeleteRunClick,\n  artifactRootUri,\n}: {\n  hasComparedExperimentsBefore?: boolean;\n  comparedExperimentIds?: string[];\n  runDisplayName: string;\n  runUuid: string;\n  runTags: Record<string, KeyValueEntity>;\n  runParams: Record<string, KeyValueEntity>;\n  experiment: ExperimentEntity | UseGetRunQueryResponseExperiment;\n  handleRenameRunClick: () => void;\n  handleDeleteRunClick?: () => void;\n  artifactRootUri?: string;\n}) => {\n  function getExperimentPageLink() {\n    return hasComparedExperimentsBefore && comparedExperimentIds ? (\n      <Link to={Routes.getCompareExperimentsPageRoute(comparedExperimentIds)}>\n        <FormattedMessage\n          defaultMessage=\"Displaying Runs from {numExperiments} Experiments\"\n          // eslint-disable-next-line max-len\n          description=\"Breadcrumb nav item to link to the compare-experiments page on compare runs page\"\n          values={{\n            numExperiments: comparedExperimentIds.length,\n          }}\n        />\n      </Link>\n    ) : (\n      <Link to={Routes.getExperimentPageRoute(experiment?.experimentId ?? '')} data-test-id=\"experiment-runs-link\">\n        {experiment.name}\n      </Link>\n    );\n  }\n\n  const breadcrumbs = [getExperimentPageLink()];\n\n  return (\n    <div css={{ flexShrink: 0 }}>\n      <PageHeader\n        title={<span data-test-id=\"runs-header\">{runDisplayName}</span>}\n        breadcrumbs={breadcrumbs}\n        /* prettier-ignore */\n      >\n        <OverflowMenu\n          menu={[\n            {\n              id: 'overflow-rename-button',\n              onClick: handleRenameRunClick,\n              itemName: (\n                <FormattedMessage defaultMessage=\"Rename\" description=\"Menu item to rename an experiment run\" />\n              ),\n            },\n            ...(handleDeleteRunClick\n              ? [\n                  {\n                    id: 'overflow-delete-button',\n                    onClick: handleDeleteRunClick,\n                    itemName: (\n                      <FormattedMessage defaultMessage=\"Delete\" description=\"Menu item to delete an experiment run\" />\n                    ),\n                  },\n                ]\n              : []),\n          ]}\n        />\n\n        <RunViewHeaderRegisterModelButton\n          runUuid={runUuid}\n          experimentId={experiment?.experimentId ?? ''}\n          runTags={runTags}\n          artifactRootUri={artifactRootUri}\n        />\n      </PageHeader>\n      <RunViewModeSwitch />\n    </div>\n  );\n};\n","import { first, indexOf, last, orderBy } from 'lodash';\nimport { useMemo, useRef, useState } from 'react';\nimport LocalStorageUtils from '../../../../common/utils/LocalStorageUtils';\n\nconst STORAGE_ITEM_KEY = 'ChartOrder';\n\n/**\n * Provides convenience functions for move chart up/down actions\n */\nexport const useChartMoveUpDownFunctions = (\n  metricKeys: string[],\n  onReorder: (fromElement: string, toElement: string) => void,\n) => {\n  const canMoveUp = (metricKey: string) => metricKey !== first(metricKeys);\n  const canMoveDown = (metricKey: string) => metricKey !== last(metricKeys);\n  const moveChartUp = (metricKey: string) => {\n    const previous = metricKeys[indexOf(metricKeys, metricKey) - 1];\n    onReorder(metricKey, previous);\n  };\n  const moveChartDown = (metricKey: string) => {\n    const next = metricKeys[indexOf(metricKeys, metricKey) + 1];\n    onReorder(metricKey, next);\n  };\n\n  return { canMoveDown, canMoveUp, moveChartDown, moveChartUp };\n};\n\nexport const useOrderedCharts = (metricKeys: string[], storageNamespace: string, storageKey: string) => {\n  const localStorageStore = useRef(LocalStorageUtils.getStoreForComponent(storageNamespace, storageKey));\n\n  const [currentOrder, setCurrentOrder] = useState<string[] | undefined>(() => {\n    try {\n      const savedOrder = localStorageStore.current.getItem(STORAGE_ITEM_KEY);\n      if (savedOrder) return JSON.parse(savedOrder);\n    } catch {\n      return undefined;\n    }\n    return undefined;\n  });\n\n  const onReorderChart = (\n    /**\n     * \"From\" chart key, e.g. idenfifier of chart being dragged\n     */\n    fromMetricKey: string,\n    /**\n     * \"To\" chart key, e.g. idenfifier of chart being dropped on\n     */\n    toMetricKey: string,\n  ) => {\n    const sourceOrder = currentOrder ? [...currentOrder] : [...metricKeys];\n    const indexSource = indexOf(sourceOrder, fromMetricKey);\n    const indexTarget = indexOf(sourceOrder, toMetricKey);\n\n    // Swap chart places\n    [sourceOrder[indexSource], sourceOrder[indexTarget]] = [sourceOrder[indexTarget], sourceOrder[indexSource]];\n\n    // Save the new order and persist it\n    setCurrentOrder(sourceOrder);\n    localStorageStore.current.setItem(STORAGE_ITEM_KEY, JSON.stringify(sourceOrder));\n  };\n\n  const orderedMetricKeys = useMemo(\n    () =>\n      orderBy(metricKeys, (key) =>\n        currentOrder?.includes(key) ? indexOf(currentOrder, key) : Number.MAX_SAFE_INTEGER,\n      ),\n    [currentOrder, metricKeys],\n  );\n\n  return { orderedMetricKeys, onReorderChart };\n};\n","import type { MetricHistoryByName, RunInfoEntity } from '../../types';\nimport {\n  containsMultipleRunsTooltipData,\n  RunsChartsTooltipMode,\n  type RunsChartsTooltipBodyProps,\n} from '../runs-charts/hooks/useRunsChartsTooltip';\nimport { isSystemMetricKey } from '../../utils/MetricsUtils';\nimport Utils from '../../../common/utils/Utils';\nimport { FormattedMessage } from 'react-intl';\nimport { isUndefined } from 'lodash';\nimport type {\n  RunsCompareMultipleTracesTooltipData,\n  RunsMetricsSingleTraceTooltipData,\n} from '../runs-charts/components/RunsMetricsLinePlot';\nimport type { RunsMetricsBarPlotHoverData } from '../runs-charts/components/RunsMetricsBarPlot';\nimport { RunsMultipleTracesTooltipBody } from '../runs-charts/components/RunsMultipleTracesTooltipBody';\n\n/**\n * Tooltip body displayed when hovering over run view metric charts\n */\nexport const RunViewChartTooltipBody = ({\n  contextData: { metricsForRun },\n  hoverData,\n  chartData: { metricKey },\n  isHovering,\n  mode,\n}: RunsChartsTooltipBodyProps<\n  { metricsForRun: MetricHistoryByName },\n  { metricKey: string },\n  RunsMetricsBarPlotHoverData | RunsMetricsSingleTraceTooltipData | RunsCompareMultipleTracesTooltipData\n>) => {\n  const singleTraceHoverData = containsMultipleRunsTooltipData(hoverData) ? hoverData.hoveredDataPoint : hoverData;\n\n  if (\n    mode === RunsChartsTooltipMode.MultipleTracesWithScanline &&\n    containsMultipleRunsTooltipData(hoverData) &&\n    isHovering\n  ) {\n    return <RunsMultipleTracesTooltipBody hoverData={hoverData} />;\n  }\n\n  if (!singleTraceHoverData?.metricEntity) {\n    return null;\n  }\n\n  const { timestamp, step, value } = singleTraceHoverData.metricEntity;\n\n  const metricContainsHistory = metricsForRun?.[metricKey]?.length > 1;\n  const isSystemMetric = isSystemMetricKey(metricKey);\n  const displayTimestamp = metricContainsHistory && isSystemMetric && !isUndefined(timestamp);\n  const displayStep = metricContainsHistory && !isSystemMetric && !isUndefined(step);\n\n  return (\n    <div>\n      {displayStep && (\n        <div css={styles.valueField}>\n          <strong>\n            <FormattedMessage defaultMessage=\"Step\" description=\"Run page > Charts tab > Chart tooltip > Step label\" />:\n          </strong>{' '}\n          {step}\n        </div>\n      )}\n      {displayTimestamp && (\n        <div css={styles.valueField}>\n          <strong>\n            <FormattedMessage\n              defaultMessage=\"Timestamp\"\n              description=\"Run page > Charts tab > Chart tooltip > Timestamp label\"\n            />\n            :\n          </strong>{' '}\n          {Utils.formatTimestamp(timestamp)}\n        </div>\n      )}\n      {value && (\n        <div css={styles.valueField}>\n          <strong>{metricKey}:</strong> {value}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst styles = {\n  valueField: {\n    maxWidth: 300,\n    whiteSpace: 'nowrap' as const,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { RunsChartsTooltipMode, useRunsChartsTooltip } from '../runs-charts/hooks/useRunsChartsTooltip';\nimport { useMemo } from 'react';\nimport { RunsMetricsLinePlot, RunsMetricsLinePlotProps } from '../runs-charts/components/RunsMetricsLinePlot';\nimport { isSystemMetricKey } from '../../utils/MetricsUtils';\nimport type { MetricEntity, RunInfoEntity } from '../../types';\nimport { shouldEnableDeepLearningUIPhase3 } from '../../../common/utils/FeatureUtils';\nimport { RunsChartsLineChartXAxisType } from '../runs-charts/components/RunsCharts.common';\nimport type { UseGetRunQueryResponseRunInfo } from './hooks/useGetRunQuery';\n\nexport interface RunViewMetricHistoryChartProps extends Pick<RunsMetricsLinePlotProps, 'xRange' | 'yRange'> {\n  metricKey: string;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  metricsHistory: MetricEntity[];\n  onUpdate: RunsMetricsLinePlotProps['onUpdate'];\n}\n\n/**\n * Chart variant displaying metric history using line plot\n */\nexport const RunViewMetricHistoryChart = ({\n  runInfo,\n  metricKey,\n  metricsHistory,\n  onUpdate,\n  xRange,\n  yRange,\n}: RunViewMetricHistoryChartProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  const usingMultipleRunsHoverTooltip = shouldEnableDeepLearningUIPhase3();\n\n  const { setTooltip, resetTooltip } = useRunsChartsTooltip(\n    { metricKey },\n    usingMultipleRunsHoverTooltip ? RunsChartsTooltipMode.MultipleTracesWithScanline : RunsChartsTooltipMode.Simple,\n  );\n\n  // Prepare a single trace for the line chart\n  const chartData = useMemo(\n    () => [\n      {\n        uuid: runInfo.runUuid ?? '',\n        displayName: runInfo.runName ?? '',\n        runInfo,\n        metricsHistory: { [metricKey]: metricsHistory },\n        color: theme.colors.primary,\n      },\n    ],\n    [runInfo, metricsHistory, metricKey, theme],\n  );\n\n  return (\n    <RunsMetricsLinePlot\n      metricKey={metricKey}\n      runsData={chartData}\n      xAxisKey={isSystemMetricKey(metricKey) ? RunsChartsLineChartXAxisType.TIME : RunsChartsLineChartXAxisType.STEP}\n      selectedXAxisMetricKey=\"\"\n      onHover={setTooltip}\n      onUnhover={resetTooltip}\n      useDefaultHoverBox={false}\n      lineSmoothness={0}\n      xRange={xRange}\n      yRange={yRange}\n      onUpdate={onUpdate}\n    />\n  );\n};\n","import { useMemo } from 'react';\nimport { RunsMetricsBarPlot } from '../runs-charts/components/RunsMetricsBarPlot';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { useRunsChartsTooltip } from '../runs-charts/hooks/useRunsChartsTooltip';\nimport { MetricEntity, RunInfoEntity } from '../../types';\nimport type { UseGetRunQueryResponseRunInfo } from './hooks/useGetRunQuery';\n\nexport interface RunViewSingleMetricChartProps {\n  metricKey: string;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  metricEntry?: MetricEntity;\n}\n\n/**\n * Chart variant displaying single (non-history) value using bar plot\n */\nexport const RunViewMetricSingleValueChart = ({ runInfo, metricKey, metricEntry }: RunViewSingleMetricChartProps) => {\n  const { theme } = useDesignSystemTheme();\n  const { setTooltip, resetTooltip } = useRunsChartsTooltip({ metricKey });\n\n  // Prepare a single trace for the line chart\n  const chartData = useMemo(\n    () =>\n      metricEntry\n        ? [\n            {\n              uuid: runInfo.runUuid ?? '',\n              displayName: runInfo.runName ?? '',\n              runInfo,\n              metrics: { [metricKey]: metricEntry },\n              color: theme.colors.primary,\n            },\n          ]\n        : [],\n    [runInfo, metricEntry, metricKey, theme],\n  );\n\n  return (\n    <RunsMetricsBarPlot\n      metricKey={metricKey}\n      runsData={chartData}\n      height={260}\n      onHover={setTooltip}\n      onUnhover={resetTooltip}\n      useDefaultHoverBox={false}\n      displayRunNames={false}\n      displayMetricKey={false}\n    />\n  );\n};\n","import {\n  Button,\n  DragIcon,\n  DropdownMenu,\n  OverflowIcon,\n  Spinner,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport type { ConnectDragSource } from 'react-dnd';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * Header for a single run view chart box\n */\nexport const RunViewMetricChartHeader = ({\n  dragHandleRef,\n  metricKey,\n  canMoveUp,\n  canMoveDown,\n  onMoveUp,\n  onMoveDown,\n  onRefresh,\n  isRefreshing = false,\n}: {\n  dragHandleRef: ConnectDragSource;\n  metricKey: string;\n  canMoveUp: boolean;\n  canMoveDown: boolean;\n  onMoveUp: () => void;\n  onMoveDown: () => void;\n  onRefresh: () => void;\n  isRefreshing?: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        gap: theme.spacing.sm,\n        justifyContent: 'space-between',\n        marginBottom: theme.spacing.sm,\n        alignItems: 'center',\n      }}\n    >\n      <div\n        css={{\n          display: 'flex',\n          gap: theme.spacing.sm,\n          alignItems: 'center',\n          overflow: 'hidden',\n        }}\n      >\n        <DragIcon\n          css={{\n            cursor: 'grab',\n          }}\n          ref={dragHandleRef}\n        />\n        <Typography.Title level={4} ellipsis withoutMargins>\n          {metricKey}\n        </Typography.Title>\n      </div>\n      <div css={{ flex: 1 }} />\n      {isRefreshing && (\n        <Spinner\n          label={\n            <FormattedMessage\n              defaultMessage=\"Chart data is refreshing\"\n              description=\"Run page > Charts tab > Chart box header > Refreshing chart accessible label\"\n            />\n          }\n        />\n      )}\n      <DropdownMenu.Root modal={false}>\n        <DropdownMenu.Trigger asChild>\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewmetricchartheader.tsx_78\"\n            css={{ flexShrink: 0 }}\n            icon={<OverflowIcon />}\n            size=\"small\"\n            title=\"Chart options\"\n          />\n        </DropdownMenu.Trigger>\n        <DropdownMenu.Content>\n          <DropdownMenu.Item\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewmetricchartheader.tsx_87\"\n            disabled={!canMoveUp}\n            onClick={onMoveUp}\n          >\n            <FormattedMessage\n              defaultMessage=\"Move up\"\n              description=\"Run page > Charts tab > Chart box header > Move up dropdown option\"\n            />\n          </DropdownMenu.Item>\n          <DropdownMenu.Item\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewmetricchartheader.tsx_93\"\n            disabled={!canMoveDown}\n            onClick={onMoveDown}\n          >\n            <FormattedMessage\n              defaultMessage=\"Move down\"\n              description=\"Run page > Charts tab > Chart box header > Move down dropdown option\"\n            />\n          </DropdownMenu.Item>\n        </DropdownMenu.Content>\n      </DropdownMenu.Root>\n    </div>\n  );\n};\n","import type { Figure } from 'react-plotly.js';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport type { RunInfoEntity } from '../../types';\nimport { Empty, LegacySkeleton, WarningIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { useRunsChartsTooltip } from '../runs-charts/hooks/useRunsChartsTooltip';\nimport { isSystemMetricKey } from '../../utils/MetricsUtils';\nimport { useSampledMetricHistory } from '../runs-charts/hooks/useSampledMetricHistory';\nimport { useSelector } from 'react-redux';\nimport { ReduxState } from '../../../redux-types';\nimport { compact, isEqual } from 'lodash';\nimport { RunViewMetricHistoryChart } from './RunViewMetricHistoryChart';\nimport { RunViewMetricSingleValueChart } from './RunViewMetricSingleValueChart';\nimport { first } from 'lodash';\nimport { ErrorWrapper } from '../../../common/utils/ErrorWrapper';\nimport { FormattedMessage } from 'react-intl';\nimport { findChartStepsByTimestamp } from '../runs-charts/utils/findChartStepsByTimestamp';\nimport { useDragAndDropElement } from '../../../common/hooks/useDragAndDropElement';\nimport { RunViewMetricChartHeader } from './RunViewMetricChartHeader';\nimport { useIsInViewport } from '../runs-charts/hooks/useIsInViewport';\nimport { ChartRefreshManager } from './useChartRefreshManager';\nimport type { UseGetRunQueryResponseRunInfo } from './hooks/useGetRunQuery';\n\nexport interface RunViewMetricChartProps {\n  /**\n   * Key of the metric that this chart is displayed for.\n   */\n  metricKey: string;\n  /**\n   * Run info for the run that this chart is displayed for.\n   */\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  /**\n   * Key of the drag group that this chart belongs to.\n   */\n  dragGroupKey: string;\n  /**\n   * Callback to reorder the chart when swapping with the other chart.\n   */\n  onReorderWith: (draggedKey: string, targetDropKey: string) => void;\n  /**\n   * If true, the chart can be moved up in the list of charts.\n   */\n  canMoveUp: boolean;\n  /**\n   * If true, the chart can be moved down in the list of charts.\n   */\n  canMoveDown: boolean;\n  /**\n   * Callback to move the chart up in the list of charts.\n   */\n  onMoveUp: () => void;\n  /**\n   * Callback to move the chart down in the list of charts.\n   */\n  onMoveDown: () => void;\n  /**\n   * Reference to a overarching refresh manager (entity that will trigger refresh of subscribed charts)\n   */\n  chartRefreshManager: ChartRefreshManager;\n}\n\n/**\n * A single chart component displayed in run view metric charts tab.\n */\nexport const RunViewMetricChart = ({\n  metricKey,\n  runInfo,\n  dragGroupKey,\n  onReorderWith,\n  canMoveUp,\n  canMoveDown,\n  onMoveUp,\n  onMoveDown,\n  chartRefreshManager,\n}: RunViewMetricChartProps) => {\n  const { dragHandleRef, dragPreviewRef, dropTargetRef, isDragging, isOver } = useDragAndDropElement({\n    dragGroupKey,\n    dragKey: metricKey,\n    onDrop: onReorderWith,\n  });\n\n  const runUuidsArray = useMemo(() => compact([runInfo.runUuid]), [runInfo]);\n  const metricKeys = useMemo(() => [metricKey], [metricKey]);\n  const [xRange, setRange] = useState<[number | string, number | string] | undefined>(undefined);\n  const { theme } = useDesignSystemTheme();\n\n  const [stepRange, setStepRange] = useState<[number, number] | undefined>(undefined);\n\n  const fullMetricHistoryForRun = useSelector(\n    (state: ReduxState) => state.entities.sampledMetricsByRunUuid[runInfo.runUuid ?? '']?.[metricKey],\n  );\n\n  const { elementRef, isInViewport } = useIsInViewport();\n\n  const { isLoading, isRefreshing, resultsByRunUuid, refresh } = useSampledMetricHistory({\n    runUuids: runUuidsArray,\n    metricKeys,\n    enabled: isInViewport,\n    range: stepRange,\n    maxResults: 320,\n  });\n\n  const { metricsHistory, error } = resultsByRunUuid[runInfo.runUuid ?? '']?.[metricKey] || {};\n\n  const isSingleMetricEntry = !isLoading && metricsHistory?.length === 1;\n\n  const updateStepRange = (newStepRange: [number, number] | undefined) =>\n    setStepRange((current) => {\n      if (isEqual(current, newStepRange)) {\n        return current;\n      }\n      return newStepRange;\n    });\n\n  const { destroyTooltip } = useRunsChartsTooltip({ metricKey });\n\n  useEffect(() => {\n    if (isLoading) {\n      destroyTooltip();\n    }\n  }, [destroyTooltip, isLoading]);\n\n  // Subscribe to the overarching refresh manager if chart is in viewport\n  useEffect(() => {\n    if (isInViewport) {\n      return chartRefreshManager.registerRefreshCallback(() => {\n        refresh();\n      });\n    }\n    return () => {};\n  }, [chartRefreshManager, refresh, isInViewport]);\n\n  const yRange = useRef<[number, number] | undefined>(undefined);\n\n  const chartLayoutUpdated = ({ layout }: Readonly<Figure>) => {\n    // Remove saved range if chart is back to default viewport\n    if (layout.xaxis?.autorange === true) {\n      setRange(undefined);\n      updateStepRange(undefined);\n    }\n\n    const newYRange = layout.yaxis?.range;\n    yRange.current = newYRange ? [...(newYRange as [number, number])] : undefined;\n\n    // If the custom range is used, memoize it\n    if (layout.xaxis?.autorange === false && layout.xaxis?.range) {\n      setRange([...(layout.xaxis.range as [number, number])]);\n      // If we're dealing with time-based chart axis, find corresponding steps based on timestamp\n      if (isSystemMetricKey(metricKey)) {\n        updateStepRange(findChartStepsByTimestamp(fullMetricHistoryForRun, layout.xaxis.range as [number, number]));\n      } else {\n        // If we're dealing with step-based chart axis, use those steps but incremented/decremented\n        const lowerBound = Math.floor(layout.xaxis?.range[0]);\n        const upperBound = Math.ceil(layout.xaxis?.range[1]);\n        updateStepRange(lowerBound && upperBound ? [lowerBound - 1, upperBound + 1] : undefined);\n      }\n    }\n  };\n  const { resetTooltip } = useRunsChartsTooltip({ metricKey });\n\n  const getChartBody = () => {\n    if (error) {\n      return (\n        <div css={{ height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n          <Empty\n            image={<WarningIcon />}\n            description={error instanceof ErrorWrapper ? error.getMessageField() : error?.message?.toString()}\n            title={\n              <FormattedMessage\n                defaultMessage=\"Error while fetching chart data\"\n                description=\"Run page > Charts tab > Metric chart box > fetch error\"\n              />\n            }\n          />\n        </div>\n      );\n    }\n    if (isLoading || !metricsHistory) {\n      return <LegacySkeleton />;\n    }\n    if (!isInViewport) {\n      return null;\n    }\n    if (isSingleMetricEntry) {\n      return (\n        <RunViewMetricSingleValueChart metricKey={metricKey} metricEntry={first(metricsHistory)} runInfo={runInfo} />\n      );\n    }\n    return (\n      <RunViewMetricHistoryChart\n        metricKey={metricKey}\n        metricsHistory={metricsHistory}\n        runInfo={runInfo}\n        onUpdate={chartLayoutUpdated}\n        // X-axis is stateful since it's used for sampling recalculation. For Y-axis,\n        // the immediate value is sufficient. It will not kick off rerender, but in those\n        // cases the plotly will use last known range.\n        xRange={xRange}\n        yRange={yRange.current}\n      />\n    );\n  };\n\n  return (\n    <div\n      role=\"figure\"\n      ref={(element) => {\n        // Use this element for both drag preview and drop target\n        dragPreviewRef?.(element);\n        dropTargetRef?.(element);\n      }}\n      css={{\n        border: `1px solid ${theme.colors.borderDecorative}`,\n        borderRadius: theme.general.borderRadiusBase,\n        padding: theme.spacing.md,\n        background: theme.colors.backgroundPrimary,\n        position: 'relative',\n        overflow: 'hidden',\n      }}\n    >\n      <div ref={elementRef} onMouseLeave={resetTooltip}>\n        <RunViewMetricChartHeader\n          canMoveDown={canMoveDown}\n          canMoveUp={canMoveUp}\n          dragHandleRef={dragHandleRef}\n          metricKey={metricKey}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onRefresh={refresh}\n          isRefreshing={isRefreshing}\n        />\n        <div css={{ height: 300 }}>{getChartBody()}</div>\n      </div>\n      {isDragging && (\n        // Visual overlay for dragged source element\n        <div\n          css={{\n            position: 'absolute',\n            inset: 0,\n            backgroundColor: theme.isDarkMode ? theme.colors.blue800 : theme.colors.blue100,\n          }}\n        />\n      )}\n      {isOver && (\n        // Visual overlay for target drop element\n        <div\n          css={{\n            position: 'absolute',\n            inset: 0,\n            backgroundColor: theme.isDarkMode ? theme.colors.blue800 : theme.colors.blue100,\n            border: `2px dashed ${theme.colors.blue400}`,\n            opacity: 0.75,\n          }}\n        />\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\n\n/**\n * Manages refresh of charts. A simple publish-subscribe pattern that registers\n * callbacks and triggers them on refresh.\n */\nexport class ChartRefreshManager {\n  private refreshCallbacks: (() => void)[] = [];\n  public registerRefreshCallback(cb: () => void) {\n    this.refreshCallbacks.push(cb);\n    return () => {\n      this.refreshCallbacks = this.refreshCallbacks.filter((c) => c !== cb);\n    };\n  }\n  public refreshAllCharts() {\n    this.refreshCallbacks.forEach((cb) => cb());\n  }\n}\n\n/**\n * Returns local instance of chart refresh manager.\n */\nexport const useChartRefreshManager = () => {\n  const [refreshManager] = useState(() => new ChartRefreshManager());\n  return refreshManager;\n};\n","import {\n  Button,\n  Empty,\n  Input,\n  RefreshIcon,\n  SearchIcon,\n  Spacer,\n  Spinner,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { compact, mapValues, values } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { FormattedMessage, defineMessages, useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { getGridColumnSetup } from '../../../common/utils/CssGrid.utils';\nimport { ReduxState } from '../../../redux-types';\nimport { RunInfoEntity } from '../../types';\nimport { normalizeChartMetricKey } from '../../utils/MetricsUtils';\nimport { useChartMoveUpDownFunctions, useOrderedCharts } from '../runs-charts/hooks/useOrderedCharts';\nimport { RunsChartsTooltipWrapper } from '../runs-charts/hooks/useRunsChartsTooltip';\nimport { RunViewChartTooltipBody } from './RunViewChartTooltipBody';\nimport { RunViewMetricChart } from './RunViewMetricChart';\nimport { ChartRefreshManager, useChartRefreshManager } from './useChartRefreshManager';\nimport { DragAndDropProvider } from '../../../common/hooks/useDragAndDropElement';\nimport type { UseGetRunQueryResponseRunInfo } from './hooks/useGetRunQuery';\n\nconst { systemMetricChartsEmpty, modelMetricChartsEmpty } = defineMessages({\n  systemMetricChartsEmpty: {\n    defaultMessage: 'No system metrics recorded',\n    description: 'Run page > Charts tab > System charts section > empty label',\n  },\n  modelMetricChartsEmpty: {\n    defaultMessage: 'No model metrics recorded',\n    description: 'Run page > Charts tab > Model charts section > empty label',\n  },\n});\n\nconst EmptyMetricsFiltered = () => (\n  <Empty\n    title=\"No matching metric keys\"\n    description=\"All metrics in this section are filtered. Clear the search filter to see hidden metrics.\"\n  />\n);\n\nconst EmptyMetricsNotRecorded = ({ label }: { label: React.ReactNode }) => <Empty title={label} description={null} />;\n\nconst metricKeyMatchesFilter = (filter: string, metricKey: string) =>\n  metricKey.toLowerCase().startsWith(filter.toLowerCase()) ||\n  normalizeChartMetricKey(metricKey).toLowerCase().startsWith(filter.toLowerCase());\n\n/**\n * Internal component that displays a single collapsible section with charts\n */\nconst RunViewMetricChartsSection = ({\n  metricKeys,\n  search,\n  runInfo,\n  chartRefreshManager,\n  onReorderChart,\n}: {\n  metricKeys: string[];\n  search: string;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  onReorderChart: (sourceChartKey: string, targetChartKey: string) => void;\n  chartRefreshManager: ChartRefreshManager;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const filteredMetricKeys = metricKeys.filter((metricKey) => metricKeyMatchesFilter(search, metricKey));\n\n  const { canMoveDown, canMoveUp, moveChartDown, moveChartUp } = useChartMoveUpDownFunctions(\n    filteredMetricKeys,\n    onReorderChart,\n  );\n\n  const gridSetup = useMemo(\n    () => ({\n      ...getGridColumnSetup({\n        maxColumns: 3,\n        gap: theme.spacing.lg,\n        additionalBreakpoints: [{ breakpointWidth: 3 * 720, minColumnWidthForBreakpoint: 720 }],\n      }),\n      overflow: 'hidden',\n    }),\n    [theme],\n  );\n\n  return filteredMetricKeys.length ? (\n    <div css={gridSetup}>\n      {filteredMetricKeys.map((metricKey, index) => (\n        <RunViewMetricChart\n          // Use both metric name and index as a key,\n          // charts needs to be rerendered when order is changed\n          key={`${metricKey}-${index}`}\n          dragGroupKey=\"metricCharts\"\n          metricKey={metricKey}\n          runInfo={runInfo}\n          onReorderWith={onReorderChart}\n          canMoveUp={canMoveUp(metricKey)}\n          canMoveDown={canMoveDown(metricKey)}\n          onMoveDown={() => moveChartDown(metricKey)}\n          onMoveUp={() => moveChartUp(metricKey)}\n          chartRefreshManager={chartRefreshManager}\n        />\n      ))}\n    </div>\n  ) : (\n    <EmptyMetricsFiltered />\n  );\n};\n\n/**\n * Component displaying metric charts for a single run\n */\nexport const RunViewMetricCharts = ({\n  runInfo,\n  metricKeys,\n  mode,\n}: {\n  metricKeys: string[];\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  /**\n   * Whether to display model or system metrics. This affects labels and tooltips.\n   */\n  mode: 'model' | 'system';\n}) => {\n  const chartRefreshManager = useChartRefreshManager();\n\n  const metricsForRun = useSelector(({ entities }: ReduxState) => {\n    return mapValues(entities.sampledMetricsByRunUuid[runInfo.runUuid ?? ''], (metricsByRange) => {\n      return compact(\n        values(metricsByRange)\n          .map(({ metricsHistory }) => metricsHistory)\n          .flat(),\n      );\n    });\n  });\n\n  const [search, setSearch] = useState('');\n  const { formatMessage } = useIntl();\n\n  const { orderedMetricKeys, onReorderChart } = useOrderedCharts(metricKeys, 'RunView' + mode, runInfo.runUuid ?? '');\n\n  const noMetricsRecorded = !metricKeys.length;\n  const allMetricsFilteredOut =\n    !noMetricsRecorded && !metricKeys.some((metricKey) => metricKeyMatchesFilter(search, metricKey));\n  const showConfigArea = !noMetricsRecorded;\n  const { theme } = useDesignSystemTheme();\n  const showCharts = !noMetricsRecorded && !allMetricsFilteredOut;\n\n  const tooltipContext = useMemo(() => ({ runInfo, metricsForRun }), [runInfo, metricsForRun]);\n\n  const anyRunRefreshing = useSelector((store: ReduxState) => {\n    return values(store.entities.sampledMetricsByRunUuid[runInfo.runUuid ?? '']).some((metricsByRange) =>\n      values(metricsByRange).some(({ refreshing }) => refreshing),\n    );\n  });\n\n  return (\n    <DragAndDropProvider>\n      <div css={{ flex: 1, display: 'flex', flexDirection: 'column' }}>\n        <div css={{ flexShrink: 0 }}>\n          {showConfigArea && (\n            <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n              <Input\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewmetriccharts.tsx_165\"\n                role=\"searchbox\"\n                prefix={<SearchIcon />}\n                value={search}\n                allowClear\n                onChange={(e) => setSearch(e.target.value)}\n                placeholder={formatMessage({\n                  defaultMessage: 'Search metric charts',\n                  description: 'Run page > Charts tab > Filter metric charts input > placeholder',\n                })}\n              />\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewmetriccharts.tsx_176\"\n                icon={\n                  anyRunRefreshing ? <Spinner size=\"small\" css={{ marginRight: theme.spacing.sm }} /> : <RefreshIcon />\n                }\n                onClick={() => {\n                  if (!anyRunRefreshing) {\n                    chartRefreshManager.refreshAllCharts();\n                  }\n                }}\n              >\n                <FormattedMessage\n                  defaultMessage=\"Refresh\"\n                  description=\"Run page > Charts tab > Refresh all charts button label\"\n                />\n              </Button>\n            </div>\n          )}\n          <Spacer />\n        </div>\n        {noMetricsRecorded && (\n          <EmptyMetricsNotRecorded\n            label={<FormattedMessage {...(mode === 'model' ? modelMetricChartsEmpty : systemMetricChartsEmpty)} />}\n          />\n        )}\n        {allMetricsFilteredOut && <EmptyMetricsFiltered />}\n        {/* Scroll charts independently from filter box */}\n        <div css={{ flex: 1, overflow: 'auto' }}>\n          <RunsChartsTooltipWrapper contextData={tooltipContext} component={RunViewChartTooltipBody} hoverOnly>\n            {showCharts && (\n              <RunViewMetricChartsSection\n                metricKeys={orderedMetricKeys}\n                runInfo={runInfo}\n                search={search}\n                onReorderChart={onReorderChart}\n                chartRefreshManager={chartRefreshManager}\n              />\n            )}\n          </RunsChartsTooltipWrapper>\n        </div>{' '}\n      </div>\n    </DragAndDropProvider>\n  );\n};\n","import { Tag, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { RunInfoEntity } from '../../../types';\nimport { RunStatusIcon } from '../../RunStatusIcon';\nimport { FormattedMessage } from 'react-intl';\nimport type { MlflowRunStatus } from '../../../../graphql/__generated__/graphql';\n\n/**\n * Displays run status cell in run detail overview.\n */\nexport const RunViewStatusBox = ({ status }: { status: RunInfoEntity['status'] | MlflowRunStatus | null }) => {\n  const { theme } = useDesignSystemTheme();\n  const getTagColor = () => {\n    if (status === 'FINISHED') {\n      return theme.isDarkMode ? theme.colors.green800 : theme.colors.green100;\n    }\n    if (status === 'KILLED' || status === 'FAILED') {\n      return theme.isDarkMode ? theme.colors.red800 : theme.colors.red100;\n    }\n    if (status === 'SCHEDULED' || status === 'RUNNING') {\n      return theme.isDarkMode ? theme.colors.blue800 : theme.colors.blue100;\n    }\n\n    return undefined;\n  };\n\n  const getStatusLabel = () => {\n    if (status === 'FINISHED') {\n      return (\n        <Typography.Text color=\"success\">\n          <FormattedMessage\n            defaultMessage=\"Finished\"\n            description=\"Run page > Overview > Run status cell > Value for finished state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'KILLED') {\n      return (\n        <Typography.Text color=\"error\">\n          <FormattedMessage\n            defaultMessage=\"Killed\"\n            description=\"Run page > Overview > Run status cell > Value for killed state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'FAILED') {\n      return (\n        <Typography.Text color=\"error\">\n          <FormattedMessage\n            defaultMessage=\"Failed\"\n            description=\"Run page > Overview > Run status cell > Value for failed state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'RUNNING') {\n      return (\n        <Typography.Text color=\"info\">\n          <FormattedMessage\n            defaultMessage=\"Running\"\n            description=\"Run page > Overview > Run status cell > Value for running state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'SCHEDULED') {\n      return (\n        <Typography.Text color=\"info\">\n          <FormattedMessage\n            defaultMessage=\"Scheduled\"\n            description=\"Run page > Overview > Run status cell > Value for scheduled state\"\n          />\n        </Typography.Text>\n      );\n    }\n    return status;\n  };\n\n  return (\n    <Tag\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewstatusbox.tsx_81\"\n      css={{ backgroundColor: getTagColor() }}\n    >\n      {status && <RunStatusIcon status={status} />}{' '}\n      <Typography.Text css={{ marginLeft: theme.spacing.sm }}>{getStatusLabel()}</Typography.Text>\n    </Tag>\n  );\n};\n","import { Link } from '../../../../common/utils/RoutingUtils';\nimport Utils from '../../../../common/utils/Utils';\nimport Routes from '../../../routes';\nimport type { KeyValueEntity, RunInfoEntity } from '../../../types';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\nexport const RunViewUserLinkBox = ({\n  runInfo,\n  tags,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  tags: Record<string, KeyValueEntity>;\n}) => {\n  const user = Utils.getUser(runInfo, tags);\n  return <Link to={Routes.searchRunsByUser(runInfo?.experimentId ?? '', user)}>{user}</Link>;\n};\n","import { useMemo } from 'react';\nimport { Button, ChevronDownIcon, ChevronRightIcon, useDesignSystemTheme } from '@databricks/design-system';\n\nexport const ExpandedJSONValueCell = ({ value }: { value: string }) => {\n  const structuredJSONValue = useMemo(() => {\n    // Attempts to parse the value as JSON and returns a pretty printed version if successful.\n    // If JSON structure is not found, returns null.\n    try {\n      const objectData = JSON.parse(value);\n      return JSON.stringify(objectData, null, 2);\n    } catch (e) {\n      return null;\n    }\n  }, [value]);\n  return (\n    <div\n      css={{\n        whiteSpace: 'pre-wrap',\n        wordBreak: 'break-word',\n        fontFamily: structuredJSONValue ? 'monospace' : undefined,\n      }}\n    >\n      {structuredJSONValue || value}\n    </div>\n  );\n};\n\nexport const ExpandableCell = ({\n  value,\n  isExpanded,\n  toggleExpanded,\n  hideCollapseButton,\n}: {\n  value: string;\n  isExpanded: boolean;\n  toggleExpanded: () => void;\n  hideCollapseButton?: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        gap: theme.spacing.xs,\n      }}\n    >\n      {!hideCollapseButton && (\n        <Button\n          componentId=\"mlflow.common.expandable_cell\"\n          size=\"small\"\n          icon={isExpanded ? <ChevronDownIcon /> : <ChevronRightIcon />}\n          onClick={() => toggleExpanded()}\n          css={{ flexShrink: 0 }}\n        />\n      )}\n      <div\n        title={value}\n        css={{\n          overflow: 'hidden',\n          textOverflow: 'ellipsis',\n          display: '-webkit-box',\n          '-webkit-box-orient': 'vertical',\n          '-webkit-line-clamp': isExpanded ? undefined : '3',\n        }}\n      >\n        {isExpanded ? <ExpandedJSONValueCell value={value} /> : value}\n      </div>\n    </div>\n  );\n};\n","import {\n  Button,\n  ChevronDownIcon,\n  ChevronRightIcon,\n  Empty,\n  Input,\n  SearchIcon,\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { KeyValueEntity } from '../types';\nimport { throttle, values } from 'lodash';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { ColumnDef, flexRender, getCoreRowModel, getExpandedRowModel, useReactTable } from '@tanstack/react-table';\nimport { Interpolation, Theme } from '@emotion/react';\nimport { ExpandedJSONValueCell } from '@mlflow/mlflow/src/common/components/ExpandableCell';\n\ntype ParamsColumnDef = ColumnDef<KeyValueEntity> & {\n  meta?: { styles?: Interpolation<Theme>; multiline?: boolean };\n};\n\n/**\n * Displays cell with expandable parameter value.\n */\nconst ExpandableParamValueCell = ({\n  name,\n  value,\n  toggleExpanded,\n  isExpanded,\n  autoExpandedRowsList,\n}: {\n  name: string;\n  value: string;\n  toggleExpanded: () => void;\n  isExpanded: boolean;\n  autoExpandedRowsList: Record<string, boolean>;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const cellRef = useRef<HTMLDivElement>(null);\n  const [isOverflowing, setIsOverflowing] = useState(false);\n\n  useEffect(() => {\n    if (autoExpandedRowsList[name]) {\n      return;\n    }\n    if (isOverflowing) {\n      toggleExpanded();\n      autoExpandedRowsList[name] = true;\n    }\n  }, [autoExpandedRowsList, isOverflowing, name, toggleExpanded]);\n\n  // Check if cell is overflowing using resize observer\n  useEffect(() => {\n    if (!cellRef.current) return;\n\n    const resizeObserverCallback: ResizeObserverCallback = throttle(\n      ([entry]) => {\n        const isOverflowing = entry.target.scrollHeight > entry.target.clientHeight;\n        setIsOverflowing(isOverflowing);\n      },\n      500,\n      { trailing: true },\n    );\n\n    const resizeObserver = new ResizeObserver(resizeObserverCallback);\n    resizeObserver.observe(cellRef.current);\n    return () => resizeObserver.disconnect();\n  }, [cellRef, toggleExpanded]);\n\n  // Re-check if cell is overflowing after collapse\n  useEffect(() => {\n    if (!cellRef.current) return;\n    if (!isExpanded) {\n      const isOverflowing = cellRef.current.scrollHeight > cellRef.current.clientHeight;\n      if (isOverflowing) {\n        setIsOverflowing(true);\n      }\n    }\n  }, [isExpanded]);\n\n  return (\n    <div css={{ display: 'flex', gap: theme.spacing.xs }}>\n      {(isOverflowing || isExpanded) && (\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewparamstable.tsx_74\"\n          size=\"small\"\n          icon={isExpanded ? <ChevronDownIcon /> : <ChevronRightIcon />}\n          onClick={() => toggleExpanded()}\n          css={{ flexShrink: 0 }}\n        />\n      )}\n      <div\n        title={value}\n        css={{\n          overflow: 'hidden',\n          textOverflow: 'ellipsis',\n          display: '-webkit-box',\n          '-webkit-box-orient': 'vertical',\n          '-webkit-line-clamp': isExpanded ? undefined : '3',\n        }}\n        ref={cellRef}\n      >\n        {isExpanded ? <ExpandedJSONValueCell value={value} /> : value}\n      </div>\n    </div>\n  );\n};\n\n/**\n * Displays filterable table with parameter key/values.\n */\nexport const DetailsOverviewParamsTable = ({ params }: { params: Record<string, KeyValueEntity> }) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n  const [filter, setFilter] = useState('');\n  const autoExpandedRowsList = useRef<Record<string, boolean>>({});\n\n  const paramsValues = useMemo(() => values(params), [params]);\n\n  const paramsList = useMemo(\n    () =>\n      paramsValues.filter(({ key, value }) => {\n        const filterLower = filter.toLowerCase();\n        return key.toLowerCase().includes(filterLower) || value.toLowerCase().includes(filterLower);\n      }),\n    [filter, paramsValues],\n  );\n\n  const columns = useMemo<ParamsColumnDef[]>(\n    () => [\n      {\n        id: 'key',\n        accessorKey: 'key',\n        header: () => (\n          <FormattedMessage\n            defaultMessage=\"Parameter\"\n            description=\"Run page > Overview > Parameters table > Key column header\"\n          />\n        ),\n        enableResizing: true,\n        size: 240,\n      },\n      {\n        id: 'value',\n        header: () => (\n          <FormattedMessage\n            defaultMessage=\"Value\"\n            description=\"Run page > Overview > Parameters table > Value column header\"\n          />\n        ),\n        accessorKey: 'value',\n        enableResizing: false,\n        meta: { styles: { paddingLeft: 0 } },\n        cell: ({ row: { original, getIsExpanded, toggleExpanded } }) => (\n          <ExpandableParamValueCell\n            name={original.key}\n            value={original.value}\n            isExpanded={getIsExpanded()}\n            toggleExpanded={toggleExpanded}\n            autoExpandedRowsList={autoExpandedRowsList.current}\n          />\n        ),\n      },\n    ],\n    [],\n  );\n\n  const table = useReactTable({\n    data: paramsList,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    getRowId: (row) => row.key,\n    enableColumnResizing: true,\n    columnResizeMode: 'onChange',\n    columns,\n  });\n\n  const renderTableContent = () => {\n    if (!paramsValues.length) {\n      return (\n        <div css={{ flex: '1', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n          <Empty\n            description={\n              <FormattedMessage\n                defaultMessage=\"No parameters recorded\"\n                description=\"Run page > Overview > Parameters table > No parameters recorded\"\n              />\n            }\n          />\n        </div>\n      );\n    }\n\n    const areAllResultsFiltered = paramsList.length < 1;\n\n    return (\n      <>\n        <div css={{ marginBottom: theme.spacing.sm }}>\n          <Input\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewparamstable.tsx_213\"\n            prefix={<SearchIcon />}\n            placeholder={intl.formatMessage({\n              defaultMessage: 'Search parameters',\n              description: 'Run page > Overview > Parameters table > Filter input placeholder',\n            })}\n            value={filter}\n            onChange={(e) => setFilter(e.target.value)}\n            allowClear\n          />\n        </div>\n        <Table\n          scrollable\n          empty={\n            areAllResultsFiltered ? (\n              <div css={{ marginTop: theme.spacing.md * 4 }}>\n                <Empty\n                  description={\n                    <FormattedMessage\n                      defaultMessage=\"No parameters match the search filter\"\n                      description=\"Run page > Overview > Parameters table > No results after filtering\"\n                    />\n                  }\n                />\n              </div>\n            ) : null\n          }\n        >\n          <TableRow isHeader>\n            {table.getLeafHeaders().map((header, index) => (\n              <TableHeader\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewparamstable.tsx_244\"\n                key={header.id}\n                resizable={header.column.getCanResize()}\n                resizeHandler={header.getResizeHandler()}\n                isResizing={header.column.getIsResizing()}\n                css={{\n                  flexGrow: header.column.getCanResize() ? 0 : 1,\n                }}\n                style={{\n                  flexBasis: header.column.getCanResize() ? header.column.getSize() : undefined,\n                }}\n              >\n                {flexRender(header.column.columnDef.header, header.getContext())}\n              </TableHeader>\n            ))}\n          </TableRow>\n          {table.getRowModel().rows.map((row) => (\n            <TableRow key={row.id}>\n              {row.getAllCells().map((cell) => (\n                <TableCell\n                  key={cell.id}\n                  css={(cell.column.columnDef as ParamsColumnDef).meta?.styles}\n                  style={{\n                    flexGrow: cell.column.getCanResize() ? 0 : 1,\n                    flexBasis: cell.column.getCanResize() ? cell.column.getSize() : undefined,\n                  }}\n                  multiline\n                >\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </Table>\n      </>\n    );\n  };\n\n  return (\n    <div css={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n      <Typography.Title level={4}>\n        <FormattedMessage\n          defaultMessage=\"Parameters ({length})\"\n          description=\"Run page > Overview > Parameters table > Section title\"\n          values={{ length: paramsList.length }}\n        />\n      </Typography.Title>\n      <div\n        css={{\n          padding: theme.spacing.sm,\n          border: `1px solid ${theme.colors.borderDecorative}`,\n          borderRadius: theme.general.borderRadiusBase,\n          flex: 1,\n          display: 'flex',\n          flexDirection: 'column',\n          overflow: 'hidden',\n        }}\n      >\n        {renderTableContent()}\n      </div>\n    </div>\n  );\n};\n","import {\n  Empty,\n  Input,\n  SearchIcon,\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { MetricEntitiesByName, MetricEntity, RunInfoEntity } from '../../../types';\nimport { sum, values } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { FormattedMessage, defineMessages, useIntl } from 'react-intl';\nimport { isSystemMetricKey } from '../../../utils/MetricsUtils';\nimport { Table as TableDef, flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\nconst { systemMetricsLabel, modelMetricsLabel } = defineMessages({\n  systemMetricsLabel: {\n    defaultMessage: 'System metrics',\n    description: 'Run page > Overview > Metrics table > System charts section > title',\n  },\n  modelMetricsLabel: {\n    defaultMessage: 'Model metrics',\n    description: 'Run page > Overview > Metrics table > Model charts section > title',\n  },\n});\n\nconst metricKeyMatchesFilter =\n  (filter: string) =>\n  ({ key }: MetricEntity) =>\n    key.toLowerCase().includes(filter.toLowerCase());\n\nconst RunViewMetricsTableSection = ({\n  metricsList,\n  runInfo,\n  header,\n  table,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  metricsList: MetricEntity[];\n  header?: React.ReactNode;\n  table: TableDef<MetricEntity>;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [{ column: keyColumn }] = table.getLeafHeaders();\n  return metricsList.length ? (\n    <>\n      {header && (\n        <TableRow>\n          <TableCell css={{ flex: 1, backgroundColor: theme.colors.backgroundSecondary }}>\n            <Typography.Text bold>\n              {header} ({metricsList.length})\n            </Typography.Text>\n          </TableCell>\n        </TableRow>\n      )}\n      {metricsList.map(\n        ({\n          // Get metric key and value to display in table\n          key,\n          value,\n        }) => (\n          <TableRow key={key}>\n            <TableCell\n              style={{\n                flexGrow: 0,\n                flexBasis: keyColumn.getSize(),\n              }}\n            >\n              <Link to={Routes.getMetricPageRoute([runInfo.runUuid ?? ''], key, [runInfo.experimentId ?? ''])}>\n                {key}\n              </Link>\n            </TableCell>\n            <TableCell\n              css={{\n                flexGrow: 1,\n              }}\n            >\n              {value.toString()}\n            </TableCell>\n          </TableRow>\n        ),\n      )}\n    </>\n  ) : null;\n};\n\n/**\n * Displays table with metrics key/values in run detail overview.\n */\nexport const RunViewMetricsTable = ({\n  latestMetrics,\n  runInfo,\n}: {\n  latestMetrics: MetricEntitiesByName;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n  const [filter, setFilter] = useState('');\n\n  const metricValues = useMemo(() => values(latestMetrics), [latestMetrics]);\n\n  const columns = useMemo(\n    () => [\n      {\n        id: 'key',\n        accessorKey: 'key',\n        header: () => (\n          <FormattedMessage\n            defaultMessage=\"Metric\"\n            description=\"Run page > Overview > Metrics table > Key column header\"\n          />\n        ),\n        enableResizing: true,\n        size: 240,\n      },\n      {\n        id: 'value',\n        header: () => (\n          <FormattedMessage\n            defaultMessage=\"Value\"\n            description=\"Run page > Overview > Metrics table > Value column header\"\n          />\n        ),\n        accessorKey: 'value',\n        enableResizing: false,\n      },\n    ],\n    [],\n  );\n\n  // Break down metric lists into system and model segments. If no system (or model) metrics\n  // are detected, return a single segment.\n  const metricSegments = useMemo(() => {\n    const systemMetrics = metricValues.filter(({ key }) => isSystemMetricKey(key));\n    const modelMetrics = metricValues.filter(({ key }) => !isSystemMetricKey(key));\n    const isSegmented = systemMetrics.length > 0 && modelMetrics.length > 0;\n    if (!isSegmented) {\n      return [{ header: undefined, metrics: metricValues.filter(metricKeyMatchesFilter(filter)) }];\n    }\n    return [\n      {\n        header: intl.formatMessage(systemMetricsLabel),\n        metrics: systemMetrics.filter(metricKeyMatchesFilter(filter)),\n      },\n      {\n        header: intl.formatMessage(modelMetricsLabel),\n        metrics: modelMetrics.filter(metricKeyMatchesFilter(filter)),\n      },\n    ];\n  }, [filter, metricValues, intl]);\n\n  const table = useReactTable<MetricEntity>({\n    data: metricValues,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (row) => row.key,\n    enableColumnResizing: true,\n    columnResizeMode: 'onChange',\n    columns,\n  });\n\n  const renderTableContent = () => {\n    if (!metricValues.length) {\n      return (\n        <div css={{ flex: '1', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n          <Empty\n            description={\n              <FormattedMessage\n                defaultMessage=\"No metrics recorded\"\n                description=\"Run page > Overview > Metrics table > No metrics recorded\"\n              />\n            }\n          />\n        </div>\n      );\n    }\n\n    const areAllResultsFiltered = sum(metricSegments.map(({ metrics }) => metrics.length)) < 1;\n\n    return (\n      <>\n        <div css={{ marginBottom: theme.spacing.sm }}>\n          <Input\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewmetricstable.tsx_186\"\n            prefix={<SearchIcon />}\n            placeholder={intl.formatMessage({\n              defaultMessage: 'Search metrics',\n              description: 'Run page > Overview > Metrics table > Filter input placeholder',\n            })}\n            value={filter}\n            onChange={(e) => setFilter(e.target.value)}\n            allowClear\n          />\n        </div>\n\n        <Table\n          scrollable\n          empty={\n            areAllResultsFiltered ? (\n              <div css={{ marginTop: theme.spacing.md * 4 }}>\n                <Empty\n                  description={\n                    <FormattedMessage\n                      defaultMessage=\"No metrics match the search filter\"\n                      description=\"Run page > Overview > Metrics table > No results after filtering\"\n                    />\n                  }\n                />\n              </div>\n            ) : null\n          }\n        >\n          <TableRow isHeader>\n            {table.getLeafHeaders().map((header) => (\n              <TableHeader\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewmetricstable.tsx_312\"\n                key={header.id}\n                resizable={header.column.getCanResize()}\n                resizeHandler={header.getResizeHandler()}\n                isResizing={header.column.getIsResizing()}\n                style={{\n                  flexGrow: header.column.getCanResize() ? 0 : 1,\n                  flexBasis: header.column.getCanResize() ? header.column.getSize() : undefined,\n                }}\n              >\n                {flexRender(header.column.columnDef.header, header.getContext())}\n              </TableHeader>\n            ))}\n          </TableRow>\n          {metricSegments.map((segment, index) => (\n            <RunViewMetricsTableSection\n              key={segment.header || index}\n              metricsList={segment.metrics}\n              runInfo={runInfo}\n              header={segment.header}\n              table={table}\n            />\n          ))}\n        </Table>\n      </>\n    );\n  };\n  return (\n    <div css={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n      <Typography.Title level={4} css={{ flexShrink: 0 }}>\n        <FormattedMessage\n          defaultMessage=\"Metrics ({length})\"\n          description=\"Run page > Overview > Metrics table > Section title\"\n          values={{ length: metricValues.filter(metricKeyMatchesFilter(filter)).length }}\n        />\n      </Typography.Title>\n      <div\n        css={{\n          padding: theme.spacing.sm,\n          border: `1px solid ${theme.colors.borderDecorative}`,\n          borderRadius: theme.general.borderRadiusBase,\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          overflow: 'hidden',\n        }}\n      >\n        {renderTableContent()}\n      </div>\n    </div>\n  );\n};\n","import type { KeyValueEntity, RunDatasetWithTags, RunInfoEntity } from '../../../types';\nimport { Button, DropdownMenu, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { ExperimentViewDatasetWithContext } from '../../experiment-page/components/runs/ExperimentViewDatasetWithContext';\nimport { useState } from 'react';\nimport {\n  DatasetWithRunType,\n  ExperimentViewDatasetDrawer,\n} from '../../experiment-page/components/runs/ExperimentViewDatasetDrawer';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\n/**\n * Renders single dataset, either in overview table cell or within a dropdown\n */\nconst DatasetEntry = ({ dataset, onClick }: { dataset: RunDatasetWithTags; onClick: () => void }) => {\n  return (\n    <Typography.Link\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdatasetbox.tsx_16\"\n      role=\"link\"\n      css={{\n        textAlign: 'left',\n      }}\n      onClick={onClick}\n    >\n      <ExperimentViewDatasetWithContext datasetWithTags={dataset} displayTextAsLink css={{ margin: 0 }} />\n    </Typography.Link>\n  );\n};\n\n/**\n * Displays run datasets section in run detail overview.\n */\nexport const RunViewDatasetBox = ({\n  tags,\n  runInfo,\n  datasets,\n}: {\n  tags: Record<string, KeyValueEntity>;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  datasets: RunDatasetWithTags[];\n}) => {\n  const [selectedDatasetWithRun, setSelectedDatasetWithRun] = useState<DatasetWithRunType | null>(null);\n  const { theme } = useDesignSystemTheme();\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n\n  if (!datasets || !datasets.length) {\n    return null;\n  }\n\n  const firstDataset = datasets[0];\n  const remainingDatasets = datasets.slice(1);\n\n  const datasetClicked = (dataset: RunDatasetWithTags) => {\n    setSelectedDatasetWithRun({\n      datasetWithTags: dataset,\n      runData: {\n        experimentId: runInfo.experimentId ?? undefined,\n        runUuid: runInfo.runUuid ?? '',\n        runName: runInfo.runName ?? undefined,\n        datasets: datasets,\n        tags: tags,\n      },\n    });\n    setIsDrawerOpen(true);\n  };\n\n  return (\n    <div css={{ display: 'flex', gap: theme.spacing.sm, alignItems: 'center' }}>\n      <DatasetEntry dataset={firstDataset} onClick={() => datasetClicked(firstDataset)} />\n      {remainingDatasets.length ? (\n        <DropdownMenu.Root modal={false}>\n          <DropdownMenu.Trigger asChild>\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdatasetbox.tsx_70\"\n              size=\"small\"\n            >\n              +{remainingDatasets.length}\n            </Button>\n          </DropdownMenu.Trigger>\n          <DropdownMenu.Content>\n            {remainingDatasets.map((datasetWithTags) => {\n              return (\n                <DropdownMenu.Item\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdatasetbox.tsx_81\"\n                  key={datasetWithTags.dataset.digest}\n                >\n                  <DatasetEntry dataset={datasetWithTags} onClick={() => datasetClicked(datasetWithTags)} />\n                </DropdownMenu.Item>\n              );\n            })}\n          </DropdownMenu.Content>\n        </DropdownMenu.Root>\n      ) : null}\n      {selectedDatasetWithRun && (\n        <ExperimentViewDatasetDrawer\n          isOpen={isDrawerOpen}\n          setIsOpen={setIsDrawerOpen}\n          selectedDatasetWithRun={selectedDatasetWithRun}\n          setSelectedDatasetWithRun={setSelectedDatasetWithRun}\n        />\n      )}\n    </div>\n  );\n};\n","import { type ApolloError, type ApolloQueryResult, gql } from '@apollo/client';\nimport type { GetRun, GetRunVariables } from '../../../../graphql/__generated__/graphql';\nimport { useQuery, useLazyQuery } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\n\nconst GET_RUN_QUERY = gql`\n  query GetRun($data: MlflowGetRunInput!) @component(name: \"MLflow.ExperimentRunTracking\") {\n    mlflowGetRun(input: $data) {\n      apiError {\n        helpUrl\n        code\n        message\n      }\n      run {\n        info {\n          runName\n          status\n          runUuid\n          experimentId\n          artifactUri\n          endTime\n          lifecycleStage\n          startTime\n          userId\n        }\n        experiment {\n          experimentId\n          name\n          tags {\n            key\n            value\n          }\n          artifactLocation\n          lifecycleStage\n          lastUpdateTime\n        }\n        modelVersions {\n          status\n          version\n          name\n          source\n        }\n        data {\n          metrics {\n            key\n            value\n            step\n            timestamp\n          }\n          params {\n            key\n            value\n          }\n          tags {\n            key\n            value\n          }\n        }\n        inputs {\n          datasetInputs {\n            dataset {\n              digest\n              name\n              profile\n              schema\n              source\n              sourceType\n            }\n            tags {\n              key\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport type UseGetRunQueryResponseRunInfo = NonNullable<NonNullable<UseGetRunQueryDataResponse>['info']>;\nexport type UseGetRunQueryResponseDatasetInputs = NonNullable<\n  NonNullable<UseGetRunQueryDataResponse>['inputs']\n>['datasetInputs'];\nexport type UseGetRunQueryResponseExperiment = NonNullable<NonNullable<UseGetRunQueryDataResponse>['experiment']>;\nexport type UseGetRunQueryResponseDataMetrics = NonNullable<\n  NonNullable<NonNullable<UseGetRunQueryDataResponse>['data']>['metrics']\n>;\n\nexport type UseGetRunQueryDataResponse = NonNullable<GetRun['mlflowGetRun']>['run'];\nexport type UseGetRunQueryDataApiError = NonNullable<GetRun['mlflowGetRun']>['apiError'];\nexport type UseGetRunQueryResponse = {\n  data?: UseGetRunQueryDataResponse;\n  loading: boolean;\n  apolloError?: ApolloError;\n  apiError?: UseGetRunQueryDataApiError;\n  refetchRun: () => Promise<ApolloQueryResult<GetRun>>;\n};\n\nexport const useGetRunQuery = ({\n  runUuid,\n  disabled = false,\n}: {\n  runUuid: string;\n  disabled?: boolean;\n}): UseGetRunQueryResponse => {\n  const {\n    data,\n    loading,\n    error: apolloError,\n    refetch,\n  } = useQuery<GetRun, GetRunVariables>(GET_RUN_QUERY, {\n    variables: {\n      data: {\n        runId: runUuid,\n      },\n    },\n    skip: disabled,\n  });\n\n  return {\n    loading,\n    data: data?.mlflowGetRun?.run,\n    refetchRun: refetch,\n    apolloError,\n    apiError: data?.mlflowGetRun?.apiError,\n  } as const;\n};\n\nexport const useLazyGetRunQuery = () => useLazyQuery<GetRun, GetRunVariables>(GET_RUN_QUERY);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ReduxState, ThunkDispatch } from '../../../../redux-types';\nimport { useEffect, useMemo } from 'react';\nimport { getRunApi } from '../../../actions';\nimport { ParagraphSkeleton } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { FormattedMessage } from 'react-intl';\nimport { shouldEnableGraphQLRunDetailsPage } from '../../../../common/utils/FeatureUtils';\nimport { useGetRunQuery } from '../hooks/useGetRunQuery';\n\nexport const RunViewParentRunBox = ({ parentRunUuid }: { parentRunUuid: string }) => {\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const parentRunInfoRedux = useSelector(({ entities }: ReduxState) => {\n    return entities.runInfosByUuid[parentRunUuid];\n  });\n\n  const parentRunInfoGraphql = useGetRunQuery({\n    runUuid: parentRunUuid,\n    disabled: !shouldEnableGraphQLRunDetailsPage(),\n  });\n\n  const parentRunInfo = useMemo(() => {\n    return shouldEnableGraphQLRunDetailsPage() ? parentRunInfoGraphql?.data?.info : parentRunInfoRedux;\n  }, [parentRunInfoGraphql, parentRunInfoRedux]);\n\n  useEffect(() => {\n    // Don't call REST API if GraphQL is enabled\n    if (shouldEnableGraphQLRunDetailsPage()) {\n      return;\n    }\n    if (!parentRunInfo) {\n      dispatch(getRunApi(parentRunUuid));\n    }\n  }, [dispatch, parentRunUuid, parentRunInfo]);\n\n  if (!parentRunInfo) {\n    return (\n      <ParagraphSkeleton\n        loading\n        label={\n          <FormattedMessage\n            defaultMessage=\"Parent run name loading\"\n            description=\"Run page > Overview > Parent run name loading\"\n          />\n        }\n      />\n    );\n  }\n\n  if (!parentRunInfo.experimentId || !parentRunInfo.runUuid) {\n    return null;\n  }\n\n  return (\n    <Link to={Routes.getRunPageRoute(parentRunInfo.experimentId, parentRunInfo.runUuid)}>{parentRunInfo.runName}</Link>\n  );\n};\n","import { Button, PencilIcon, Spinner, LegacyTooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { useEditKeyValueTagsModal } from '../../../../common/hooks/useEditKeyValueTagsModal';\nimport { KeyValueEntity } from '../../../types';\nimport { KeyValueTag } from '../../../../common/components/KeyValueTag';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { keys, values } from 'lodash';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '../../../../redux-types';\nimport { setRunTagsBulkApi } from '../../../actions';\nimport { MLFLOW_INTERNAL_PREFIX } from '../../../../common/utils/TagUtils';\nimport { useMemo } from 'react';\nimport { isUserFacingTag } from '../../../../common/utils/TagUtils';\n\n/**\n * Displays run tags cell in run detail overview.\n */\nexport const RunViewTagsBox = ({\n  runUuid,\n  tags,\n  onTagsUpdated,\n}: {\n  runUuid: string;\n  tags: Record<string, KeyValueEntity>;\n  onTagsUpdated: () => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const dispatch = useDispatch<ThunkDispatch>();\n  const intl = useIntl();\n\n  // Get keys and tag entities while excluding system tags\n  const [visibleTagKeys, visibleTagEntities] = useMemo(\n    () => [keys(tags).filter(isUserFacingTag), values(tags).filter(({ key }) => isUserFacingTag(key))],\n    [tags],\n  );\n\n  const { EditTagsModal, showEditTagsModal, isLoading } = useEditKeyValueTagsModal({\n    valueRequired: true,\n    allAvailableTags: visibleTagKeys,\n    saveTagsHandler: async (_, existingTags, newTags) =>\n      dispatch(setRunTagsBulkApi(runUuid, existingTags, newTags)).then(onTagsUpdated),\n  });\n\n  const showEditModal = () => {\n    showEditTagsModal({ tags: visibleTagEntities });\n  };\n\n  const editTagsLabel = intl.formatMessage({\n    defaultMessage: 'Edit tags',\n    description: \"Run page > Overview > Tags cell > 'Edit' button label\",\n  });\n\n  return (\n    <div\n      css={{\n        paddingTop: theme.spacing.xs,\n        paddingBottom: theme.spacing.xs,\n        display: 'flex',\n        flexWrap: 'wrap',\n        '> *': {\n          marginRight: '0 !important',\n        },\n        gap: theme.spacing.xs,\n      }}\n    >\n      {visibleTagEntities.length < 1 ? (\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewtagsbox.tsx_67\"\n          size=\"small\"\n          type=\"link\"\n          onClick={showEditModal}\n        >\n          <FormattedMessage defaultMessage=\"Add\" description=\"Run page > Overview > Tags cell > 'Add' button label\" />\n        </Button>\n      ) : (\n        <>\n          {visibleTagEntities.map((tag) => (\n            <KeyValueTag tag={tag} key={`${tag.key}-${tag.value}`} enableFullViewModal />\n          ))}\n          <LegacyTooltip title={editTagsLabel}>\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewtagsbox.tsx_76\"\n              aria-label={editTagsLabel}\n              size=\"small\"\n              icon={<PencilIcon />}\n              onClick={showEditModal}\n            />\n          </LegacyTooltip>\n        </>\n      )}\n      {isLoading && <Spinner size=\"small\" />}\n      {EditTagsModal}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { EditableNote } from '../../../../common/components/EditableNote';\nimport { KeyValueEntity } from '../../../types';\nimport { NOTE_CONTENT_TAG } from '../../../utils/NoteUtils';\nimport { Button, PencilIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '../../../../redux-types';\nimport { setTagApi } from '../../../actions';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\n/**\n * Displays editable description section in run detail overview.\n */\nexport const RunViewDescriptionBox = ({\n  runUuid,\n  tags,\n  onDescriptionChanged,\n}: {\n  runUuid: string;\n  tags: Record<string, KeyValueEntity>;\n  onDescriptionChanged: () => void | Promise<void>;\n}) => {\n  const noteContent = tags[NOTE_CONTENT_TAG]?.value || '';\n\n  const [showNoteEditor, setShowNoteEditor] = useState(false);\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const handleSubmitEditNote = (markdown: string) =>\n    dispatch(setTagApi(runUuid, NOTE_CONTENT_TAG, markdown))\n      .then(onDescriptionChanged)\n      .then(() => setShowNoteEditor(false));\n  const handleCancelEditNote = () => setShowNoteEditor(false);\n\n  const isEmpty = !noteContent;\n\n  return (\n    <div css={{ marginBottom: theme.spacing.md }}>\n      <Typography.Title level={4} css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n        <FormattedMessage\n          defaultMessage=\"Description\"\n          description=\"Run page > Overview > Description section > Section title\"\n        />\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdescriptionbox.tsx_46\"\n          size=\"small\"\n          type=\"tertiary\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'Edit description',\n            description: 'Run page > Overview > Description section > Edit button label',\n          })}\n          onClick={() => setShowNoteEditor(true)}\n          icon={<PencilIcon />}\n        />\n      </Typography.Title>\n      {isEmpty && !showNoteEditor && (\n        <Typography.Hint>\n          <FormattedMessage\n            defaultMessage=\"No description\"\n            description=\"Run page > Overview > Description section > Empty value placeholder\"\n          />\n        </Typography.Hint>\n      )}\n      {(!isEmpty || showNoteEditor) && (\n        <EditableNote\n          defaultMarkdown={noteContent}\n          onSubmit={handleSubmitEditNote}\n          onCancel={handleCancelEditNote}\n          showEditor={showNoteEditor}\n        />\n      )}\n    </div>\n  );\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\n\n/**\n * Generic table row component for displaying metadata row in the details overview table (used in runs, logged models etc.)\n */\nexport const DetailsOverviewMetadataRow = ({ title, value }: { title: React.ReactNode; value: React.ReactNode }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <tr\n      css={{\n        display: 'flex',\n        borderBottom: `1px solid ${theme.colors.borderDecorative}`,\n        minHeight: theme.general.heightSm,\n      }}\n    >\n      <th\n        css={{\n          flex: `0 0 240px`,\n          backgroundColor: theme.colors.backgroundSecondary,\n          color: theme.colors.textSecondary,\n          padding: theme.spacing.sm,\n          display: 'flex',\n          alignItems: 'flex-start',\n        }}\n      >\n        {title}\n      </th>\n      <td\n        css={{\n          flex: 1,\n          padding: theme.spacing.sm,\n          paddingTop: 0,\n          paddingBottom: 0,\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        {value}\n      </td>\n    </tr>\n  );\n};\n","import { Overflow, Tag, useDesignSystemTheme } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport { ModelVersionInfoEntity, RunInfoEntity } from '../../../types';\nimport { ModelRegistryRoutes } from '../../../../model-registry/routes';\nimport { ReactComponent as RegisteredModelOkIcon } from '../../../../common/static/registered-model-grey-ok.svg';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\nconst getModelLink = (modelVersion: ModelVersionInfoEntity) => {\n  const { name, version } = modelVersion;\n  return ModelRegistryRoutes.getModelVersionPageRoute(name, version);\n};\n\n/**\n * Displays list of registered models in run detail overview.\n * TODO: expand with logged models after finalizing design\n */\nexport const RunViewRegisteredModelsBox = ({\n  registeredModels,\n  runInfo,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  registeredModels: ModelVersionInfoEntity[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Overflow>\n      {registeredModels.map((model) => (\n        <Link\n          key={model.name}\n          to={getModelLink(model)}\n          css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm }}\n        >\n          <RegisteredModelOkIcon /> {model.name}{' '}\n          <Tag\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewregisteredmodelsbox.tsx_40\"\n            css={{ cursor: 'pointer' }}\n          >\n            v{model.version}\n          </Tag>\n        </Link>\n      ))}\n    </Overflow>\n  );\n};\n","import { ModelsIcon, Overflow, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport { RunInfoEntity } from '../../../types';\nimport Routes from '../../../routes';\nimport { first } from 'lodash';\nimport { FormattedMessage } from 'react-intl';\nimport { useMemo } from 'react';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\n/**\n * Displays list of registered models in run detail overview.\n */\nexport const RunViewLoggedModelsBox = ({\n  loggedModels,\n  runInfo,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  loggedModels: {\n    artifactPath: string;\n    flavors: string[];\n    utcTimeCreated: number;\n  }[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { experimentId, runUuid } = runInfo;\n\n  const getModelFlavorName = (flavors: string[]) => {\n    return (\n      first(flavors) || (\n        <FormattedMessage\n          defaultMessage=\"Model\"\n          description=\"Run page > Overview > Logged models > Unknown model flavor\"\n        />\n      )\n    );\n  };\n\n  // Check if list has models with same flavor names.\n  // If true, display artifact path in dropdown menu to reduce ambiguity.\n  const shouldDisplayArtifactPaths = useMemo(() => {\n    const flavors = loggedModels.map((model) => getModelFlavorName(model.flavors));\n    const uniqueFlavors = new Set(flavors);\n    return uniqueFlavors.size !== flavors.length;\n  }, [loggedModels]);\n\n  return (\n    <Overflow>\n      {loggedModels.map((model, index) => {\n        return (\n          <Link\n            to={Routes.getRunPageRoute(experimentId ?? '', runUuid ?? '', model.artifactPath)}\n            key={model.artifactPath}\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: theme.spacing.sm,\n              cursor: 'pointer',\n              height: shouldDisplayArtifactPaths && index > 0 ? theme.general.heightBase : theme.general.heightSm,\n            }}\n          >\n            <ModelsIcon />\n            <div>\n              {getModelFlavorName(model.flavors)}\n              {shouldDisplayArtifactPaths && index > 0 && <Typography.Hint>{model.artifactPath}</Typography.Hint>}\n            </div>\n          </Link>\n        );\n      })}\n    </Overflow>\n  );\n};\n","import {\n  BranchIcon,\n  CopyIcon,\n  GitCommitIcon,\n  Tag,\n  LegacyTooltip,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport Utils from '../../../../common/utils/Utils';\nimport type { KeyValueEntity } from '../../../types';\nimport { MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG } from '../../../constants';\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\nimport { ExperimentSourceTypeIcon } from '../../ExperimentSourceTypeIcon';\n\nexport const RunViewSourceBox = ({\n  runUuid,\n  tags,\n  search,\n}: {\n  runUuid: string;\n  tags: Record<string, KeyValueEntity>;\n  search: string;\n}) => {\n  const branchName = tags?.[MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG]?.value;\n  const commitHash = tags?.[Utils.gitCommitTag]?.value;\n  const runSource = Utils.renderSource(tags, search, runUuid, branchName);\n\n  const { theme } = useDesignSystemTheme();\n  return runSource ? (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        gap: theme.spacing.sm,\n        paddingTop: theme.spacing.sm,\n        paddingBottom: theme.spacing.sm,\n        flexWrap: 'wrap',\n      }}\n    >\n      <ExperimentSourceTypeIcon\n        sourceType={tags[Utils.sourceTypeTag]?.value}\n        css={{ color: theme.colors.actionPrimaryBackgroundDefault }}\n      />\n      {runSource}{' '}\n      {branchName && (\n        <LegacyTooltip title={branchName}>\n          <Tag\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewsourcebox.tsx_48\"\n            css={{ marginRight: 0 }}\n          >\n            <div css={{ display: 'flex', gap: 4, whiteSpace: 'nowrap' }}>\n              <BranchIcon /> {branchName}\n            </div>\n          </Tag>\n        </LegacyTooltip>\n      )}\n      {commitHash && (\n        <LegacyTooltip\n          dangerouslySetAntdProps={{ overlayStyle: { maxWidth: 'none' } }}\n          title={\n            <div css={{ display: 'flex', gap: 4, alignItems: 'center' }}>\n              {commitHash}\n              <CopyButton\n                css={{ flex: '0 0 auto' }}\n                showLabel={false}\n                size=\"small\"\n                type=\"tertiary\"\n                copyText={commitHash}\n                icon={<CopyIcon />}\n              />\n            </div>\n          }\n        >\n          <Tag\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewsourcebox.tsx_72\"\n            css={{ marginRight: 0 }}\n          >\n            <div css={{ display: 'flex', gap: 4, whiteSpace: 'nowrap' }}>\n              <GitCommitIcon /> {commitHash.slice(0, 7)}\n            </div>\n          </Tag>\n        </LegacyTooltip>\n      )}\n    </div>\n  ) : (\n    <Typography.Hint>—</Typography.Hint>\n  );\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { ReactNode } from 'react';\n\n/**\n * Generic table component for displaying metadata in the details overview section (used in runs, logged models etc.)\n */\nexport const DetailsOverviewMetadataTable = ({ children }: { children: ReactNode | ReactNode[] }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <table\n      css={{\n        display: 'block',\n        border: `1px solid ${theme.colors.borderDecorative}`,\n        borderBottom: 'none',\n        borderRadius: theme.general.borderRadiusBase,\n        width: '50%',\n        minWidth: 640,\n        marginBottom: theme.spacing.lg,\n        overflow: 'hidden',\n      }}\n    >\n      <tbody css={{ display: 'block' }}>{children}</tbody>\n    </table>\n  );\n};\n","import { CopyIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { CopyButton } from '../../shared/building_blocks/CopyButton';\n\nexport const DetailsOverviewCopyableIdBox = ({ value }: { value: string }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n      {value}\n      <CopyButton showLabel={false} copyText={value} icon={<CopyIcon />} size=\"small\" />\n    </div>\n  );\n};\n","import { FormattedMessage } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { useMemo } from 'react';\n\nimport { Button, FileIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport Utils from '../../../common/utils/Utils';\nimport type { ReduxState } from '../../../redux-types';\nimport { useLocation } from '../../../common/utils/RoutingUtils';\nimport { EXPERIMENT_PARENT_ID_TAG } from '../experiment-page/utils/experimentPage.common-utils';\n\nimport { RunViewStatusBox } from './overview/RunViewStatusBox';\nimport { RunViewUserLinkBox } from './overview/RunViewUserLinkBox';\nimport { DetailsOverviewParamsTable } from '../DetailsOverviewParamsTable';\nimport { RunViewMetricsTable } from './overview/RunViewMetricsTable';\nimport { RunViewDatasetBox } from './overview/RunViewDatasetBox';\nimport { RunViewParentRunBox } from './overview/RunViewParentRunBox';\nimport { RunViewTagsBox } from './overview/RunViewTagsBox';\nimport { RunViewDescriptionBox } from './overview/RunViewDescriptionBox';\nimport { DetailsOverviewMetadataRow } from '../DetailsOverviewMetadataRow';\nimport { RunViewRegisteredModelsBox } from './overview/RunViewRegisteredModelsBox';\nimport { RunViewLoggedModelsBox } from './overview/RunViewLoggedModelsBox';\nimport { RunViewSourceBox } from './overview/RunViewSourceBox';\nimport { DetailsOverviewMetadataTable } from '@mlflow/mlflow/src/experiment-tracking/components/DetailsOverviewMetadataTable';\nimport { DetailsOverviewCopyableIdBox } from '../DetailsOverviewCopyableIdBox';\nimport type { RunInfoEntity } from '../../types';\nimport type { UseGetRunQueryResponseRunInfo } from './hooks/useGetRunQuery';\nimport type { KeyValueEntity, MetricEntitiesByName, RunDatasetWithTags } from '../../types';\n\nconst EmptyValue = () => <Typography.Hint>—</Typography.Hint>;\n\nexport const RunViewOverview = ({\n  runUuid,\n  onRunDataUpdated,\n  tags,\n  runInfo,\n  datasets,\n  params,\n  latestMetrics,\n}: {\n  runUuid: string;\n  onRunDataUpdated: () => void | Promise<any>;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  tags: Record<string, KeyValueEntity>;\n  latestMetrics: MetricEntitiesByName;\n  datasets?: RunDatasetWithTags[];\n  params: Record<string, KeyValueEntity>;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { search } = useLocation();\n\n  const { registeredModels } = useSelector(({ entities }: ReduxState) => ({\n    registeredModels: entities.modelVersionsByRunUuid[runUuid],\n  }));\n\n  const loggedModels = useMemo(() => Utils.getLoggedModelsFromTags(tags), [tags]);\n  const parentRunIdTag = tags[EXPERIMENT_PARENT_ID_TAG];\n\n  const renderDetails = () => {\n    return (\n      <DetailsOverviewMetadataTable>\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Created at\"\n              description=\"Run page > Overview > Run start time section label\"\n            />\n          }\n          value={runInfo.startTime ? Utils.formatTimestamp(runInfo.startTime) : <EmptyValue />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Created by\"\n              description=\"Run page > Overview > Run author section label\"\n            />\n          }\n          value={<RunViewUserLinkBox runInfo={runInfo} tags={tags} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Experiment ID\"\n              description=\"Run page > Overview > experiment ID section label\"\n            />\n          }\n          value={<DetailsOverviewCopyableIdBox value={runInfo?.experimentId ?? ''} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage defaultMessage=\"Status\" description=\"Run page > Overview > Run status section label\" />\n          }\n          value={<RunViewStatusBox status={runInfo.status} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={<FormattedMessage defaultMessage=\"Run ID\" description=\"Run page > Overview > Run ID section label\" />}\n          value={<DetailsOverviewCopyableIdBox value={runInfo.runUuid ?? ''} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Duration\"\n              description=\"Run page > Overview > Run duration section label\"\n            />\n          }\n          value={Utils.getDuration(runInfo.startTime, runInfo.endTime)}\n        />\n        {parentRunIdTag && (\n          <DetailsOverviewMetadataRow\n            title={<FormattedMessage defaultMessage=\"Parent run\" description=\"Run page > Overview > Parent run\" />}\n            value={<RunViewParentRunBox parentRunUuid={parentRunIdTag.value} />}\n          />\n        )}\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Datasets used\"\n              description=\"Run page > Overview > Run datasets section label\"\n            />\n          }\n          value={\n            datasets?.length ? <RunViewDatasetBox tags={tags} runInfo={runInfo} datasets={datasets} /> : <EmptyValue />\n          }\n        />\n        <DetailsOverviewMetadataRow\n          title={<FormattedMessage defaultMessage=\"Tags\" description=\"Run page > Overview > Run tags section label\" />}\n          value={<RunViewTagsBox runUuid={runInfo.runUuid ?? ''} tags={tags} onTagsUpdated={onRunDataUpdated} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage defaultMessage=\"Source\" description=\"Run page > Overview > Run source section label\" />\n          }\n          value={<RunViewSourceBox tags={tags} search={search} runUuid={runUuid} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Logged models\"\n              description=\"Run page > Overview > Run models section label\"\n            />\n          }\n          value={\n            loggedModels?.length > 0 ? (\n              <RunViewLoggedModelsBox runInfo={runInfo} loggedModels={loggedModels} />\n            ) : (\n              <EmptyValue />\n            )\n          }\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Registered models\"\n              description=\"Run page > Overview > Run models section label\"\n            />\n          }\n          value={\n            registeredModels?.length > 0 ? (\n              <RunViewRegisteredModelsBox runInfo={runInfo} registeredModels={registeredModels} />\n            ) : (\n              <EmptyValue />\n            )\n          }\n        />\n      </DetailsOverviewMetadataTable>\n    );\n  };\n\n  const renderParams = () => {\n    return <DetailsOverviewParamsTable params={params} />;\n  };\n\n  return (\n    <div css={{ flex: '1' }}>\n      <RunViewDescriptionBox runUuid={runUuid} tags={tags} onDescriptionChanged={onRunDataUpdated} />\n      <Typography.Title level={4}>\n        <FormattedMessage defaultMessage=\"Details\" description=\"Run page > Overview > Details section title\" />\n      </Typography.Title>\n      {renderDetails()}\n      <div css={{ display: 'flex', gap: theme.spacing.lg, minHeight: 360, maxHeight: 760, overflow: 'hidden' }}>\n        {renderParams()}\n        <RunViewMetricsTable latestMetrics={latestMetrics} runInfo={runInfo} />\n      </div>\n    </div>\n  );\n};\n","import { isEmpty, keyBy } from 'lodash';\nimport { useEffect, useMemo } from 'react';\nimport { useRunDetailsPageDataLegacy } from '../useRunDetailsPageDataLegacy';\nimport {\n  type UseGetRunQueryResponseExperiment,\n  useGetRunQuery,\n  UseGetRunQueryDataApiError,\n  UseGetRunQueryResponseDataMetrics,\n  UseGetRunQueryResponseDatasetInputs,\n  UseGetRunQueryResponseRunInfo,\n} from './useGetRunQuery';\nimport {\n  KeyValueEntity,\n  RunDatasetWithTags,\n  type ExperimentEntity,\n  type MetricEntitiesByName,\n  type MetricEntity,\n  type RunInfoEntity,\n} from '../../../types';\nimport { shouldEnableGraphQLRunDetailsPage } from '../../../../common/utils/FeatureUtils';\nimport { ThunkDispatch } from '../../../../redux-types';\nimport { useDispatch } from 'react-redux';\nimport { searchModelVersionsApi } from '../../../../model-registry/actions';\nimport { ApolloError } from '@apollo/client';\nimport { ErrorWrapper } from '../../../../common/utils/ErrorWrapper';\nimport { pickBy } from 'lodash';\n\n// Internal util: transforms an array of objects into a keyed object by the `key` field\nconst transformToKeyedObject = <Output, Input = any>(inputArray: Input[]) =>\n  keyBy(inputArray, 'key') as Record<string, Output>;\n\n// Internal util: transforms an array of metric values into an array of MetricEntity objects\n// GraphQL uses strings for steps and timestamp so we cast them to numbers\nconst transformMetricValues = (inputArray: UseGetRunQueryResponseDataMetrics): MetricEntity[] =>\n  inputArray\n    .filter(({ key, value, step, timestamp }) => key !== null && value !== null && step !== null && timestamp !== null)\n    .map(({ key, value, step, timestamp }: any) => ({\n      key,\n      value,\n      step: Number(step),\n      timestamp: Number(timestamp),\n    }));\n\n// Internal util: transforms an array of dataset inputs into an array of RunDatasetWithTags objects\nexport const transformDatasets = (inputArray?: UseGetRunQueryResponseDatasetInputs): RunDatasetWithTags[] | undefined =>\n  inputArray?.map((datasetInput) => ({\n    dataset: {\n      digest: datasetInput.dataset?.digest ?? '',\n      name: datasetInput.dataset?.name ?? '',\n      profile: datasetInput.dataset?.profile ?? '',\n      schema: datasetInput.dataset?.schema ?? '',\n      source: datasetInput.dataset?.source ?? '',\n      sourceType: datasetInput.dataset?.sourceType ?? '',\n    },\n    tags:\n      datasetInput.tags\n        ?.map((tag) => ({\n          key: tag.key ?? '',\n          value: tag.value ?? '',\n        }))\n        .filter((tag) => !isEmpty(tag.key)) ?? [],\n  }));\n\ninterface UseRunDetailsPageDataResult {\n  experiment?: ExperimentEntity | UseGetRunQueryResponseExperiment;\n  error: Error | ErrorWrapper | undefined | ApolloError;\n\n  latestMetrics: MetricEntitiesByName;\n  loading: boolean;\n  params: Record<string, KeyValueEntity>;\n  refetchRun: any;\n  runInfo?: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  tags: Record<string, KeyValueEntity>;\n  datasets?: RunDatasetWithTags[];\n\n  // Only present in legacy implementation\n  runFetchError?: Error | ErrorWrapper | undefined;\n  experimentFetchError?: Error | ErrorWrapper | undefined;\n\n  // Only present in graphQL implementation\n  apiError?: UseGetRunQueryDataApiError;\n}\n\n/**\n * An updated version of the `useRunDetailsPageData` hook that either uses the REST API-based implementation\n * or the GraphQL-based implementation to fetch run details, based on the `shouldEnableGraphQLRunDetailsPage` flag.\n */\nexport const useRunDetailsPageData = ({\n  runUuid,\n  experimentId,\n}: {\n  runUuid: string;\n  experimentId: string;\n}): UseRunDetailsPageDataResult => {\n  const usingGraphQL = shouldEnableGraphQLRunDetailsPage();\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  // If GraphQL flag is enabled, use the graphQL query to fetch the run data.\n  // We can safely disable the eslint rule since feature flag evaluation is stable\n  /* eslint-disable react-hooks/rules-of-hooks */\n  if (usingGraphQL) {\n    const graphQLQuery = () =>\n      useGetRunQuery({\n        runUuid,\n      });\n\n    const detailsPageGraphqlResponse = graphQLQuery();\n\n    // Model versions are not fully supported by GraphQL yet, so we need to fetch them separately\n    useEffect(() => {\n      dispatch(searchModelVersionsApi({ run_id: runUuid }));\n    }, [dispatch, runUuid]);\n\n    const { latestMetrics, tags, params, datasets } = useMemo(() => {\n      // Filter out tags, metrics, and params that are entirely whitespace\n      return {\n        latestMetrics: pickBy(\n          transformToKeyedObject<MetricEntity>(\n            transformMetricValues(detailsPageGraphqlResponse.data?.data?.metrics ?? []),\n          ),\n          (metric) => metric.key.trim().length > 0,\n        ),\n        tags: pickBy(\n          transformToKeyedObject<KeyValueEntity>(detailsPageGraphqlResponse.data?.data?.tags ?? []),\n          (tag) => tag.key.trim().length > 0,\n        ),\n        params: pickBy(\n          transformToKeyedObject<KeyValueEntity>(detailsPageGraphqlResponse.data?.data?.params ?? []),\n          (param) => param.key.trim().length > 0,\n        ),\n        datasets: transformDatasets(detailsPageGraphqlResponse.data?.inputs?.datasetInputs),\n      };\n    }, [detailsPageGraphqlResponse.data]);\n\n    return {\n      runInfo: detailsPageGraphqlResponse.data?.info ?? undefined,\n      experiment: detailsPageGraphqlResponse.data?.experiment ?? undefined,\n      loading: detailsPageGraphqlResponse.loading,\n      error: detailsPageGraphqlResponse.apolloError,\n      apiError: detailsPageGraphqlResponse.apiError,\n      refetchRun: detailsPageGraphqlResponse.refetchRun,\n      datasets,\n      latestMetrics,\n      tags,\n      params,\n    };\n  }\n\n  // If GraphQL flag is disabled, use the legacy implementation to fetch the run data.\n  const detailsPageResponse = useRunDetailsPageDataLegacy(runUuid, experimentId);\n  const error = detailsPageResponse.errors.runFetchError || detailsPageResponse.errors.experimentFetchError;\n\n  return {\n    runInfo: detailsPageResponse.data?.runInfo,\n    latestMetrics: detailsPageResponse.data?.latestMetrics,\n    tags: detailsPageResponse.data?.tags,\n    experiment: detailsPageResponse.data?.experiment,\n    params: detailsPageResponse.data?.params,\n    datasets: detailsPageResponse.data?.datasets,\n    loading: detailsPageResponse.loading,\n    error,\n    runFetchError: detailsPageResponse.errors.runFetchError,\n    experimentFetchError: detailsPageResponse.errors.experimentFetchError,\n    refetchRun: detailsPageResponse.refetchRun,\n  };\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ReduxState, ThunkDispatch } from '../../../redux-types';\nimport { getExperimentApi, getRunApi } from '../../actions';\nimport { searchModelVersionsApi } from '../../../model-registry/actions';\nimport { pickBy } from 'lodash';\nimport Utils from '../../../common/utils/Utils';\n\n/**\n * Hook fetching data for the run page: both run and experiment entities.\n * The initial fetch action is omitted if entities are already in the store.\n */\nexport const useRunDetailsPageDataLegacy = (runUuid: string, experimentId: string) => {\n  const [runRequestId, setRunRequestId] = useState('');\n  const [experimentRequestId, setExperimentRequestId] = useState('');\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  // Get the necessary data from the store\n\n  const { runInfo, tags, latestMetrics, experiment, params, datasets } = useSelector((state: ReduxState) => ({\n    runInfo: state.entities.runInfosByUuid[runUuid],\n    // Filter out tags, metrics, and params that are entirely whitespace\n    tags: pickBy(state.entities.tagsByRunUuid[runUuid], (tag) => tag.key.trim().length > 0),\n    latestMetrics: pickBy(state.entities.latestMetricsByRunUuid[runUuid], (metric) => metric.key.trim().length > 0),\n    params: pickBy(state.entities.paramsByRunUuid[runUuid], (param) => param.key.trim().length > 0),\n    experiment: state.entities.experimentsById[experimentId],\n    datasets: state.entities.runDatasetsByUuid[runUuid],\n  }));\n\n  const fetchRun = useCallback(() => {\n    const action = getRunApi(runUuid);\n    setRunRequestId(action.meta.id);\n    return dispatch(action);\n  }, [dispatch, runUuid]);\n\n  const fetchExperiment = useCallback(() => {\n    const action = getExperimentApi(experimentId);\n    setExperimentRequestId(action.meta.id);\n    return dispatch(action);\n  }, [dispatch, experimentId]);\n\n  const fetchModelVersions = useCallback(() => {\n    dispatch(searchModelVersionsApi({ run_id: runUuid }));\n  }, [dispatch, runUuid]);\n\n  // Do the initial run & experiment fetch only if it's not in the store already\n  useEffect(() => {\n    if (!runInfo) {\n      fetchRun().catch((e) => Utils.logErrorAndNotifyUser(e));\n    }\n    fetchModelVersions();\n  }, [runInfo, fetchRun, fetchModelVersions]);\n\n  useEffect(() => {\n    if (!experiment) {\n      fetchExperiment().catch((e) => Utils.logErrorAndNotifyUser(e));\n    }\n  }, [experiment, fetchExperiment]);\n\n  // Check the \"apis\" store for the requests status\n  const { loading: runLoading, error: runFetchError } = useSelector((state: ReduxState) => ({\n    loading: !runRequestId || Boolean(state.apis?.[runRequestId]?.active),\n    error: state.apis?.[runRequestId]?.error,\n  }));\n\n  const { loading: experimentLoading, error: experimentFetchError } = useSelector((state: ReduxState) => ({\n    loading: !runRequestId || Boolean(state.apis?.[experimentRequestId]?.active),\n    error: state.apis?.[experimentRequestId]?.error,\n  }));\n\n  const loading = runLoading || experimentLoading;\n\n  return {\n    loading,\n    data: {\n      runInfo,\n      tags,\n      params,\n      latestMetrics,\n      experiment,\n      datasets,\n    },\n    refetchRun: fetchRun,\n    errors: { runFetchError, experimentFetchError },\n  };\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport Routes from '../routes';\nimport { ErrorView } from '../../common/components/ErrorView';\n\ntype Props = {\n  runId: string;\n};\n\nexport class RunNotFoundView extends Component<Props> {\n  render() {\n    return (\n      <ErrorView\n        statusCode={404}\n        subMessage={`Run ID ${this.props.runId} does not exist`}\n        fallbackHomePageReactRoute={Routes.rootRoute}\n      />\n    );\n  }\n}\n","import { Input, SearchIcon, ToggleButton, useDesignSystemTheme } from '@databricks/design-system';\nimport { compact, mapValues, values } from 'lodash';\nimport { ReactNode, useEffect, useMemo, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { ReduxState } from '../../../redux-types';\nimport type { KeyValueEntity, MetricEntitiesByName, RunInfoEntity } from '../../types';\n\nimport { RunsChartsTooltipWrapper } from '../runs-charts/hooks/useRunsChartsTooltip';\nimport { RunViewChartTooltipBody } from './RunViewChartTooltipBody';\nimport { RunsChartType, RunsChartsCardConfig } from '../runs-charts/runs-charts.types';\nimport type { RunsChartsRunData } from '../runs-charts/components/RunsCharts.common';\nimport { RunsChartsLineChartXAxisType } from '../runs-charts/components/RunsCharts.common';\nimport type { ExperimentRunsChartsUIConfiguration } from '../experiment-page/models/ExperimentPageUIState';\nimport { RunsChartsSectionAccordion } from '../runs-charts/components/sections/RunsChartsSectionAccordion';\nimport { RunsChartsConfigureModal } from '../runs-charts/components/RunsChartsConfigureModal';\nimport {\n  RunsChartsUIConfigurationContextProvider,\n  useConfirmChartCardConfigurationFn,\n  useInsertRunsChartsFn,\n  useRemoveRunsChartFn,\n  useReorderRunsChartsFn,\n} from '../runs-charts/hooks/useRunsChartsUIConfiguration';\nimport { MLFLOW_MODEL_METRIC_NAME, MLFLOW_SYSTEM_METRIC_NAME, MLFLOW_SYSTEM_METRIC_PREFIX } from '../../constants';\nimport LocalStorageUtils from '../../../common/utils/LocalStorageUtils';\nimport { RunsChartsFullScreenModal } from '../runs-charts/components/RunsChartsFullScreenModal';\nimport { useIsTabActive } from '../../../common/hooks/useIsTabActive';\nimport {\n  shouldEnableGlobalLineChartConfig,\n  shouldEnableDraggableChartsGridLayout,\n  shouldEnableImageGridCharts,\n  shouldEnableRunDetailsPageAutoRefresh,\n  shouldUseRegexpBasedChartFiltering,\n} from '../../../common/utils/FeatureUtils';\nimport { usePopulateImagesByRunUuid } from '../experiment-page/hooks/usePopulateImagesByRunUuid';\nimport { DragAndDropProvider } from '../../../common/hooks/useDragAndDropElement';\nimport type { UseGetRunQueryResponseRunInfo } from './hooks/useGetRunQuery';\nimport { RunsChartsGlobalChartSettingsDropdown } from '../runs-charts/components/RunsChartsGlobalChartSettingsDropdown';\nimport { RunsChartsDraggableCardsGridContextProvider } from '../runs-charts/components/RunsChartsDraggableCardsGridContext';\nimport { RunsChartsFilterInput } from '../runs-charts/components/RunsChartsFilterInput';\n\ninterface RunViewMetricChartsV2Props {\n  metricKeys: string[];\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  /**\n   * Whether to display model or system metrics. This affects labels and tooltips.\n   */\n  mode: 'model' | 'system';\n\n  latestMetrics?: MetricEntitiesByName;\n  tags?: Record<string, KeyValueEntity>;\n  params?: Record<string, KeyValueEntity>;\n}\n\n/**\n * Component displaying metric charts for a single run\n */\nexport const RunViewMetricChartsV2Impl = ({\n  runInfo,\n  metricKeys,\n  mode,\n  chartUIState,\n  updateChartsUIState,\n  latestMetrics = {},\n  params = {},\n  tags = {},\n}: RunViewMetricChartsV2Props & {\n  chartUIState: ExperimentRunsChartsUIConfiguration;\n  updateChartsUIState: (\n    stateSetter: (state: ExperimentRunsChartsUIConfiguration) => ExperimentRunsChartsUIConfiguration,\n  ) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [search, setSearch] = useState('');\n  const { formatMessage } = useIntl();\n\n  const { compareRunCharts, compareRunSections, chartsSearchFilter } = chartUIState;\n\n  // For the draggable grid layout, we filter visible cards on this level\n  const visibleChartCards = useMemo(() => {\n    if (!shouldEnableDraggableChartsGridLayout()) {\n      return compareRunCharts;\n    }\n    return compareRunCharts?.filter((chart) => !chart.deleted) ?? [];\n  }, [compareRunCharts]);\n\n  const [fullScreenChart, setFullScreenChart] = useState<\n    { config: RunsChartsCardConfig; title: string; subtitle: ReactNode } | undefined\n  >(undefined);\n\n  const metricsForRun = useSelector(({ entities }: ReduxState) => {\n    return mapValues(entities.sampledMetricsByRunUuid[runInfo.runUuid ?? ''], (metricsByRange) => {\n      return compact(\n        values(metricsByRange)\n          .map(({ metricsHistory }) => metricsHistory)\n          .flat(),\n      );\n    });\n  });\n\n  const tooltipContextValue = useMemo(() => ({ runInfo, metricsForRun }), [runInfo, metricsForRun]);\n\n  const { imagesByRunUuid } = useSelector((state: ReduxState) => ({\n    imagesByRunUuid: state.entities.imagesByRunUuid,\n  }));\n\n  const [configuredCardConfig, setConfiguredCardConfig] = useState<RunsChartsCardConfig | null>(null);\n\n  const reorderCharts = useReorderRunsChartsFn();\n\n  const addNewChartCard = (metricSectionId: string) => (type: RunsChartType) =>\n    setConfiguredCardConfig(RunsChartsCardConfig.getEmptyChartCardByType(type, false, undefined, metricSectionId));\n\n  const insertCharts = useInsertRunsChartsFn();\n\n  const startEditChart = (chartCard: RunsChartsCardConfig) => setConfiguredCardConfig(chartCard);\n\n  const removeChart = useRemoveRunsChartFn();\n\n  const confirmChartCardConfiguration = useConfirmChartCardConfigurationFn();\n\n  const submitForm = (configuredCard: Partial<RunsChartsCardConfig>) => {\n    confirmChartCardConfiguration(configuredCard);\n\n    // Hide the modal\n    setConfiguredCardConfig(null);\n  };\n\n  // Create a single run data object to be used in charts\n  const chartData: RunsChartsRunData[] = useMemo(\n    () => [\n      {\n        displayName: runInfo.runName ?? '',\n        metrics: latestMetrics,\n        params,\n        tags,\n        images: imagesByRunUuid[runInfo.runUuid ?? ''] || {},\n        metricHistory: {},\n        uuid: runInfo.runUuid ?? '',\n        color: theme.colors.primary,\n        runInfo,\n      },\n    ],\n    [runInfo, latestMetrics, params, tags, imagesByRunUuid, theme],\n  );\n\n  useEffect(() => {\n    if ((!compareRunSections || !compareRunCharts) && chartData.length > 0) {\n      const { resultChartSet, resultSectionSet } = RunsChartsCardConfig.getBaseChartAndSectionConfigs({\n        runsData: chartData,\n        enabledSectionNames: [mode === 'model' ? MLFLOW_MODEL_METRIC_NAME : MLFLOW_SYSTEM_METRIC_NAME],\n        // Filter only model or system metrics\n        filterMetricNames: (name) => {\n          const isSystemMetric = name.startsWith(MLFLOW_SYSTEM_METRIC_PREFIX);\n          return mode === 'model' ? !isSystemMetric : isSystemMetric;\n        },\n      });\n\n      updateChartsUIState((current) => ({\n        ...current,\n        compareRunCharts: resultChartSet,\n        compareRunSections: resultSectionSet,\n      }));\n    }\n  }, [compareRunCharts, compareRunSections, chartData, mode, updateChartsUIState]);\n\n  /**\n   * Update charts with the latest metrics if new are found\n   */\n  useEffect(() => {\n    updateChartsUIState((current) => {\n      if (!current.compareRunCharts || !current.compareRunSections) {\n        return current;\n      }\n      const { resultChartSet, resultSectionSet, isResultUpdated } = RunsChartsCardConfig.updateChartAndSectionConfigs({\n        compareRunCharts: current.compareRunCharts,\n        compareRunSections: current.compareRunSections,\n        runsData: chartData,\n        isAccordionReordered: current.isAccordionReordered,\n        // Filter only model or system metrics\n        filterMetricNames: (name) => {\n          const isSystemMetric = name.startsWith(MLFLOW_SYSTEM_METRIC_PREFIX);\n          return mode === 'model' ? !isSystemMetric : isSystemMetric;\n        },\n      });\n\n      if (!isResultUpdated) {\n        return current;\n      }\n      return {\n        ...current,\n        compareRunCharts: resultChartSet,\n        compareRunSections: resultSectionSet,\n      };\n    });\n  }, [chartData, updateChartsUIState, mode]);\n\n  const isTabActive = useIsTabActive();\n  const autoRefreshEnabled = chartUIState.autoRefreshEnabled && shouldEnableRunDetailsPageAutoRefresh() && isTabActive;\n\n  usePopulateImagesByRunUuid({\n    runUuids: [runInfo.runUuid ?? ''],\n    runUuidsIsActive: [runInfo.status === 'RUNNING'],\n    autoRefreshEnabled,\n    enabled: shouldEnableImageGridCharts(),\n  });\n\n  const searchChartsValue = shouldUseRegexpBasedChartFiltering() ? chartsSearchFilter ?? '' : search;\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden',\n      }}\n    >\n      <div\n        css={{\n          paddingBottom: theme.spacing.md,\n          display: 'flex',\n          gap: theme.spacing.sm,\n          flex: '0 0 auto',\n        }}\n      >\n        {shouldUseRegexpBasedChartFiltering() ? (\n          <RunsChartsFilterInput chartsSearchFilter={chartsSearchFilter} />\n        ) : (\n          <Input\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewmetricchartsv2.tsx_230\"\n            role=\"searchbox\"\n            prefix={<SearchIcon />}\n            value={search}\n            allowClear\n            onChange={(e) => setSearch(e.target.value)}\n            placeholder={formatMessage({\n              defaultMessage: 'Search metric charts',\n              description: 'Run page > Charts tab > Filter metric charts input > placeholder',\n            })}\n          />\n        )}\n        {shouldEnableRunDetailsPageAutoRefresh() && (\n          <ToggleButton\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewmetricchartsv2.tsx_244\"\n            pressed={chartUIState.autoRefreshEnabled}\n            onPressedChange={(pressed) => {\n              updateChartsUIState((current) => ({ ...current, autoRefreshEnabled: pressed }));\n            }}\n          >\n            {formatMessage({\n              defaultMessage: 'Auto-refresh',\n              description: 'Run page > Charts tab > Auto-refresh toggle button',\n            })}\n          </ToggleButton>\n        )}\n        {shouldEnableGlobalLineChartConfig() && (\n          <RunsChartsGlobalChartSettingsDropdown\n            metricKeyList={metricKeys}\n            globalLineChartConfig={chartUIState.globalLineChartConfig}\n            updateUIState={updateChartsUIState}\n          />\n        )}\n      </div>\n      <div\n        css={{\n          flex: 1,\n          overflow: 'auto',\n        }}\n      >\n        <RunsChartsTooltipWrapper contextData={tooltipContextValue} component={RunViewChartTooltipBody}>\n          <RunsChartsDraggableCardsGridContextProvider visibleChartCards={visibleChartCards}>\n            <RunsChartsSectionAccordion\n              compareRunSections={compareRunSections}\n              compareRunCharts={visibleChartCards}\n              reorderCharts={reorderCharts}\n              insertCharts={insertCharts}\n              chartData={chartData}\n              startEditChart={startEditChart}\n              removeChart={removeChart}\n              addNewChartCard={addNewChartCard}\n              search={searchChartsValue}\n              supportedChartTypes={[RunsChartType.LINE, RunsChartType.BAR, RunsChartType.IMAGE]}\n              setFullScreenChart={setFullScreenChart}\n              autoRefreshEnabled={autoRefreshEnabled}\n              globalLineChartConfig={chartUIState.globalLineChartConfig}\n              groupBy={null}\n            />\n          </RunsChartsDraggableCardsGridContextProvider>\n        </RunsChartsTooltipWrapper>\n      </div>\n      {configuredCardConfig && (\n        <RunsChartsConfigureModal\n          chartRunData={chartData}\n          metricKeyList={metricKeys}\n          paramKeyList={[]}\n          config={configuredCardConfig}\n          onSubmit={submitForm}\n          onCancel={() => setConfiguredCardConfig(null)}\n          groupBy={null}\n          supportedChartTypes={[RunsChartType.LINE, RunsChartType.BAR, RunsChartType.IMAGE]}\n          globalLineChartConfig={chartUIState.globalLineChartConfig}\n        />\n      )}\n      <RunsChartsFullScreenModal\n        fullScreenChart={fullScreenChart}\n        onCancel={() => setFullScreenChart(undefined)}\n        chartData={chartData}\n        tooltipContextValue={tooltipContextValue}\n        tooltipComponent={RunViewChartTooltipBody}\n        autoRefreshEnabled={autoRefreshEnabled}\n        groupBy={null}\n      />\n    </div>\n  );\n};\n\nexport const RunViewMetricChartsV2 = (props: RunViewMetricChartsV2Props) => {\n  const persistenceIdentifier = `${props.runInfo.runUuid}-${props.mode}`;\n\n  const localStore = useMemo(\n    () => LocalStorageUtils.getStoreForComponent('RunPage', persistenceIdentifier),\n    [persistenceIdentifier],\n  );\n\n  const [chartUIState, updateChartsUIState] = useState<ExperimentRunsChartsUIConfiguration>(() => {\n    const defaultChartState: ExperimentRunsChartsUIConfiguration = {\n      isAccordionReordered: false,\n      compareRunCharts: undefined,\n      compareRunSections: undefined,\n      // Auto-refresh is enabled by default only if the flag is set\n      autoRefreshEnabled: shouldEnableRunDetailsPageAutoRefresh(),\n      globalLineChartConfig: {\n        xAxisKey: RunsChartsLineChartXAxisType.STEP,\n        lineSmoothness: 0,\n        selectedXAxisMetricKey: '',\n      },\n    };\n    try {\n      const persistedChartState = localStore.getItem('chartUIState');\n\n      if (!persistedChartState) {\n        return defaultChartState;\n      }\n      return JSON.parse(persistedChartState);\n    } catch {\n      return defaultChartState;\n    }\n  });\n\n  useEffect(() => {\n    localStore.setItem('chartUIState', JSON.stringify(chartUIState));\n  }, [chartUIState, localStore]);\n\n  return (\n    <RunsChartsUIConfigurationContextProvider updateChartsUIState={updateChartsUIState}>\n      <RunViewMetricChartsV2Impl {...props} chartUIState={chartUIState} updateChartsUIState={updateChartsUIState} />\n    </RunsChartsUIConfigurationContextProvider>\n  );\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../../types';\nimport ArtifactPage from '../ArtifactPage';\nimport { useMediaQuery } from '@databricks/web-shared/hooks';\nimport { TracesView } from '../traces/TracesView';\nimport { useMemo } from 'react';\nimport { ExperimentViewTracesTableColumns } from '../traces/TracesView.utils';\n\nconst disabledColumns = [ExperimentViewTracesTableColumns.runName];\n\n/**\n * A run page tab containing the artifact browser\n */\nexport const RunViewTracesTab = ({\n  experimentId,\n  runUuid,\n}: {\n  runUuid: string;\n  experimentId: string;\n  runTags: Record<string, KeyValueEntity>;\n}) => {\n  const stableExperimentId = useMemo(() => [experimentId], [experimentId]);\n\n  return (\n    <div css={{ flex: 1, minWidth: 0 }}>\n      <TracesView experimentIds={stableExperimentId} runUuid={runUuid} disabledColumns={disabledColumns} />\n    </div>\n  );\n};\n","import { ApolloError } from '@apollo/client';\n\ninterface CommonGraphQLApiError {\n  code: string | null;\n  message: string | null;\n}\n\nexport const getGraphQLErrorMessage = (error?: CommonGraphQLApiError | ApolloError | Error | any) => {\n  if (!error) {\n    return undefined;\n  }\n  if (error instanceof ApolloError) {\n    if (error.graphQLErrors.length > 0) {\n      return error.graphQLErrors.map((e) => e.toString()).join(', ');\n    }\n  }\n\n  if ('message' in error) {\n    return error.message;\n  }\n\n  return error.toString();\n};\n","import { DangerIcon, Empty, ParagraphSkeleton, TitleSkeleton, useDesignSystemTheme } from '@databricks/design-system';\nimport { useSelector } from 'react-redux';\nimport invariant from 'invariant';\nimport { useMemo, useState } from 'react';\n\nimport { PageContainer } from '../../../common/components/PageContainer';\nimport { useNavigate, useParams } from '../../../common/utils/RoutingUtils';\nimport Utils from '../../../common/utils/Utils';\nimport { RunPageTabName } from '../../constants';\nimport { RenameRunModal } from '../modals/RenameRunModal';\nimport { RunViewArtifactTab } from './RunViewArtifactTab';\nimport { RunViewHeader } from './RunViewHeader';\nimport { RunViewMetricCharts } from './RunViewMetricCharts';\nimport { RunViewOverview } from './RunViewOverview';\nimport { useRunDetailsPageData } from './hooks/useRunDetailsPageData';\nimport { useRunViewActiveTab } from './useRunViewActiveTab';\nimport { ReduxState } from '../../../redux-types';\nimport { ErrorWrapper } from '../../../common/utils/ErrorWrapper';\nimport { RunNotFoundView } from '../RunNotFoundView';\nimport { ErrorCodes } from '../../../common/constants';\nimport NotFoundPage from '../NotFoundPage';\nimport { FormattedMessage } from 'react-intl';\nimport { isSystemMetricKey } from '../../utils/MetricsUtils';\nimport DeleteRunModal from '../modals/DeleteRunModal';\nimport Routes from '../../routes';\nimport { RunViewMetricChartsV2 } from './RunViewMetricChartsV2';\nimport {\n  shouldEnableRunDetailsPageTracesTab,\n  shouldUseUnifiedRunCharts,\n  shouldEnableGraphQLRunDetailsPage,\n} from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport { useMediaQuery } from '@databricks/web-shared/hooks';\nimport { RunViewTracesTab } from './RunViewTracesTab';\nimport { getGraphQLErrorMessage } from '../../../graphql/get-graphql-error';\n\nconst RunPageLoadingState = () => (\n  <PageContainer>\n    <TitleSkeleton\n      loading\n      label={<FormattedMessage defaultMessage=\"Run page loading\" description=\"Run page > Loading state\" />}\n    />\n    {[...Array(3).keys()].map((i) => (\n      <ParagraphSkeleton key={i} seed={`s-${i}`} />\n    ))}\n  </PageContainer>\n);\n\nexport const RunPage = () => {\n  const { runUuid, experimentId } = useParams<{\n    runUuid: string;\n    experimentId: string;\n  }>();\n  const navigate = useNavigate();\n  const { theme } = useDesignSystemTheme();\n  const [renameModalVisible, setRenameModalVisible] = useState(false);\n  const [deleteModalVisible, setDeleteModalVisible] = useState(false);\n\n  invariant(runUuid, '[RunPage] Run UUID route param not provided');\n  invariant(experimentId, '[RunPage] Experiment ID route param not provided');\n\n  const {\n    experiment,\n    error,\n    latestMetrics,\n    loading,\n    params,\n    refetchRun,\n    runInfo,\n    tags,\n    experimentFetchError,\n    runFetchError,\n    apiError,\n    datasets,\n  } = useRunDetailsPageData({\n    experimentId,\n    runUuid,\n  });\n\n  const [modelMetricKeys, systemMetricKeys] = useMemo<[string[], string[]]>(() => {\n    if (!latestMetrics) {\n      return [[], []];\n    }\n\n    return [\n      Object.keys(latestMetrics).filter((metricKey) => !isSystemMetricKey(metricKey)),\n      Object.keys(latestMetrics).filter((metricKey) => isSystemMetricKey(metricKey)),\n    ];\n  }, [latestMetrics]);\n\n  const { comparedExperimentIds = [], hasComparedExperimentsBefore = false } = useSelector(\n    (state: ReduxState) => state.comparedExperiments || {},\n  );\n\n  const activeTab = useRunViewActiveTab();\n\n  const renderActiveTab = () => {\n    if (!runInfo) {\n      return null;\n    }\n    switch (activeTab) {\n      case RunPageTabName.MODEL_METRIC_CHARTS:\n        if (shouldUseUnifiedRunCharts()) {\n          return (\n            <RunViewMetricChartsV2\n              key=\"model\"\n              mode=\"model\"\n              metricKeys={modelMetricKeys}\n              runInfo={runInfo}\n              latestMetrics={latestMetrics}\n              tags={tags}\n              params={params}\n            />\n          );\n        } else {\n          return <RunViewMetricCharts mode=\"model\" metricKeys={modelMetricKeys} runInfo={runInfo} />;\n        }\n      case RunPageTabName.SYSTEM_METRIC_CHARTS:\n        if (shouldUseUnifiedRunCharts()) {\n          return (\n            <RunViewMetricChartsV2\n              key=\"system\"\n              mode=\"system\"\n              metricKeys={systemMetricKeys}\n              runInfo={runInfo}\n              latestMetrics={latestMetrics}\n              tags={tags}\n              params={params}\n            />\n          );\n        } else {\n          return <RunViewMetricCharts mode=\"system\" metricKeys={systemMetricKeys} runInfo={runInfo} />;\n        }\n      case RunPageTabName.ARTIFACTS:\n        return (\n          <RunViewArtifactTab\n            runUuid={runUuid}\n            runTags={tags}\n            experimentId={experimentId}\n            artifactUri={runInfo.artifactUri ?? undefined}\n          />\n        );\n      case RunPageTabName.TRACES:\n        if (shouldEnableRunDetailsPageTracesTab()) {\n          return <RunViewTracesTab runUuid={runUuid} runTags={tags} experimentId={experimentId} />;\n        }\n    }\n\n    return (\n      <RunViewOverview\n        runInfo={runInfo}\n        tags={tags}\n        params={params}\n        latestMetrics={latestMetrics}\n        runUuid={runUuid}\n        onRunDataUpdated={refetchRun}\n        datasets={datasets}\n      />\n    );\n  };\n\n  // Use full height page with scrollable tab area only for non-xs screens\n  const useFullHeightPage = useMediaQuery(`(min-width: ${theme.responsive.breakpoints.sm}px)`);\n\n  const initialLoading = loading && (!runInfo || !experiment);\n\n  // Handle \"run not found\" error\n  if (\n    // For REST API:\n    (runFetchError instanceof ErrorWrapper && runFetchError.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST) ||\n    // For GraphQL:\n    apiError?.code === ErrorCodes.RESOURCE_DOES_NOT_EXIST ||\n    (error && getGraphQLErrorMessage(error).match(/not found$/))\n  ) {\n    return <RunNotFoundView runId={runUuid} />;\n  }\n\n  // Handle experiment not found error\n  if (\n    experimentFetchError instanceof ErrorWrapper &&\n    experimentFetchError.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST\n  ) {\n    return <NotFoundPage />;\n  }\n\n  // Catch-all for legacy REST API errors\n  if (runFetchError || experimentFetchError) {\n    return null;\n  }\n\n  // Catch-all for GraphQL errors\n  if (shouldEnableGraphQLRunDetailsPage() && (error || apiError)) {\n    return (\n      <div css={{ marginTop: theme.spacing.lg }}>\n        <Empty\n          title={\n            <FormattedMessage\n              defaultMessage=\"Can't load run details\"\n              description=\"Run page > error loading page title\"\n            />\n          }\n          description={getGraphQLErrorMessage(apiError ?? error)}\n          image={<DangerIcon />}\n        />\n      </div>\n    );\n  }\n\n  // Display spinner/skeleton for the initial data load\n  if (initialLoading || !runInfo || !experiment) {\n    return <RunPageLoadingState />;\n  }\n\n  return (\n    <>\n      <PageContainer usesFullHeight={useFullHeightPage}>\n        {/* Header fixed on top */}\n        <RunViewHeader\n          comparedExperimentIds={comparedExperimentIds}\n          experiment={experiment}\n          handleRenameRunClick={() => setRenameModalVisible(true)}\n          handleDeleteRunClick={() => setDeleteModalVisible(true)}\n          hasComparedExperimentsBefore={hasComparedExperimentsBefore}\n          runDisplayName={Utils.getRunDisplayName(runInfo, runUuid)}\n          runTags={tags}\n          runParams={params}\n          runUuid={runUuid}\n          artifactRootUri={runInfo?.artifactUri ?? undefined}\n        />\n        {/* Scroll tab contents independently within own container */}\n        <div css={{ flex: 1, overflow: 'auto', marginBottom: theme.spacing.sm, display: 'flex' }}>\n          {renderActiveTab()}\n        </div>\n      </PageContainer>\n      <RenameRunModal\n        runUuid={runUuid}\n        onClose={() => setRenameModalVisible(false)}\n        runName={runInfo.runName ?? ''}\n        isOpen={renameModalVisible}\n        onSuccess={refetchRun}\n      />\n      <DeleteRunModal\n        selectedRunIds={[runUuid]}\n        onClose={() => setDeleteModalVisible(false)}\n        isOpen={deleteModalVisible}\n        onSuccess={() => {\n          navigate(Routes.getExperimentPageRoute(experimentId));\n        }}\n      />\n    </>\n  );\n};\n\nexport default RunPage;\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { LegacyForm, Input, LegacySelect } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nimport './RegisterModelForm.css';\n\nconst { Option, OptGroup } = LegacySelect;\n\nconst CREATE_NEW_MODEL_LABEL = 'Create New Model';\n// Include 'CREATE_NEW_MODEL_LABEL' as part of the value for filtering to work properly. Also added\n// prefix and postfix to avoid value conflict with actual model names.\nexport const CREATE_NEW_MODEL_OPTION_VALUE = `$$$__${CREATE_NEW_MODEL_LABEL}__$$$`;\nexport const SELECTED_MODEL_FIELD = 'selectedModel';\nexport const MODEL_NAME_FIELD = 'modelName';\nexport const DESCRIPTION_FIELD = 'description';\n\ntype Props = {\n  modelByName?: any;\n  isCopy?: boolean;\n  onSearchRegisteredModels: (...args: any[]) => any;\n  innerRef: any;\n};\n\ntype State = any;\n\nexport class RegisterModelForm extends React.Component<Props, State> {\n  state = {\n    selectedModel: null,\n  };\n\n  handleModelSelectChange = (selectedModel: any) => {\n    this.setState({ selectedModel });\n  };\n\n  modelNameValidator = (rule: any, value: any, callback: any) => {\n    const { modelByName } = this.props;\n    callback(modelByName[value] ? `Model \"${value}\" already exists.` : undefined);\n  };\n\n  handleFilterOption = (input: any, option: any) => {\n    const value = (option && option.value) || '';\n    return value.toLowerCase().indexOf(input.toLowerCase()) !== -1;\n  };\n\n  renderExplanatoryText() {\n    const { isCopy } = this.props;\n    const { selectedModel } = this.state;\n    const creatingNewModel = selectedModel === CREATE_NEW_MODEL_OPTION_VALUE;\n\n    if (!selectedModel || creatingNewModel) {\n      return null;\n    }\n\n    const explanation = isCopy ? (\n      <FormattedMessage\n        defaultMessage=\"The model version will be copied to {selectedModel} as a new version.\"\n        description=\"Model registry > OSS Promote model modal > copy explanatory text\"\n        values={{ selectedModel: selectedModel }}\n      />\n    ) : (\n      <FormattedMessage\n        defaultMessage=\"The model will be registered as a new version of {selectedModel}.\"\n        description=\"Explantory text for registering a model\"\n        values={{ selectedModel: selectedModel }}\n      />\n    );\n\n    return <p className=\"modal-explanatory-text\">{explanation}</p>;\n  }\n\n  renderModel(model: any) {\n    return (\n      <Option value={model.name} key={model.name}>\n        {model.name}\n      </Option>\n    );\n  }\n  render() {\n    const { modelByName, innerRef, isCopy } = this.props;\n    const { selectedModel } = this.state;\n    const creatingNewModel = selectedModel === CREATE_NEW_MODEL_OPTION_VALUE;\n    return (\n      // @ts-expect-error TS(2322): Type '{ children: (Element | null)[]; ref: any; la... Remove this comment to see the full error message\n      <LegacyForm ref={innerRef} layout=\"vertical\" className=\"register-model-form\">\n        {/* \"+ Create new model\" OR \"Select existing model\" */}\n        <LegacyForm.Item\n          label={isCopy ? <b>Copy to model</b> : 'Model'}\n          name={SELECTED_MODEL_FIELD}\n          rules={[{ required: true, message: 'Please select a model or create a new one.' }]}\n        >\n          <LegacySelect\n            dropdownClassName=\"model-select-dropdown\"\n            onChange={this.handleModelSelectChange}\n            placeholder=\"Select a model\"\n            filterOption={this.handleFilterOption}\n            onSearch={this.props.onSearchRegisteredModels}\n            // @ts-expect-error TS(2769): No overload matches this call.\n            showSearch\n          >\n            <Option value={CREATE_NEW_MODEL_OPTION_VALUE} className=\"create-new-model-option\">\n              <i className=\"fa fa-plus fa-fw\" style={{ fontSize: 13 }} /> {CREATE_NEW_MODEL_LABEL}\n            </Option>\n            <OptGroup label=\"Models\">{Object.values(modelByName).map((model) => this.renderModel(model))}</OptGroup>\n          </LegacySelect>\n        </LegacyForm.Item>\n\n        {/* Name the new model when \"+ Create new model\" is selected */}\n        {creatingNewModel ? (\n          <LegacyForm.Item\n            label=\"Model Name\"\n            name={MODEL_NAME_FIELD}\n            rules={[\n              { required: true, message: 'Please input a name for the new model.' },\n              { validator: this.modelNameValidator },\n            ]}\n          >\n            <Input\n              componentId=\"codegen_mlflow_app_src_model-registry_components_registermodelform.tsx_132\"\n              placeholder=\"Input a model name\"\n            />\n          </LegacyForm.Item>\n        ) : null}\n\n        {/* Explanatory text shown when existing model is selected */}\n        {this.renderExplanatoryText()}\n      </LegacyForm>\n    );\n  }\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { REGISTERED_MODELS_SEARCH_NAME_FIELD } from '../constants';\nimport { resolveFilterValue } from '../actions';\n\nexport function getModelNameFilter(query: any) {\n  if (query) {\n    return `${REGISTERED_MODELS_SEARCH_NAME_FIELD} ilike ${resolveFilterValue(query, true)}`;\n  } else {\n    return '';\n  }\n}\n\nexport function getCombinedSearchFilter({\n  query = '',\n}: {\n  query?: string;\n} = {}) {\n  const filters = [];\n  const initialFilter = query.includes('tags.') ? query : getModelNameFilter(query);\n  if (initialFilter) filters.push(initialFilter);\n  return filters.join(' AND ');\n}\n\nexport function constructSearchInputFromURLState(urlState: any) {\n  if ('searchInput' in urlState) {\n    return urlState['searchInput'];\n  }\n  if ('nameSearchInput' in urlState && 'tagSearchInput' in urlState) {\n    return getModelNameFilter(urlState['nameSearchInput']) + ` AND ` + urlState['tagSearchInput'];\n  }\n  if ('tagSearchInput' in urlState) {\n    return urlState['tagSearchInput'];\n  }\n  if ('nameSearchInput' in urlState) {\n    return urlState['nameSearchInput'];\n  }\n  return '';\n}\n","/*!\n * bytes\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015 Jed Watson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = bytes;\nmodule.exports.format = format;\nmodule.exports.parse = parse;\n\n/**\n * Module variables.\n * @private\n */\n\nvar formatThousandsRegExp = /\\B(?=(\\d{3})+(?!\\d))/g;\n\nvar formatDecimalsRegExp = /(?:\\.0*|(\\.[^0]+)0+)$/;\n\nvar map = {\n  b:  1,\n  kb: 1 << 10,\n  mb: 1 << 20,\n  gb: 1 << 30,\n  tb: ((1 << 30) * 1024)\n};\n\nvar parseRegExp = /^((-|\\+)?(\\d+(?:\\.\\d+)?)) *(kb|mb|gb|tb)$/i;\n\n/**\n * Convert the given value in bytes into a string or parse to string to an integer in bytes.\n *\n * @param {string|number} value\n * @param {{\n *  case: [string],\n *  decimalPlaces: [number]\n *  fixedDecimals: [boolean]\n *  thousandsSeparator: [string]\n *  unitSeparator: [string]\n *  }} [options] bytes options.\n *\n * @returns {string|number|null}\n */\n\nfunction bytes(value, options) {\n  if (typeof value === 'string') {\n    return parse(value);\n  }\n\n  if (typeof value === 'number') {\n    return format(value, options);\n  }\n\n  return null;\n}\n\n/**\n * Format the given value in bytes into a string.\n *\n * If the value is negative, it is kept as such. If it is a float,\n * it is rounded.\n *\n * @param {number} value\n * @param {object} [options]\n * @param {number} [options.decimalPlaces=2]\n * @param {number} [options.fixedDecimals=false]\n * @param {string} [options.thousandsSeparator=]\n * @param {string} [options.unit=]\n * @param {string} [options.unitSeparator=]\n *\n * @returns {string|null}\n * @public\n */\n\nfunction format(value, options) {\n  if (!Number.isFinite(value)) {\n    return null;\n  }\n\n  var mag = Math.abs(value);\n  var thousandsSeparator = (options && options.thousandsSeparator) || '';\n  var unitSeparator = (options && options.unitSeparator) || '';\n  var decimalPlaces = (options && options.decimalPlaces !== undefined) ? options.decimalPlaces : 2;\n  var fixedDecimals = Boolean(options && options.fixedDecimals);\n  var unit = (options && options.unit) || '';\n\n  if (!unit || !map[unit.toLowerCase()]) {\n    if (mag >= map.tb) {\n      unit = 'TB';\n    } else if (mag >= map.gb) {\n      unit = 'GB';\n    } else if (mag >= map.mb) {\n      unit = 'MB';\n    } else if (mag >= map.kb) {\n      unit = 'KB';\n    } else {\n      unit = 'B';\n    }\n  }\n\n  var val = value / map[unit.toLowerCase()];\n  var str = val.toFixed(decimalPlaces);\n\n  if (!fixedDecimals) {\n    str = str.replace(formatDecimalsRegExp, '$1');\n  }\n\n  if (thousandsSeparator) {\n    str = str.replace(formatThousandsRegExp, thousandsSeparator);\n  }\n\n  return str + unitSeparator + unit;\n}\n\n/**\n * Parse the string value into an integer in bytes.\n *\n * If no unit is given, it is assumed the value is in bytes.\n *\n * @param {number|string} val\n *\n * @returns {number|null}\n * @public\n */\n\nfunction parse(val) {\n  if (typeof val === 'number' && !isNaN(val)) {\n    return val;\n  }\n\n  if (typeof val !== 'string') {\n    return null;\n  }\n\n  // Test if the string passed is valid\n  var results = parseRegExp.exec(val);\n  var floatValue;\n  var unit = 'b';\n\n  if (!results) {\n    // Nothing could be extracted from the given string\n    floatValue = parseInt(val, 10);\n    unit = 'b'\n  } else {\n    // Retrieve the value and the unit\n    floatValue = parseFloat(results[1]);\n    unit = results[4].toLowerCase();\n  }\n\n  return Math.floor(map[unit] * floatValue);\n}\n"],"names":["Prompt","_ref","when","message","block","React","UNSAFE_NavigationContext","navigator","window","confirm","EditableNoteImpl","Component","constructor","arguments","state","markdown","this","props","defaultMarkdown","selectedTab","defaultSelectedTab","error","converter","getMarkdownConverter","handleMdeValueChange","setState","handleTabChange","handleSubmitClick","onSubmit","confirmLoading","Promise","resolve","then","catch","e","getMessageField","intl","formatMessage","id","defaultMessage","handleCancelClick","onCancel","contentHasChanged","renderActions","_jsx","className","children","_jsxs","Button","componentId","type","onClick","disabled","loading","saveText","htmlType","FormattedMessage","getSanitizedHtmlContent","sanitized","sanitizeConvertedHtml","makeHtml","forceAnchorTagNewTab","render","showEditor","htmlContent","ReactMde","value","minEditorHeight","maxEditorHeight","minPreviewHeight","childProps","toolbarCommands","onChange","onTabChange","generateMarkdownPreview","md","getIcon","name","TooltipIcon","Alert","description","closable","HTMLNoteContent","content","theme","useDesignSystemTheme","LegacyTooltip","position","title","css","_css","color","colors","textPrimary","SvgIcon","icon","dangerouslySetInnerHTML","__html","defaultProps","EditableNote","injectIntl","Paragraph","Typography","styles","_ref2","KeyValueTagFullViewModal","Modal","tagKey","visible","isKeyValueTagFullViewModalVisible","setIsKeyValueTagFullViewModalVisible","backgroundColor","backgroundPrimary","marginTop","spacing","sm","whiteSpace","wordBreak","tagValue","CopyButton","copyText","showLabel","CopyIcon","TRUNCATE_ON_CHARS_LENGTH","getTruncatedStyles","length","undefined","overflow","textOverflow","textWrap","KeyValueTag","isClosable","onClose","tag","enableFullViewModal","charLimit","maxWidth","useIntl","useState","shouldTruncateKey","shouldTruncateValue","key","fullLength","isKeyLonger","shorterLength","getKeyAndValueComplexTruncation","allowFullViewModal","fullViewModalLabel","Tag","display","Text","bold","getDropdownMenu","allAvailableTags","menu","searchValue","toLowerCase","useMemo","sortedIndexOf","isValidTagKey","test","flattenOptions","data","style","actionTertiaryTextDefault","actionDisabledText","placement","PlusIcon","marginRight","groupOption","DropdownMenu","_ref3","TagKeySelectDropdown","control","onKeyChangeCallback","isOpen","setIsOpen","selectRef","useRef","field","fieldState","useController","rules","required","LegacySelect","allowClear","ref","dangerouslySetAntdProps","showSearch","dropdownRender","placeholder","defaultValue","open","onDropdownVisibleChange","filterOption","input","option","includes","onSelect","onClear","handleClear","validationState","map","Option","getTagsMap","tags","Map","_ref4","useEditKeyValueTagsModal","onSuccess","saveTagsHandler","valueRequired","editedEntityRef","errorMessage","setErrorMessage","initialTags","setInitialTags","finalTags","setFinalTags","showModal","setShowModal","form","useForm","defaultValues","hideModal","showEditTagsModal","useCallback","editedEntity","current","reset","saveTags","async","setIsLoading","Array","from","values","_e$getUserVisibleErro","ErrorWrapper","getUserVisibleError","formValues","watch","isLoading","hasNewValues","isEqual","sortBy","isDirty","showPopoverMessage","EditTagsModal","destroyOnClose","footer","RestoreAntDDefaultClsPrefix","dangerouslyUseFocusPseudoClass","UnsavedTagPopoverTrigger","onSaveTask","handleSubmit","trim","newEntries","set","alignItems","gap","minWidth","flex","FormUI","Label","htmlFor","_tag$value","get","setValue","RHFControlledComponents","Input","Message","rowGap","xs","flexWrap","currentFinalTags","delete","handleTagDelete","_ref6","_ref5","fullTagDisplay","truncate","shownText","Popover","Root","Trigger","asChild","Content","align","Close","marginLeft","Arrow","RegisterModelImpl","super","modelByName","createRegisteredModelRequestId","getUUID","createModelVersionRequestId","searchModelVersionRequestId","showRegisterModal","hideRegisterModal","_this$props$onCloseMo","_this$props","onCloseModal","call","resetAndClearModalForm","_this$form$current","_this$props$onCloseMo2","_this$props2","resetFields","handleRegistrationFailure","Utils","logErrorAndNotifyUser","handleSearchRegisteredModels","searchRegisteredModelsApi","getModelNameFilter","reloadModelVersionsForCurrentRun","runUuid","searchModelVersionsApi","run_id","handleRegisterModel","validateFields","modelPath","selectedModelName","SELECTED_MODEL_FIELD","_this$props$onRegiste","_this$props$onRegiste2","_this$props$onRegiste3","_this$props$onRegiste4","CREATE_NEW_MODEL_OPTION_VALUE","createRegisteredModelApi","MODEL_NAME_FIELD","createModelVersionApi","onRegisterSuccess","identity","onRegisterFailure","componentDidMount","componentDidUpdate","prevProps","prevState","renderRegisterModelForm","RegisterModelForm","innerRef","onSearchRegisteredModels","_","renderFooter","renderHelper","disableButton","showButton","buttonType","tooltip","width","modalVisible","onOk","okText","centered","mapDispatchToProps","RegisterModelWithIntl","RegisterModel","connect","entities","ArtifactViewImpl","activeNodeId","toggledNodeIds","requestedNodeIds","Set","viewAsTable","onToggleTreebeard","dataNode","toggled","usingLoggedModels","isExperimentLoggedModelsUIEnabled","isLoggedModelsMode","newRequestedNodeIds","has","loggedModelId","listArtifactsLoggedModelApi","listArtifactsApi","getTreebeardData","artifactNode","isRoot","Object","c","Error","active","fileInfo","path","getBasename","toggleState","isLoaded","getExistingModelVersions","modelVersionsBySource","normalize","getActiveNodeRealPath","renderRegisterModelButton","activeNodeRealPath","modelRelativePath","String","renderModelVersionInfoSection","existingModelVersions","ModelVersionInfoSection","modelVersion","renderPathAndSizeInfo","node","ArtifactUtils","findChild","ellipsis","copyable","is_dir","bytes","getActiveNodeSize","renderSizeInfo","designSystemThemeApi","size","renderPathInfo","textSecondary","onDownloadClick","artifactPath","location","href","getArtifactLocationUrl","renderControls","shouldShowViewAsTableCheckbox","Checkbox","isChecked","arrowPointAtCenter","DownloadIcon","renderArtifactInfo","toRender","isModelRegistryEnabled","activeNodeCanBeRegistered","activeNodeIsDirectory","padding","flexDirection","justifyContent","artifactRootUri","file_size","parseInt","MLMODEL_FILE_NAME","handleActiveNodeChange","initialSelectedArtifactPath","artifactPathParts","split","err","console","pathSoFar","toggledArtifactState","forEach","part","setArtifactState","artifactState","runTags","getLoggedTablesFromTags","isEmpty","NoArtifactView","useAutoHeight","height","responsive","mediaQueries","overflowX","borderRight","borderDecorative","ArtifactViewTree","ShowArtifactPage","isDirectory","modelVersions","showArtifactLoggedTableView","ArtifactView","mapStateToProps","ownProps","_ownProps$artifactRoo","apis","getArtifacts","getArtifactRootUri","getAllModelVersions","modelVersionsWithNormalizedSource","version","source","WithDesignSystemThemeHoc","status","status_message","mvPageRoute","ModelRegistryRoutes","getModelVersionPageRoute","modelVersionLink","Link","to","target","rel","modelVersionStatusIconTooltips","ModelVersionStatusIcons","ModelVersionStatus","READY","registeredDate","formatTimestamp","creation_timestamp","DefaultModelVersionStatusMessages","paddingTop","Empty","image","LayerIcon","ArtifactPageImpl","pollIntervalId","getFailedtoListArtifactsMsg","artifactUri","errorThrown","searchRequestId","listArtifactRequestIds","concat","s","pollModelVersionsForCurrentRun","searchRequest","toString","JSON","stringify","pollArtifactsForCurrentRun","parts","i","renderErrorCondition","shouldRenderError","renderArtifactView","requests","ArtifactViewBrowserSkeleton","failedReq","ArtifactViewErrorState","setInterval","POLL_INTERVAL","componentWillUnmount","clearInterval","RequestStateWrapper","requestIds","ConnectedArtifactPage","initialSelectedArtifactPathMatch","pathname","match","selectedPath","_ownProps$runTags","loggedModelPaths","getLoggedModelPathsFromTags","withRouterNext","RunViewArtifactTab","useFullHeightPage","useMediaQuery","breakpoints","paddingBottom","ArtifactPage","useRunViewActiveTab","tabParam","useParams","RunPageTabName","MODEL_METRIC_CHARTS","SYSTEM_METRIC_CHARTS","shouldEnableRunDetailsPageTracesTab","TRACES","ARTIFACTS","OVERVIEW","TABS_WITHOUT_MARGIN","EVALUATIONS","RunViewModeSwitch","experimentId","navigate","useNavigate","currentTab","removeTabMargin","setRemoveTabMargin","LegacyTabs","activeKey","newTabKey","Routes","getRunPageTabRoute","getRunPageRoute","tabBarStyle","margin","TabPane","tab","LoggedModelsDropdownContent","models","onRegisterClick","renderSection","sectionModels","Group","model","registeredModel","first","registeredVersions","Item","last","HintColumn","stopPropagation","endIcon","NewWindowIcon","absolutePath","getRegisteredModelVersionLink","IconWrapper","RegisteredModelOkIcon","registeredModels","filter","unregisteredModels","_Fragment","Separator","RunViewHeaderRegisterModelButton","registeredModelVersions","useSelector","orderBy","modelVersionsByRunUuid","getLoggedModelsFromTags","_model$registeredVers","selectedModelToRegister","setSelectedModelToRegister","modelsRegistered","modal","registeredCount","loggedCount","ChevronDownIcon","singleModel","registeredModelVersion","RunViewHeader","_experiment$experimen2","hasComparedExperimentsBefore","comparedExperimentIds","experiment","runDisplayName","runParams","handleRenameRunClick","handleDeleteRunClick","breadcrumbs","_experiment$experimen","getCompareExperimentsPageRoute","numExperiments","getExperimentPageRoute","getExperimentPageLink","PageHeader","OverflowMenu","itemName","STORAGE_ITEM_KEY","RunViewChartTooltipBody","_metricsForRun$metric","contextData","metricsForRun","hoverData","chartData","metricKey","isHovering","mode","singleTraceHoverData","containsMultipleRunsTooltipData","hoveredDataPoint","RunsChartsTooltipMode","MultipleTracesWithScanline","RunsMultipleTracesTooltipBody","metricEntity","timestamp","step","metricContainsHistory","isSystemMetric","isSystemMetricKey","displayTimestamp","isUndefined","displayStep","valueField","RunViewMetricHistoryChart","runInfo","metricsHistory","onUpdate","xRange","yRange","usingMultipleRunsHoverTooltip","shouldEnableDeepLearningUIPhase3","setTooltip","resetTooltip","useRunsChartsTooltip","Simple","_runInfo$runUuid","_runInfo$runName","uuid","displayName","runName","primary","RunsMetricsLinePlot","runsData","xAxisKey","RunsChartsLineChartXAxisType","TIME","STEP","selectedXAxisMetricKey","onHover","onUnhover","useDefaultHoverBox","lineSmoothness","RunViewMetricSingleValueChart","metricEntry","metrics","RunsMetricsBarPlot","displayRunNames","displayMetricKey","RunViewMetricChartHeader","dragHandleRef","canMoveUp","canMoveDown","onMoveUp","onMoveDown","onRefresh","isRefreshing","marginBottom","DragIcon","Title","level","withoutMargins","Spinner","label","OverflowIcon","RunViewMetricChart","_resultsByRunUuid","_runInfo$runUuid2","dragGroupKey","onReorderWith","chartRefreshManager","dragPreviewRef","dropTargetRef","isDragging","isOver","useDragAndDropElement","dragKey","onDrop","runUuidsArray","compact","metricKeys","setRange","stepRange","setStepRange","fullMetricHistoryForRun","_state$entities$sampl","sampledMetricsByRunUuid","elementRef","isInViewport","useIsInViewport","resultsByRunUuid","refresh","useSampledMetricHistory","runUuids","enabled","range","maxResults","isSingleMetricEntry","updateStepRange","newStepRange","destroyTooltip","useEffect","registerRefreshCallback","chartLayoutUpdated","_layout$xaxis","_layout$yaxis","_layout$xaxis2","_layout$xaxis3","layout","xaxis","autorange","newYRange","yaxis","findChartStepsByTimestamp","_layout$xaxis4","_layout$xaxis5","lowerBound","Math","floor","upperBound","ceil","role","element","border","borderRadius","general","borderRadiusBase","background","onMouseLeave","getChartBody","_error$message","WarningIcon","LegacySkeleton","inset","isDarkMode","blue800","blue100","blue400","opacity","ChartRefreshManager","refreshCallbacks","cb","push","refreshAllCharts","systemMetricChartsEmpty","modelMetricChartsEmpty","defineMessages","EmptyMetricsFiltered","EmptyMetricsNotRecorded","metricKeyMatchesFilter","startsWith","normalizeChartMetricKey","RunViewMetricChartsSection","search","onReorderChart","filteredMetricKeys","moveChartDown","moveChartUp","useChartMoveUpDownFunctions","onReorder","next","indexOf","previous","gridSetup","getGridColumnSetup","maxColumns","lg","additionalBreakpoints","breakpointWidth","minColumnWidthForBreakpoint","index","_ref7","_ref8","_ref9","RunViewMetricCharts","useChartRefreshManager","refreshManager","mapValues","metricsByRange","flat","setSearch","orderedMetricKeys","useOrderedCharts","storageNamespace","storageKey","localStorageStore","LocalStorageUtils","getStoreForComponent","currentOrder","setCurrentOrder","savedOrder","getItem","parse","Number","MAX_SAFE_INTEGER","fromMetricKey","toMetricKey","sourceOrder","indexSource","indexTarget","setItem","noMetricsRecorded","allMetricsFilteredOut","some","showConfigArea","showCharts","tooltipContext","anyRunRefreshing","store","_runInfo$runUuid3","refreshing","DragAndDropProvider","prefix","SearchIcon","RefreshIcon","Spacer","RunsChartsTooltipWrapper","component","hoverOnly","RunViewStatusBox","green800","green100","red800","red100","RunStatusIcon","RunViewUserLinkBox","_runInfo$experimentId","user","getUser","searchRunsByUser","ExpandedJSONValueCell","structuredJSONValue","objectData","fontFamily","ExpandableParamValueCell","toggleExpanded","isExpanded","autoExpandedRowsList","cellRef","isOverflowing","setIsOverflowing","resizeObserverCallback","throttle","entry","scrollHeight","clientHeight","trailing","resizeObserver","ResizeObserver","observe","disconnect","ChevronRightIcon","DetailsOverviewParamsTable","params","setFilter","paramsValues","paramsList","filterLower","columns","accessorKey","header","enableResizing","meta","paddingLeft","cell","row","original","getIsExpanded","table","useReactTable","getCoreRowModel","getExpandedRowModel","getRowId","enableColumnResizing","columnResizeMode","renderTableContent","areAllResultsFiltered","Table","scrollable","empty","TableRow","isHeader","getLeafHeaders","TableHeader","resizable","column","getCanResize","resizeHandler","getResizeHandler","isResizing","getIsResizing","flexGrow","flexBasis","getSize","flexRender","columnDef","getContext","getRowModel","rows","getAllCells","_meta","TableCell","multiline","systemMetricsLabel","modelMetricsLabel","RunViewMetricsTableSection","metricsList","keyColumn","backgroundSecondary","getMetricPageRoute","_ref10","_ref11","RunViewMetricsTable","latestMetrics","metricValues","metricSegments","systemMetrics","modelMetrics","sum","segment","DatasetEntry","dataset","ExperimentViewDatasetWithContext","datasetWithTags","displayTextAsLink","RunViewDatasetBox","datasets","selectedDatasetWithRun","setSelectedDatasetWithRun","isDrawerOpen","setIsDrawerOpen","firstDataset","remainingDatasets","slice","datasetClicked","runData","digest","ExperimentViewDatasetDrawer","GET_RUN_QUERY","gql","useGetRunQuery","_data$mlflowGetRun","_data$mlflowGetRun2","apolloError","refetch","useQuery","variables","runId","skip","mlflowGetRun","run","refetchRun","apiError","RunViewParentRunBox","parentRunUuid","dispatch","useDispatch","parentRunInfoRedux","runInfosByUuid","parentRunInfoGraphql","shouldEnableGraphQLRunDetailsPage","parentRunInfo","_parentRunInfoGraphql","info","getRunApi","ParagraphSkeleton","RunViewTagsBox","onTagsUpdated","visibleTagKeys","visibleTagEntities","keys","isUserFacingTag","existingTags","newTags","setRunTagsBulkApi","showEditModal","editTagsLabel","PencilIcon","RunViewDescriptionBox","_tags$NOTE_CONTENT_TA","onDescriptionChanged","noteContent","NOTE_CONTENT_TAG","showNoteEditor","setShowNoteEditor","Hint","setTagApi","handleCancelEditNote","DetailsOverviewMetadataRow","borderBottom","minHeight","heightSm","getModelLink","RunViewRegisteredModelsBox","Overflow","RunViewLoggedModelsBox","loggedModels","getModelFlavorName","flavors","shouldDisplayArtifactPaths","cursor","heightBase","ModelsIcon","RunViewSourceBox","_tags$MLFLOW_RUN_GIT_","_tags$Utils$gitCommit","_tags$Utils$sourceTyp","branchName","MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG","commitHash","gitCommitTag","runSource","renderSource","ExperimentSourceTypeIcon","sourceType","sourceTypeTag","actionPrimaryBackgroundDefault","BranchIcon","overlayStyle","GitCommitIcon","DetailsOverviewMetadataTable","DetailsOverviewCopyableIdBox","EmptyValue","RunViewOverview","onRunDataUpdated","useLocation","parentRunIdTag","EXPERIMENT_PARENT_ID_TAG","renderDetails","startTime","getDuration","endTime","maxHeight","transformToKeyedObject","inputArray","keyBy","transformDatasets","datasetInput","_datasetInput$dataset","_datasetInput$dataset2","_datasetInput$dataset3","_datasetInput$dataset4","_datasetInput$dataset5","_datasetInput$dataset6","_datasetInput$dataset7","_datasetInput$dataset8","_datasetInput$dataset9","_datasetInput$dataset10","_datasetInput$dataset11","_datasetInput$dataset12","_datasetInput$tags$ma","_datasetInput$tags","profile","schema","_tag$key","useRunDetailsPageData","_detailsPageResponse$","_detailsPageResponse$2","_detailsPageResponse$3","_detailsPageResponse$4","_detailsPageResponse$5","_detailsPageResponse$6","usingGraphQL","_detailsPageGraphqlRe12","_detailsPageGraphqlRe13","_detailsPageGraphqlRe14","_detailsPageGraphqlRe15","detailsPageGraphqlResponse","graphQLQuery","_detailsPageGraphqlRe","_detailsPageGraphqlRe2","_detailsPageGraphqlRe3","_detailsPageGraphqlRe4","_detailsPageGraphqlRe5","_detailsPageGraphqlRe6","_detailsPageGraphqlRe7","_detailsPageGraphqlRe8","_detailsPageGraphqlRe9","_detailsPageGraphqlRe10","_detailsPageGraphqlRe11","pickBy","metric","param","inputs","datasetInputs","detailsPageResponse","useRunDetailsPageDataLegacy","runRequestId","setRunRequestId","experimentRequestId","setExperimentRequestId","tagsByRunUuid","latestMetricsByRunUuid","paramsByRunUuid","experimentsById","runDatasetsByUuid","fetchRun","action","fetchExperiment","getExperimentApi","fetchModelVersions","runLoading","runFetchError","_state$apis","_state$apis$runReques","_state$apis2","_state$apis2$runReque","Boolean","experimentLoading","experimentFetchError","_state$apis3","_state$apis3$experime","_state$apis4","_state$apis4$experime","errors","RunNotFoundView","ErrorView","statusCode","subMessage","fallbackHomePageReactRoute","rootRoute","RunViewMetricChartsV2Impl","_runInfo$runUuid4","chartUIState","updateChartsUIState","compareRunCharts","compareRunSections","chartsSearchFilter","visibleChartCards","_compareRunCharts$fil","shouldEnableDraggableChartsGridLayout","chart","deleted","fullScreenChart","setFullScreenChart","tooltipContextValue","imagesByRunUuid","configuredCardConfig","setConfiguredCardConfig","reorderCharts","useReorderRunsChartsFn","insertCharts","useInsertRunsChartsFn","removeChart","useRemoveRunsChartFn","confirmChartCardConfiguration","useConfirmChartCardConfigurationFn","images","metricHistory","resultChartSet","resultSectionSet","RunsChartsCardConfig","getBaseChartAndSectionConfigs","enabledSectionNames","MLFLOW_MODEL_METRIC_NAME","MLFLOW_SYSTEM_METRIC_NAME","filterMetricNames","MLFLOW_SYSTEM_METRIC_PREFIX","isResultUpdated","updateChartAndSectionConfigs","isAccordionReordered","isTabActive","useIsTabActive","autoRefreshEnabled","shouldEnableRunDetailsPageAutoRefresh","usePopulateImagesByRunUuid","runUuidsIsActive","shouldEnableImageGridCharts","searchChartsValue","shouldUseRegexpBasedChartFiltering","RunsChartsFilterInput","ToggleButton","pressed","onPressedChange","shouldEnableGlobalLineChartConfig","RunsChartsGlobalChartSettingsDropdown","metricKeyList","globalLineChartConfig","updateUIState","RunsChartsDraggableCardsGridContextProvider","RunsChartsSectionAccordion","startEditChart","chartCard","addNewChartCard","metricSectionId","getEmptyChartCardByType","supportedChartTypes","RunsChartType","LINE","BAR","IMAGE","groupBy","RunsChartsConfigureModal","chartRunData","paramKeyList","config","configuredCard","RunsChartsFullScreenModal","tooltipComponent","RunViewMetricChartsV2","persistenceIdentifier","localStore","defaultChartState","persistedChartState","RunsChartsUIConfigurationContextProvider","disabledColumns","ExperimentViewTracesTableColumns","RunViewTracesTab","stableExperimentId","TracesView","experimentIds","getGraphQLErrorMessage","ApolloError","graphQLErrors","join","RunPageLoadingState","PageContainer","TitleSkeleton","seed","RunPage","_runInfo$artifactUri2","renameModalVisible","setRenameModalVisible","deleteModalVisible","setDeleteModalVisible","invariant","modelMetricKeys","systemMetricKeys","comparedExperiments","activeTab","initialLoading","getErrorCode","ErrorCodes","RESOURCE_DOES_NOT_EXIST","code","NotFoundPage","DangerIcon","usesFullHeight","getRunDisplayName","renderActiveTab","_runInfo$artifactUri","shouldUseUnifiedRunCharts","RenameRunModal","DeleteRunModal","selectedRunIds","OptGroup","CREATE_NEW_MODEL_LABEL","selectedModel","handleModelSelectChange","modelNameValidator","rule","callback","handleFilterOption","renderExplanatoryText","isCopy","explanation","renderModel","creatingNewModel","LegacyForm","dropdownClassName","onSearch","fontSize","validator","query","REGISTERED_MODELS_SEARCH_NAME_FIELD","resolveFilterValue","getCombinedSearchFilter","filters","initialFilter","constructSearchInputFromURLState","urlState","module","exports","options","format","formatThousandsRegExp","formatDecimalsRegExp","b","kb","mb","gb","tb","parseRegExp","isFinite","mag","abs","thousandsSeparator","unitSeparator","decimalPlaces","fixedDecimals","unit","str","toFixed","replace","val","isNaN","floatValue","results","exec","parseFloat"],"sourceRoot":""}